[{"id":0,"title":"Manage Cloud Providers","content":"#\n\nZephyr's Bring Your Own Cloud (BYOC) feature allows users to use their own cloud\ninfrastructure instead of relying on Zephyr's managed cloud. User's applications\ndeployed through Zephyr are usually deployed through user's own cloud providers.\n\nWith BYOC, users are able to manage configuration, understand the underlying\ninfrastruture, utilizing familiar features and having a clear billing among\ncloud infrastructures.\n\nUsers belong to an organization can manage and configure cloud providers on\nZephyr's dashboard, and user's organization gets connected with cloud provider\naccount by creating an integration under Deployment Integration tab.\n\n\nChoose your Cloud provider#","_html":"<h1 id=\"manage-cloud-providers-on-zephyr\">Manage Cloud Providers on Zephyr<a aria-hidden=\"true\" href=\"#manage-cloud-providers-on-zephyr\">#</a></h1>\n<p>Zephyr's Bring Your Own Cloud (BYOC) feature allows users to use their own cloud infrastructure instead of relying on Zephyr's managed cloud. User's applications deployed through Zephyr are usually deployed through user's own cloud providers.</p>\n<p>With BYOC, users are able to <em>manage configuration</em>, <em>understand the underlying infrastruture</em>, <em>utilizing familiar features</em> and <em>having a clear billing</em> among cloud infrastructures.</p>\n<p>Users belong to an organization can manage and configure cloud providers on Zephyr's <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">dashboard</a>, and user's organization gets connected with cloud provider account by creating an integration under <strong>Deployment Integration</strong> tab.</p>\n<h2 id=\"choose-your-cloud-provider\">Choose your Cloud provider<a aria-hidden=\"true\" href=\"#choose-your-cloud-provider\">#</a></h2>\n","routePath":"/cloud","lang":"en-US","toc":[{"text":"Choose your Cloud provider","id":"choose-your-cloud-provider","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"title":"Manage Cloud Providers","description":"With Zephyr's bring your own cloud feature, you can use Zephyr with your existing cloud infrastructure to manage your applications"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/cloud.mdx","_relativePath":"cloud.mdx"},{"id":1,"title":"Configure Cloudflare on Zephyr","content":"#\n\nOriginally launched as an email spam tracker, Cloudflare today offers extensive\ncapabilities for users to register, manage domains as a registrar, and monitor,\nsecure, and configure an entire IT infrastructure.\n\nIn this guide, we'll walk you through configuring Cloudflare as your default\ncloud provider for deploying and versioning applications with Zephyr Cloud. This\nsetup leverages Cloudflare's global edge network, KV namespaces, Workers, and\nPages to deliver your content at the edge.\n\n\nPrerequisites#\n\nINFO\n * A registered Cloudflare account\n * A domain registered on Cloudflare, or a domain whose DNS can be managed by\n   Cloudflare\n * A registered Zephyr Account\n\n\nConfigure and Enable Cloudflare#\n\n\nTesting Cloudflare Integration#\n\nVisit our recipes to test an application. Your next deployment should use your\ndesignated domain! (If not, talk to us on Discord).\n\nWhen using our managed cloud (Cloudflare) or custom Cloudflare integration,\navoid including capital letters in names for package.json, module federation\nconfiguration, or assets to prevent issues with Cloudflare queries.\n\n\nTroubleshooting#\n\n\nWhat Will Be Created on Your Cloudflare Account?#\n\nWhen Cloudflare is added as your provider on Zephyr, these properties will be\ncreated on your Cloudflare account:\n\n1. KV Namespaces#\n\nThree namespaces will be added:\n\n * ze_snapshots\n * ze_files\n * ze_env\n\n2. Workers#\n\n * ze-worker-for-static-upload (for uploading and serving assets)\n\n3. Worker Routes#\n\n * ze./* on worker ze-worker-for-static-upload\n * *-ze./* on worker ze-worker-for-static-upload\n\n4. DNS Records#\n\nA CNAME record will be added to your domain with the following details:\n\nTYPE    NAME   CONTENT              PROXY STATUS   TTL\nCNAME   *      ze.zephyrcloud.app   ✔ Proxied      Auto\n\n\nDeployment and Inspecting Assets#\n\nOnce your first Cloudflare deployment is complete, you can inspect assets.\n\nIn your Cloudflare dashboard, navigate to Workers & Pages and then KV to view\nassets under ze_files.\n\nINFO\n * ze_files: stores your actual assets.\n * ze_envs: stores application environment and access rights.\n * ze_snapshot: stores application snapshots compared against the previous\n   build.\n * If deploying an application previously on our managed cloud, run rm -rf\n   ~/.zephyr before deployment.\n * If you encounter issues deploying Micro-frontend applications, see our\n   Micro-frontend deployment guide.\n\n\nClean Uninstall and Reset#\n\nWarning\n * Zephyr Cloud does not manage deletion of API tokens or any Cloudflare account\n   properties.\n * Assets and information on your Cloudflare account are immutable by default.\n   During a clean uninstall, previously deployed assets and information are\n   unrecoverable.\n\nTo delete an existing Cloudflare integration, follow these steps:\n\n\nDelete Workers & Pages Projects#\n\n 1. Sign in to Cloudflare. In the navigation bar, select Workers & Pages.\n\n 2. Click on ze-worker-for-static-upload, select Manage, then click Delete.\n\n 3. Return to Workers & Pages and locate these two properties:\n\n * Cloudflare integration name: created under Cloudflare Project Name on the\n   Zephyr dashboard.\n * ze-worker-for-static-upload: created by Zephyr when integration was added.\n\nSelect both projects, choose Manage, and click Delete.\n\n\nDelete KV Namespace#\n\n 1. In Workers & Pages, select KV.\n\n 2. Locate and delete the following namespaces:\n\n * ze_envs\n * ze_snapshots\n * ze_files\n\n\nDelete Worker Routes#\n\n 1. On the dashboard, select the domain used for Deployment integration.\n\n 2. Choose Workers Routes in the navigation bar. Locate routes with ze and *-ze\n    prefixes, then select Edit and Remove.\n\n\nDelete Deployment Integration#\n\n 1. Log into Zephyr, select the organization with the integration to delete.\n\n 2. Go to Settings in the organization dashboard, choose Deployment Integration.\n\n 3. Select the integration name and click Remove.\n\n\nWhat’s Next?#","_html":"<h1 id=\"configure-cloudflare-on-zephyr\">Configure Cloudflare on Zephyr<a aria-hidden=\"true\" href=\"#configure-cloudflare-on-zephyr\">#</a></h1>\n<p>Originally launched as an email spam tracker, Cloudflare today offers extensive capabilities for users to register, manage domains as a registrar, and monitor, secure, and configure an entire IT infrastructure.</p>\n<p>In this guide, we'll walk you through configuring Cloudflare as your default cloud provider for deploying and versioning applications with Zephyr Cloud. This setup leverages Cloudflare's global edge network, KV namespaces, Workers, and Pages to deliver your content at the edge.</p>\n<h2 id=\"prerequisites\">Prerequisites<a aria-hidden=\"true\" href=\"#prerequisites\">#</a></h2>\n<div><div>INFO</div><div>\n<ul>\n<li>A registered Cloudflare account</li>\n<li>A domain registered on Cloudflare, or a domain whose DNS can be managed by Cloudflare</li>\n<li>A registered Zephyr Account</li>\n</ul>\n</div></div>\n<h2 id=\"configure-and-enable-cloudflare\">Configure and Enable Cloudflare<a aria-hidden=\"true\" href=\"#configure-and-enable-cloudflare\">#</a></h2>\n\n<h3 id=\"testing-cloudflare-integration\">Testing Cloudflare Integration<a aria-hidden=\"true\" href=\"#testing-cloudflare-integration\">#</a></h3>\n<p>Visit our <a href=\"/recipes\">recipes</a> to test an application. Your next deployment should use your designated domain! (If not, <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">talk to us on Discord</a>).</p>\n<p>When using our managed cloud (Cloudflare) or custom Cloudflare integration, avoid including capital letters in names for <code>package.json</code>, module federation configuration, or assets to prevent issues with Cloudflare queries.</p>\n<h2 id=\"troubleshooting\">Troubleshooting<a aria-hidden=\"true\" href=\"#troubleshooting\">#</a></h2>\n<h3 id=\"what-will-be-created-on-your-cloudflare-account\">What Will Be Created on Your Cloudflare Account?<a aria-hidden=\"true\" href=\"#what-will-be-created-on-your-cloudflare-account\">#</a></h3>\n<p>When Cloudflare is added as your provider on Zephyr, these properties will be created on your Cloudflare account:</p>\n<h4 id=\"1-kv-namespaces\">1. KV Namespaces<a aria-hidden=\"true\" href=\"#1-kv-namespaces\">#</a></h4>\n<p>Three namespaces will be added:</p>\n<ul>\n<li>ze_snapshots</li>\n<li>ze_files</li>\n<li>ze_env</li>\n</ul>\n<h4 id=\"2-workers\">2. Workers<a aria-hidden=\"true\" href=\"#2-workers\">#</a></h4>\n<ul>\n<li><code>ze-worker-for-static-upload</code> (for uploading and serving assets)</li>\n</ul>\n<h4 id=\"3-worker-routes\">3. Worker Routes<a aria-hidden=\"true\" href=\"#3-worker-routes\">#</a></h4>\n<ul>\n<li><code>ze.<domain.com>/*</code> on worker <code>ze-worker-for-static-upload</code></li>\n<li><code>*-ze.<domain.com>/*</code> on worker <code>ze-worker-for-static-upload</code></li>\n</ul>\n<h4 id=\"4-dns-records\">4. DNS Records<a aria-hidden=\"true\" href=\"#4-dns-records\">#</a></h4>\n<p>A CNAME record will be added to your domain with the following details:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Type</th>\n<th align=\"center\">Name</th>\n<th align=\"center\">Content</th>\n<th align=\"center\">Proxy Status</th>\n<th align=\"center\">TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">CNAME</td>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\"><code>ze.zephyrcloud.app</code></td>\n<td align=\"center\">✔ Proxied</td>\n<td align=\"center\">Auto</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deployment-and-inspecting-assets\">Deployment and Inspecting Assets<a aria-hidden=\"true\" href=\"#deployment-and-inspecting-assets\">#</a></h3>\n<p>Once your first Cloudflare deployment is complete, you can inspect assets.</p>\n<p>In your Cloudflare dashboard, navigate to <strong>Workers & Pages</strong> and then <strong>KV</strong> to view assets under <code>ze_files</code>.</p>\n<div><div>INFO</div><div>\n<ul>\n<li><code>ze_files</code>: stores your actual assets.</li>\n<li><code>ze_envs</code>: stores application environment and access rights.</li>\n<li><code>ze_snapshot</code>: stores application snapshots compared against the previous build.</li>\n<li>If deploying an application previously on our managed cloud, run <code>rm -rf ~/.zephyr</code> before deployment.</li>\n<li>If you encounter issues deploying Micro-frontend applications, see our <a href=\"/how-to/mf-guide\">Micro-frontend deployment guide</a>.</li>\n</ul>\n</div></div>\n<h2 id=\"clean-uninstall-and-reset\">Clean Uninstall and Reset<a aria-hidden=\"true\" href=\"#clean-uninstall-and-reset\">#</a></h2>\n<div><div>Warning</div><div>\n<ul>\n<li>Zephyr Cloud does not manage deletion of API tokens or any Cloudflare account properties.</li>\n<li>Assets and information on your Cloudflare account are immutable by default. During a <strong>clean uninstall</strong>, previously deployed assets and information are unrecoverable.</li>\n</ul>\n</div></div>\n<p>To delete an existing Cloudflare integration, follow these steps:</p>\n<h3 id=\"delete-workers--pages-projects\">Delete Workers & Pages Projects<a aria-hidden=\"true\" href=\"#delete-workers--pages-projects\">#</a></h3>\n<ol>\n<li>\n<p>Sign in to Cloudflare. In the navigation bar, select <strong>Workers & Pages</strong>.</p>\n</li>\n<li>\n<p>Click on <strong>ze-worker-for-static-upload</strong>, select <strong>Manage</strong>, then click <strong>Delete</strong>.</p>\n</li>\n<li>\n<p>Return to <strong>Workers & Pages</strong> and locate these two properties:</p>\n</li>\n</ol>\n<ul>\n<li><strong>Cloudflare integration name</strong>: created under <strong>Cloudflare Project Name</strong> on the Zephyr dashboard.</li>\n<li><strong>ze-worker-for-static-upload</strong>: created by Zephyr when integration was added.</li>\n</ul>\n<p>Select both projects, choose <strong>Manage</strong>, and click <strong>Delete</strong>.</p>\n<h3 id=\"delete-kv-namespace\">Delete KV Namespace<a aria-hidden=\"true\" href=\"#delete-kv-namespace\">#</a></h3>\n<ol>\n<li>\n<p>In <strong>Workers & Pages</strong>, select <strong>KV</strong>.</p>\n</li>\n<li>\n<p>Locate and delete the following namespaces:</p>\n</li>\n</ol>\n<ul>\n<li>ze_envs</li>\n<li>ze_snapshots</li>\n<li>ze_files</li>\n</ul>\n<h3 id=\"delete-worker-routes\">Delete Worker Routes<a aria-hidden=\"true\" href=\"#delete-worker-routes\">#</a></h3>\n<ol>\n<li>\n<p>On the dashboard, select the <strong>domain</strong> used for Deployment integration.</p>\n</li>\n<li>\n<p>Choose <strong>Workers Routes</strong> in the navigation bar. Locate routes with <code>ze</code> and <code>*-ze</code> prefixes, then select <strong>Edit</strong> and <strong>Remove</strong>.</p>\n</li>\n</ol>\n<h3 id=\"delete-deployment-integration\">Delete Deployment Integration<a aria-hidden=\"true\" href=\"#delete-deployment-integration\">#</a></h3>\n<ol>\n<li>\n<p>Log into Zephyr, select the organization with the integration to delete.</p>\n</li>\n<li>\n<p>Go to <strong>Settings</strong> in the organization dashboard, choose <strong>Deployment Integration</strong>.</p>\n</li>\n<li>\n<p>Select the integration name and click <strong>Remove</strong>.</p>\n</li>\n</ol>\n<h2 id=\"whats-next\">What’s Next?<a aria-hidden=\"true\" href=\"#whats-next\">#</a></h2>\n","routePath":"/cloud/cloudflare","lang":"en-US","toc":[{"text":"Prerequisites","id":"prerequisites","depth":2,"charIndex":495},{"text":"Configure and Enable Cloudflare","id":"configure-and-enable-cloudflare","depth":2,"charIndex":676},{"text":"Testing Cloudflare Integration","id":"testing-cloudflare-integration","depth":3,"charIndex":711},{"text":"Troubleshooting","id":"troubleshooting","depth":2,"charIndex":1099},{"text":"What Will Be Created on Your Cloudflare Account?","id":"what-will-be-created-on-your-cloudflare-account","depth":3,"charIndex":1118},{"text":"1. KV Namespaces","id":"1-kv-namespaces","depth":4,"charIndex":1284},{"text":"2. Workers","id":"2-workers","depth":4,"charIndex":1375},{"text":"3. Worker Routes","id":"3-worker-routes","depth":4,"charIndex":1455},{"text":"4. DNS Records","id":"4-dns-records","depth":4,"charIndex":1571},{"text":"Deployment and Inspecting Assets","id":"deployment-and-inspecting-assets","depth":3,"charIndex":1774},{"text":"Clean Uninstall and Reset","id":"clean-uninstall-and-reset","depth":2,"charIndex":2398},{"text":"Delete Workers & Pages Projects","id":"delete-workers--pages-projects","depth":3,"charIndex":2772},{"text":"Delete KV Namespace","id":"delete-kv-namespace","depth":3,"charIndex":3256},{"text":"Delete Worker Routes","id":"delete-worker-routes","depth":3,"charIndex":3404},{"text":"Delete Deployment Integration","id":"delete-deployment-integration","depth":3,"charIndex":3626},{"text":"What’s Next?","id":"whats-next","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"title":"Configure Cloudflare on Zephyr","description":"Configuring Cloudflare as your deployment integration provider on Zephyr"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/cloud/cloudflare.mdx","_relativePath":"cloud/cloudflare.mdx"},{"id":2,"title":"Configure Fastly on Zephyr","content":"#\n\n\nOverview#\n\nFastly's best-in-class edge cloud platform helps you modernize and automate to\nmeet your biggest challenges. Integration with Zephyr enables better margins,\nhigher developer productivity, faster innovation cycles, and enhanced\nreliability.\n\n\nPrerequisites#\n\nINFO\n * A registered Fastly account on the 'Usage' plan\n * A registered Zephyr account\n * A Fastly site project with a custom domain configured\n * A registered domain\n\n\nIntegration Setup#\n\nINFO\n\nAPI Token Configuration\n\n * Create your token here\n * Required permissions:\n   * Type: any\n   * Scope: Global API access\n\n\nSystem Components#\n\nThe integration creates:\n\n * Config store for jwt-secret\n * KV stores:\n   * ze-snapshots\n   * ze-envs\n   * ze-files\n * Compute service: ze-worker\n\n\nUsage Instructions#\n\n 1. Create a new Fastly deployment integration\n 2. Build a new application with Zephyr\n 3. During deployment:\n    * System retrieves site information using provided parameters\n    * Zephyr Plugin uploads build assets to KV stores","_html":"<h1 id=\"configure-fastly-on-zephyr\">Configure Fastly on Zephyr<a aria-hidden=\"true\" href=\"#configure-fastly-on-zephyr\">#</a></h1>\n<h2 id=\"overview\">Overview<a aria-hidden=\"true\" href=\"#overview\">#</a></h2>\n<p>Fastly's best-in-class edge cloud platform helps you modernize and automate to meet your biggest challenges. Integration with Zephyr enables better margins, higher developer productivity, faster innovation cycles, and enhanced reliability.</p>\n<h2 id=\"prerequisites\">Prerequisites<a aria-hidden=\"true\" href=\"#prerequisites\">#</a></h2>\n<div><div>INFO</div><div>\n<ul>\n<li>A registered Fastly account on the <em>'Usage'</em> plan</li>\n<li>A registered Zephyr account</li>\n<li>A Fastly site project with a <a href=\"https://docs.fastly.com/en/guides/working-with-domains\" target=\"_blank\" rel=\"noopener noreferrer\">custom domain</a> configured</li>\n<li>A registered domain</li>\n</ul>\n</div></div>\n<h2 id=\"integration-setup\">Integration Setup<a aria-hidden=\"true\" href=\"#integration-setup\">#</a></h2>\n<div><div>INFO</div><div><p>API Token Configuration</p>\n<ul>\n<li>Create your token <a href=\"/how-to/api-token\">here</a></li>\n<li>Required permissions:\n<ul>\n<li>Type: any</li>\n<li>Scope: Global API access</li>\n</ul>\n</li>\n</ul>\n</div></div>\n\n<h2 id=\"system-components\">System Components<a aria-hidden=\"true\" href=\"#system-components\">#</a></h2>\n<p>The integration creates:</p>\n<ul>\n<li>Config store for jwt-secret</li>\n<li>KV stores:\n<ul>\n<li>ze-snapshots</li>\n<li>ze-envs</li>\n<li>ze-files</li>\n</ul>\n</li>\n<li>Compute service: ze-worker</li>\n</ul>\n<h2 id=\"usage-instructions\">Usage Instructions<a aria-hidden=\"true\" href=\"#usage-instructions\">#</a></h2>\n<ol>\n<li>Create a new Fastly deployment integration</li>\n<li>Build a new application with Zephyr</li>\n<li>During deployment:\n<ul>\n<li>System retrieves site information using provided parameters</li>\n<li>Zephyr Plugin uploads build assets to KV stores</li>\n</ul>\n</li>\n</ol>","routePath":"/cloud/fastly","lang":"en-US","toc":[{"text":"Overview","id":"overview","depth":2,"charIndex":3},{"text":"Prerequisites","id":"prerequisites","depth":2,"charIndex":256},{"text":"Integration Setup","id":"integration-setup","depth":2,"charIndex":441},{"text":"System Components","id":"system-components","depth":2,"charIndex":590},{"text":"Usage Instructions","id":"usage-instructions","depth":2,"charIndex":758}],"domain":"","frontmatter":{"title":"Configure Fastly on Zephyr","description":"Configuring Fastly as your deployment integration provider on Zephyr"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/cloud/fastly.mdx","_relativePath":"cloud/fastly.mdx"},{"id":3,"title":"Configure Netlify on Zephyr","content":"#\n\nAccording to Netlify's documentation, Netlify is an enterprise-ready platform,\nwith plug&play feature to help customers build fast and reliable web\nexperiences.\n\nWe will discuss how to configure Netlify as your default cloud provider with\nBlob storage, Netlify sites and Netlify functions to deploy and version your\napplication with Zephyr Cloud, deliver content to your users using Netlify's\nBlob storage, Functions and Edge network.\n\nLaunch Week 1 - Netlify's Blog on how to use Zephyr with Netlify.\n\nTIP\n\nTo deploy a Micro-frontend application on Netlify, the bare minimum set up will\nonly require you to configure one site on Netlify.\n\nIn the land of Micro-Frontend and how Zephyr deploy applications, we map each\nindividual components and serve them with edge functions via the wildcards of\none domain (so you don't need to configure multiple site project on Netlify for\na Micro-Frontend application).\n\n\nPre-requisites#\n\nINFO\n * A registered Netlify account and a team with Pro plan (to enable custom\n   domain)\n * A registered Zephyr account\n * A Netlify site project with custom domain. (Read more about custom domain on\n   Netlify and how to configure it, it can be a domain managed by Netlify or you\n   will need to point your domain's name servers towards Netlify)\n * Wildcard subdomain enabled for your custom domain like *.domain.com - to\n   ensure Zephyr's feature like versioning, rollback/roll-forward and more are\n   available. (You will need to contact Netlify Support for a wildcard domain)\n\n\nWildcard subdomain on Netlify#\n\nHow-to\n\nBecause Zephyr Cloud handles deployments on your behalf, it needs the ability to\ncreate subdomains on your behalf, which means that you need to be able to\nconfigure a wildcard CNAME record on your domain, and you can’t use dynamic\ndomain features from Netlify, such as branch deploys or deploy previews.\n\nWildcard subdomains can be activated via contacting Netlify support, but there\nare a few requirements:\n\n 1. The site must be on a Pro or above team. ✅\n 2. The DNS must be managed by Netlify OR you need to bring a custom wildcard\n    SSL certificate. ✅\n 3. The site should not have any branch subdomains. ✅\n 4. The site cannot use Automatic Deploy Subdomains, so please disable this\n    feature if you are currently using it. ✅\n 5. The primary domain of the website should be on the same level as the\n    required wildcard domain. 🚨 For example: If you need the wildcard to be\n    *.bundlercorp.com⁣ where *⁣ can be your wildcard subdomain, the primary\n    domain must be www.bundlercorp.com⁣ (www⁣ can be replaced with any string).\n 6. You need to configure the DNS for the wildcard subdomain even in case you\n    are using Netlify DNS. You can follow the external DNS configuration for\n    subdomains and add a CNAME entry with *⁣ as the hostname or any other value\n    that you want. The value of this DNS entry should be the Netlify site\n    address.\n\nRead more about subdomain in Netlify's Documentation.\n\n\nSuccessful custom domain configuration example on Netlify#\n\n 1. You have a Netlify site and it's auto-assigned by Netlify.\n 2. The domain is assigned or configured on Netlify as\n    random-very-long-string.netlify.app.\n 3. You have a custom domain bundlercorp.com (an example domain) purchased from\n    Netlify's team page.\n\nExample DNS settings#\n\nPlease contact Netlify support to enable wildcard domain.\n\nBelow is an example of bundlercorp.com's DNS settings:\n\nTYPE      NAME                  VALUE                                 TTL\nNETLIFY   bundlercorp.com       random-very-long-string.netlify.app   3600\nNETLIFY   www.bundlercorp.com   random-very-long-string.netlify.app   3600\nCNAME     *.bundlercorp.com     random-very-long-string.netlify.app   3600\n\nExample name servers#\n\nName servers are auto-managed by Netlify if you register a domain from Netlify,\notherwise the value should be similar below. Read more.\n\nBelow is an example of bundlercorp.com's name servers:\n\nNAME SERVERS\ndns1.p09.nsone.net\ndns2.p09.nsone.net\ndns3.p09.nsone.net\ndns4.p09.nsone.net\n\nExample site project's domain settings#\n\n 1. Within the selected site's Domain management page\n    (https://app.netlify.com/sites/{site-name}/domain-management):\n\nDOMAIN                    DESCRIPTION\nbundlercorp.netlify.app   Netlify subdomain\nwww.bundlercorp.com       ⭐️ Primary domain\nbundlercorp.com           Redirects automatically to primary domain\n\n 2. Scroll down on this page to HTTPS section to verify if domain is has SSL/TLS\n    certificate by clicking on Verify DNS configuration or Provide your own\n    certificate.\n\nRead more about HTTPS settings on Netlify.\n\nIf your domain has TLS/SSL certificate verified for both wildcard domain and\nprimary domain, you should see the settings like so:\n\n\nConfigure and enable Netlify#\n\n\nTroubleshooting#\n\n\nWhat will be created on your Netlify site project?#\n\nAfter you add Netlify as your cloud provider on Zephyr, several properties will\nbe modified and added on your Netlify site project.\n\n 1. Blob storage\n\nThree blob storage space will be added:\n\n * site:ze_snapshots\n * site:ze_files\n * site:ze_env\n\n 2. Environment variable\n\nAn environment variable name JWT_SECRET will be created and being used by Zephyr\nto validate your access right when you are deploying applications.\n\n 3. Function\n\n * ze_worker_for_upload (used for uploading assets)\n\n 3. Edge function\n\n * ze_worker_for_serve (used for streaming your application assets and deliver\n   it to browser).\n\n:::\n\n\nDeployment and inspecting assets#\n\nOnce you finish your first deployment on Netlify, you can inspect your assets on\nNetlify.\n\nSign in to your Netlify team's main dashboard page and select your site project,\nyou can then click on Blobs and then select site:ze_files to inspect your\nassets.\n\nINFO\n * site:ze_files stores your actual assets.\n * site:ze_envs stores you application's environment, access right etc.\n * site:ze_snapshot stores your application's snapshots comparing against\n   previous build.\n * If you are deploying an application that's previously deployed through our\n   managed cloud, you will need to run rm -rf ~/.zephyr before deployment.\n * If you faced issues while deploying Micro-frontend application, you can\n   follow your complete guide on how to deploy Micro-frontend applications on\n   Zephyr.\n\n\nClean uninstall and reset#\n\nWarning\n * Zephyr Cloud do not handle your API token's and any other properties related\n   to your Netlify account's deletion.\n * Assets and information on your Netlify account are by default immutable. If\n   you are performing a clean uninstall (as below), you previous deployed assets\n   and information are unrecoverable.\n\n\nDelete Netlify site project#\n\nAt the moment, the only way to remove all the deployment assets, information and\nprevious configuration on Netlify is by deleting your site project.\n\nOn your site project's dashboard, click on Site configuration on the left,\nscroll down to find Delete site.\n\n\nDelete deployment integration#\n\n 1. Log into your account and select the organization associated with the\n    deployment integration you want to delete.\n\n 2. Select Settings on the organization dashboard. On the left side choose\n    Deployment Integration.\n\n 3. Choose the name of integration you want to delete and select Remove on the\n    next page.\n\n\nWhat's next?#","_html":"<h1 id=\"configure-netlify-on-zephyr\">Configure Netlify on Zephyr<a aria-hidden=\"true\" href=\"#configure-netlify-on-zephyr\">#</a></h1>\n<p>According to Netlify's documentation, Netlify is an enterprise-ready platform, with plug&play feature to help customers build fast and reliable web experiences.</p>\n<p>We will discuss how to configure Netlify as your default cloud provider with Blob storage, Netlify sites and Netlify functions to deploy and version your application with Zephyr Cloud, deliver content to your users using Netlify's Blob storage, Functions and Edge network.</p>\n<p><a href=\"https://developers.netlify.com/guides/micro-frontends-with-zephyr-cloud/\" target=\"_blank\" rel=\"noopener noreferrer\">Launch Week 1 - Netlify's Blog on how to use Zephyr with Netlify</a>.</p>\n<div><div>TIP</div><div>\n<p>To deploy a Micro-frontend application on Netlify, the bare minimum set up will <strong>only require you to configure one site</strong> on Netlify.</p>\n<p>In the land of Micro-Frontend and how Zephyr deploy applications, we map each individual components and serve them with edge functions via the wildcards of one domain (so you don't need to configure multiple site project on Netlify for a Micro-Frontend application).</p>\n</div></div>\n<h2 id=\"pre-requisites\">Pre-requisites<a aria-hidden=\"true\" href=\"#pre-requisites\">#</a></h2>\n<div><div>INFO</div><div>\n<ul>\n<li>A registered Netlify account and a team with Pro plan (to enable custom domain)</li>\n<li>A registered Zephyr account</li>\n<li>A Netlify site project with custom domain. (<a href=\"https://docs.netlify.com/domains-https/environmentss/\" target=\"_blank\" rel=\"noopener noreferrer\">Read more about custom domain on Netlify and how to configure it</a>, it can be a domain managed by Netlify or you will need to point your domain's name servers towards Netlify)</li>\n<li>Wildcard subdomain enabled for your custom domain like <code>*.domain.com</code> - to ensure Zephyr's feature like <strong>versioning</strong>, <strong>rollback/roll-forward</strong> and more are available. (<a href=\"https://www.netlify.com/support/\" target=\"_blank\" rel=\"noopener noreferrer\">You will <strong><em>need to</em></strong> contact Netlify Support for a wildcard domain</a>)</li>\n</ul>\n</div></div>\n<h3 id=\"wildcard-subdomain-on-netlify\">Wildcard subdomain on Netlify<a aria-hidden=\"true\" href=\"#wildcard-subdomain-on-netlify\">#</a></h3>\n<div><div>How-to</div><div>\n<p>Because Zephyr Cloud handles deployments on your behalf, it needs the ability to create subdomains on your behalf, which means that you need to be able to configure a wildcard <code>CNAME</code> record on your domain, and you can’t use dynamic domain features from Netlify, such as branch deploys or deploy previews.</p>\n<p>Wildcard subdomains can be activated via <a href=\"https://www.netlify.com/support/\" target=\"_blank\" rel=\"noopener noreferrer\">contacting Netlify support</a>, but there are a few requirements:</p>\n<ol>\n<li>The site must be on a Pro or above team. ✅</li>\n<li>The DNS must be managed by Netlify OR you need to bring a custom wildcard SSL certificate. ✅</li>\n<li>The site should not have any branch subdomains. ✅</li>\n<li>The site cannot use Automatic Deploy Subdomains, so please disable this feature if you are currently using it. ✅</li>\n<li>The primary domain of the website should be on the same level as the required wildcard domain.\n🚨 For example:\nIf you need the wildcard to be <code>*.bundlercorp.com</code>⁣ where <code>*</code>⁣ can be your wildcard subdomain, the primary domain must be <code>www.bundlercorp.com⁣</code> (www⁣ can be replaced with any string).</li>\n<li>You need to configure the DNS for the wildcard subdomain even in case you are using Netlify DNS. You can follow the external DNS configuration for subdomains and add a CNAME entry with <code>*⁣</code> as the hostname or any other value that you want. The value of this DNS entry should be the Netlify site address.</li>\n</ol>\n<p><a href=\"https://docs.netlify.com/domains-https/environmentss/configure-external-dns/#configure-a-subdomain\" target=\"_blank\" rel=\"noopener noreferrer\">Read more about subdomain in Netlify's Documentation</a>.</p>\n</div></div>\n<h3 id=\"successful-custom-domain-configuration-example-on-netlify\">Successful custom domain configuration example on Netlify<a aria-hidden=\"true\" href=\"#successful-custom-domain-configuration-example-on-netlify\">#</a></h3>\n<ol>\n<li>You have a Netlify site and it's auto-assigned by Netlify.</li>\n<li>The domain is assigned or configured on Netlify as <code>random-very-long-string.netlify.app</code>.</li>\n<li>You have a custom domain <code>bundlercorp.com</code> (<strong>an example domain</strong>) <strong>purchased from Netlify's team page</strong>.</li>\n</ol>\n<h4 id=\"example-dns-settings\">Example DNS settings<a aria-hidden=\"true\" href=\"#example-dns-settings\">#</a></h4>\n<p><strong>Please <a href=\"https://www.netlify.com/support/\" target=\"_blank\" rel=\"noopener noreferrer\">contact Netlify support to enable wildcard domain</a></strong>.</p>\n<p>Below is an example of <code>bundlercorp.com</code>'s DNS settings:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Type</th>\n<th align=\"center\">Name</th>\n<th align=\"center\">Value</th>\n<th align=\"center\">TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">NETLIFY</td>\n<td align=\"center\"><code>bundlercorp.com</code></td>\n<td align=\"center\"><code>random-very-long-string.netlify.app</code></td>\n<td align=\"center\">3600</td>\n</tr>\n<tr>\n<td align=\"center\">NETLIFY</td>\n<td align=\"center\"><code>www.bundlercorp.com</code></td>\n<td align=\"center\"><code>random-very-long-string.netlify.app</code></td>\n<td align=\"center\">3600</td>\n</tr>\n<tr>\n<td align=\"center\">CNAME</td>\n<td align=\"center\"><code>*.bundlercorp.com</code></td>\n<td align=\"center\"><code>random-very-long-string.netlify.app</code></td>\n<td align=\"center\">3600</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"example-name-servers\">Example name servers<a aria-hidden=\"true\" href=\"#example-name-servers\">#</a></h4>\n<p>Name servers are auto-managed by Netlify if you register a domain from Netlify, otherwise the value should be similar below.  <a href=\"https://docs.netlify.com/domains-https/environmentss/\" target=\"_blank\" rel=\"noopener noreferrer\">Read more</a>.</p>\n<p>Below is an example of <code>bundlercorp.com</code>'s name servers:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Name servers</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>dns1.p09.nsone.net</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>dns2.p09.nsone.net</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>dns3.p09.nsone.net</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>dns4.p09.nsone.net</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"example-site-projects-domain-settings\">Example site project's domain settings<a aria-hidden=\"true\" href=\"#example-site-projects-domain-settings\">#</a></h4>\n<ol>\n<li>Within the selected site's <strong>Domain management</strong> page (<code>https://app.netlify.com/sites/{site-name}/domain-management</code>):</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Domain</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>bundlercorp.netlify.app</code></td>\n<td align=\"left\">Netlify subdomain</td>\n</tr>\n<tr>\n<td align=\"left\"><code>www.bundlercorp.com</code></td>\n<td align=\"left\"><strong>⭐️ Primary domain</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><code>bundlercorp.com</code></td>\n<td align=\"left\">Redirects automatically to primary domain</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>Scroll down on this page to <strong>HTTPS</strong> section to verify if domain is has SSL/TLS certificate by clicking on <strong>Verify DNS configuration</strong> or <strong>Provide your own certificate</strong>.</li>\n</ol>\n<p><a href=\"https://docs.netlify.com/domains-https/https-ssl/\" target=\"_blank\" rel=\"noopener noreferrer\">Read more about <strong>HTTPS</strong> settings on Netlify</a>.</p>\n<p>If your domain has TLS/SSL certificate verified for both wildcard domain and primary domain, you should see the settings like so:</p>\n\n<h2 id=\"configure-and-enable-netlify\">Configure and enable Netlify<a aria-hidden=\"true\" href=\"#configure-and-enable-netlify\">#</a></h2>\n\n<h2 id=\"troubleshooting\">Troubleshooting<a aria-hidden=\"true\" href=\"#troubleshooting\">#</a></h2>\n<h3 id=\"what-will-be-created-on-your-netlify-site-project\">What will be created on your Netlify site project?<a aria-hidden=\"true\" href=\"#what-will-be-created-on-your-netlify-site-project\">#</a></h3>\n<p>After you add Netlify as your cloud provider on Zephyr, several properties will be modified and added on your Netlify site project.</p>\n<ol>\n<li>Blob storage</li>\n</ol>\n<p>Three blob storage space will be added:</p>\n<ul>\n<li><code>site:ze_snapshots</code></li>\n<li><code>site:ze_files</code></li>\n<li><code>site:ze_env</code></li>\n</ul>\n<ol start=\"2\">\n<li>Environment variable</li>\n</ol>\n<p>An environment variable name <code>JWT_SECRET</code> will be created and being used by Zephyr to validate your access right when you are deploying applications.</p>\n<ol start=\"3\">\n<li>Function</li>\n</ol>\n<ul>\n<li><code>ze_worker_for_upload</code> (used for uploading assets)</li>\n</ul>\n<ol start=\"3\">\n<li>Edge function</li>\n</ol>\n<ul>\n<li><code>ze_worker_for_serve</code> (used for streaming your application assets and deliver it to browser).</li>\n</ul>\n<p>:::</p>\n<h3 id=\"deployment-and-inspecting-assets\">Deployment and inspecting assets<a aria-hidden=\"true\" href=\"#deployment-and-inspecting-assets\">#</a></h3>\n<p>Once you finish your first deployment on Netlify, you can inspect your assets on Netlify.</p>\n<p>Sign in to your Netlify team's main dashboard page and select your site project, you can then click on <strong>Blobs</strong> and then select <strong>site:ze_files</strong> to inspect your assets.</p>\n<div><div>INFO</div><div>\n<ul>\n<li><code>site:ze_files</code> stores your actual assets.</li>\n<li><code>site:ze_envs</code> stores you application's environment, access right etc.</li>\n<li><code>site:ze_snapshot</code> stores your application's snapshots comparing against previous build.</li>\n<li>If you are deploying an application that's previously deployed through our managed cloud, you will need to run <code>rm -rf ~/.zephyr</code> before deployment.</li>\n<li>If you faced issues while deploying Micro-frontend application, you can follow your complete guide on <a href=\"/how-to/mf-guide\">how to deploy Micro-frontend applications on Zephyr</a>.</li>\n</ul>\n</div></div>\n<h2 id=\"clean-uninstall-and-reset\">Clean uninstall and reset<a aria-hidden=\"true\" href=\"#clean-uninstall-and-reset\">#</a></h2>\n<div><div>Warning</div><div>\n<ul>\n<li>Zephyr Cloud do not handle your API token's and any other properties related to your Netlify account's deletion.</li>\n<li>Assets and information on your Netlify account are by default immutable. If you are performing a <strong>clean uninstall</strong> (as below), you previous deployed assets and information are unrecoverable.</li>\n</ul>\n</div></div>\n<h3 id=\"delete-netlify-site-project\">Delete Netlify site project<a aria-hidden=\"true\" href=\"#delete-netlify-site-project\">#</a></h3>\n<p>At the moment, the only way to remove all the deployment assets, information and previous configuration on Netlify is by deleting your site project.</p>\n<p>On your site project's dashboard, click on <strong>Site configuration</strong> on the left, scroll down to find <strong>Delete site</strong>.</p>\n<h3 id=\"delete-deployment-integration\">Delete deployment integration<a aria-hidden=\"true\" href=\"#delete-deployment-integration\">#</a></h3>\n<ol>\n<li>\n<p>Log into your account and select the organization associated with the deployment integration you want to delete.</p>\n</li>\n<li>\n<p>Select <strong>Settings</strong> on the organization dashboard. On the left side choose <strong>Deployment Integration</strong>.</p>\n</li>\n<li>\n<p>Choose the name of integration you want to delete and select <strong>Remove</strong> on the next page.</p>\n</li>\n</ol>\n<h2 id=\"whats-next\">What's next?<a aria-hidden=\"true\" href=\"#whats-next\">#</a></h2>\n","routePath":"/cloud/netlify","lang":"en-US","toc":[{"text":"Pre-requisites","id":"pre-requisites","depth":2,"charIndex":911},{"text":"Wildcard subdomain on Netlify","id":"wildcard-subdomain-on-netlify","depth":3,"charIndex":1513},{"text":"Successful custom domain configuration example on Netlify","id":"successful-custom-domain-configuration-example-on-netlify","depth":3,"charIndex":2970},{"text":"Example DNS settings","id":"example-dns-settings","depth":4,"charIndex":3295},{"text":"Example name servers","id":"example-name-servers","depth":4,"charIndex":3733},{"text":"Example site project's domain settings","id":"example-site-projects-domain-settings","depth":4,"charIndex":4039},{"text":"Configure and enable Netlify","id":"configure-and-enable-netlify","depth":2,"charIndex":4748},{"text":"Troubleshooting","id":"troubleshooting","depth":2,"charIndex":4780},{"text":"What will be created on your Netlify site project?","id":"what-will-be-created-on-your-netlify-site-project","depth":3,"charIndex":4799},{"text":"Deployment and inspecting assets","id":"deployment-and-inspecting-assets","depth":3,"charIndex":5464},{"text":"Clean uninstall and reset","id":"clean-uninstall-and-reset","depth":2,"charIndex":6287},{"text":"Delete Netlify site project","id":"delete-netlify-site-project","depth":3,"charIndex":6642},{"text":"Delete deployment integration","id":"delete-deployment-integration","depth":3,"charIndex":6932},{"text":"What's next?","id":"whats-next","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"title":"Configure Netlify on Zephyr","description":"Configuring Netlify as your deployment integration provider on Zephyr"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/cloud/netlify.mdx","_relativePath":"cloud/netlify.mdx"},{"id":4,"title":"Error Encyclopedia","content":"#\n\nKnown issue on Managed Cloud VS. Cloud Provider\n\nBecause of Cloudflare Caching, the time to propagate deployed assets (for\ndeployment to be visible) might take from within one minute to an hour and the\ntiming is non-deterministic.\n\nThis is a known issue we are still investigating and seeking for improvements.\n\nIssue might be happening to:\n\n * Our managed cloud (Cloudflare)\n * Customer's custom deployment provider if customers are using Cloudflare.\n\nIf you are following the get started guide without custom deployment provider\nyou will be using our managed cloud.\n\nRead more about how to configure Cloudflare and how to configure Netlify as your\ndefault cloud provider.\n\nThis page contains a list of errors that you might encounter while using Zephyr\nCloud.\n\n\nBuild#\n\n\nDeploy#\n\n\nBrowser#","_html":"<h1 id=\"error-encyclopedia\">Error Encyclopedia<a aria-hidden=\"true\" href=\"#error-encyclopedia\">#</a></h1>\n<div><div>Known issue on Managed Cloud VS. Cloud Provider</div><div>\n<p>Because of Cloudflare Caching, the time to propagate deployed assets (for deployment to be visible) might take from within one minute to an hour and the timing is non-deterministic.</p>\n<p>This is a known issue we are still investigating and seeking for improvements.</p>\n<p>Issue might be happening to:</p>\n<ul>\n<li>Our managed cloud (<strong>Cloudflare</strong>)</li>\n<li>Customer's custom deployment provider if customers are using Cloudflare.</li>\n</ul>\n<p>If you are following the get started guide without custom deployment provider you will be using our managed cloud.</p>\n<p>Read more about <a href=\"/cloud/cloudflare\">how to configure Cloudflare</a> and <a href=\"/cloud/netlify\">how to configure Netlify</a> as your default cloud provider.</p>\n</div></div>\n<p>This page contains a list of errors that you might encounter while using Zephyr Cloud.</p>\n<h2 id=\"build\">Build<a aria-hidden=\"true\" href=\"#build\">#</a></h2>\n\n<h2 id=\"deploy\">Deploy<a aria-hidden=\"true\" href=\"#deploy\">#</a></h2>\n\n<h2 id=\"browser\">Browser<a aria-hidden=\"true\" href=\"#browser\">#</a></h2>\n","routePath":"/errors","lang":"en-US","toc":[{"text":"Build","id":"build","depth":2,"charIndex":766},{"text":"Deploy","id":"deploy","depth":2,"charIndex":775},{"text":"Browser","id":"browser","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors.mdx","_relativePath":"errors.mdx"},{"id":5,"title":"","content":"ZE10010\nPackage.json not found\n\n\n#\n\nThis method is implemented across all bundlers' plugins (see our supported\nbundlers and their relevant packages).\n\nWhen we start the deployment process after your build, we first look for a\npackage.json file in current directory (the same level) where bundler's\nconfiguration file lives based on your bundler's configuration and if not - we\nwill find your current working directory ourselves. How we find your\npackage.json file could be determined by two factors:\n\n\nDebugging the error#\n\nEnsure that there is one package.json file within either the directory where\nbundler's configuration lives, or it's parent one.\n\n\nExample folder structure#\n\n","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>This method is implemented across all bundlers' plugins (see our <a href=\"/supported\">supported bundlers and their relevant packages</a>).</p>\n<p>When we start the deployment process after your build, we first look for a <code>package.json</code> file in current directory (the same level) where bundler's configuration file lives based on your bundler's configuration and if not - we will find your current working directory ourselves. How we find your <code>package.json</code> file could be determined by two factors:</p>\n\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n<p>Ensure that there is one <code>package.json</code> file within either the directory where bundler's configuration lives, or it's parent one.</p>\n<h2 id=\"example-folder-structure\">Example folder structure<a aria-hidden=\"true\" href=\"#example-folder-structure\">#</a></h2>\n\n\n\n<pre><code>.\n├── README.md\n├── index.html\n├── package-lock.json\n├── package.json\n├── public\n│   └── vite.svg\n├── src\n│   ├── App.css\n│   ├── App.tsx\n│   ├── assets\n│   │   └── react.svg\n│   ├── index.css\n│   ├── main.tsx\n│   └── vite-env.d.ts\n├── tsconfig.json\n├── tsconfig.node.json\n└── vite.config.ts\n</code></pre>","routePath":"/errors/ze10010","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":468},{"text":"Example folder structure","id":"example-folder-structure","depth":2,"charIndex":620}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10010.mdx","_relativePath":"errors/ze10010.mdx"},{"id":6,"title":"","content":"ZE10011\nPackage.json is not in a valid json format.\n\n\nZE10011 package.json not found#\n\n\n#\n\nAfter we recursively loop for the current working directory where the bundler's\nconfig lives and locate the package.json file, we then perform a parsing\nfunction to make sure your package.json is a valid JSON format.\n\nIf the package.json we located is not in a valid JSON format (hey your npm\nscript or dependencies installation will fail if it is not), we will throw the\nerror.\n\n\nDebugging the error#\n\nAlthough it's unlikely, do make sure your package.json's format is in correct\nJSON format.","_html":"<h1 id=\"ze10011-packagejson-not-found\">ZE10011 package.json not found<a aria-hidden=\"true\" href=\"#ze10011-packagejson-not-found\">#</a></h1>\n<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>After we recursively loop for the current working directory where the bundler's config lives and locate the <code>package.json</code> file, we then perform a parsing function to make sure your <code>package.json</code> is a valid <a href=\"https://www.json.org/json-en.html\" target=\"_blank\" rel=\"noopener noreferrer\">JSON</a> format.</p>\n<p>If the <code>package.json</code> we located is not in a valid JSON format (hey your npm script or dependencies installation will fail if it is not), we will throw the  error.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n<p>Although it's unlikely, do make sure your <code>package.json</code>'s format is in correct JSON format.</p>","routePath":"/errors/ze10011","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":417}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10011.mdx","_relativePath":"errors/ze10011.mdx"},{"id":7,"title":"","content":"ZE10012\nWebpack config error.\n\n\n#\n\nWARNING\n\nThis error is deprecated","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<div><div>WARNING</div><div>\n<p>This error is deprecated</p>\n</div></div>","routePath":"/errors/ze10012","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10012.mdx","_relativePath":"errors/ze10012.mdx"},{"id":8,"title":"","content":"ZE10013\nPackage.json must have a name and version field.\n\n\n#\n\nWhen you are running a build through Zephyr, we will verify your package.json's\nfields to check whether you have the name and version fields. Later one we use\nthose values to compose application_uid. Behind the scene we will be using your\napplicaiton_uid to deploy your application with related information as well as\ngenerating build id.\n\n\nDebugging the error#\n\nMake sure the name and version fields have a value in your package.json!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>When you are running a build through Zephyr, we will verify your <code>package.json</code>'s fields to check whether you have the <strong>name</strong> and <strong>version</strong> fields. Later one we use those values to compose <code>application_uid</code>. Behind the scene we will be using your <code>applicaiton_uid</code> to deploy your application with related information as well as generating build id.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n<p>Make sure the <strong>name</strong> and <strong>version</strong> fields have a value in your <code>package.json</code>!</p>","routePath":"/errors/ze10013","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":343}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10013.mdx","_relativePath":"errors/ze10013.mdx"},{"id":9,"title":"","content":"ZE10014\nGit remote origin is not configured properly.\n\n\n#\n\nIf you have successfully deployed one application, you will see your deployed\nurl is a composition of your github's organization name, repository name as well\nas your package.json's name (yep, we might we done some data sanitization for\nit). This information is also how we store your information locally (There is a\n~/.zephyr in your root dir) to enable lightning fast deployment. We extract your\norganization's name and repository name\n\nIf project's git remote origin url is not configured, we won't be able to\nextract your git organization and repository's information to compose deployment\ninformation.\n\n\nDebugging the error#\n\nMake sure the project folder is a git repository:\n\n\n\nCopy the remote origin's url and run\n\n","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>If you have successfully deployed one application, you will see your deployed url is a composition of your github's organization name, repository name as well as your <code>package.json</code>'s name (yep, we might we done some data sanitization for it). This information is also how we store your information locally (There is a <code>~/.zephyr</code> in your root dir) to enable lightning fast deployment. We extract your organization's name and repository name</p>\n<p>If project's git remote origin url is not configured, we won't be able to extract your git organization and repository's information to compose deployment information.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n<p>Make sure the project folder is a git repository:</p>\n<pre><code>git init && git add . && git commit -M \"init\" && git branch -M main\n</code></pre>\n<p>Copy the remote origin's url and run</p>\n<pre><code>git add remote origin <remote-url>\n</code></pre>","routePath":"/errors/ze10014","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":611}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10014.mdx","_relativePath":"errors/ze10014.mdx"},{"id":10,"title":"","content":"ZE10015\nGit username or email is not configured.\n\n\n#\n\nWe store your user information at your local machine so when we are starting the\nbuild process we won't waste time on data transfer between your machine to data\ncenter. Each of your project's build, information, authentication to deployment\nplatform (encrypted) are in a local folder called ~/.zephyr.\n\nIf we are unable to extra your username or email in git, we won't be able to\ncorrelate them to other information such as application_uid or your\nauthentication details to help you deploy.\n\n\nDebugging the error#\n\nConfigure your username in terminal by:\n\n\n\nConfigure your git email by:\n\n","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>We store your user information at your local machine so when we are starting the build process we won't waste time on data transfer between your machine to data center. Each of your project's build, information, authentication to deployment platform (encrypted) are in a local folder called <code>~/.zephyr</code>.</p>\n<p>If we are unable to extra your username or email in git, we won't be able to correlate them to other information such as <code>application_uid</code> or your authentication details to help you deploy.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n<p>Configure your username in terminal by:</p>\n<pre><code>git config --global user.name = \"My Name\"\n</code></pre>\n<p>Configure your git email by:</p>\n<pre><code>git config --global user.email = \"My email\"\n</code></pre>","routePath":"/errors/ze10015","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":495}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10015.mdx","_relativePath":"errors/ze10015.mdx"},{"id":11,"title":"","content":"ZE10016\nCould not get git info.\n\n\n#\n\nThere could be several reason why this error shows up - it could be because\nremote origin wasn't configured for the project directory; it could be because\nyou haven't set a username for git; or it could be because you don't have an\nemail set to your git config.\n\nAll of these information will affect your build and deployment through Zephyr as\nwe use them to both authenticate you and deploy your application.\n\n\nDebugging the error#\n\nTo make sure you have all the configuration set up correctly, you can do so by\nrunning this in your project directory (use arrow key to scroll down and check\nyour remote origin's url)\n\n\n\nIf you are missing username and email, please refer to to configure it\ncorrectly.\n\nIf you are missing remote origin url, refer to .","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>There could be several reason why this error shows up - it could be because remote origin wasn't configured for the project directory; it could be because you haven't set a username for git; or it could be because you don't have an email set to your git config.</p>\n<p>All of these information will affect your build and deployment through Zephyr as we use them to both authenticate you and deploy your application.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n<p>To make sure you have all the configuration set up correctly, you can do so by running this in your project directory (use arrow key to scroll down and check your remote origin's url)</p>\n<pre><code>git config --list\n</code></pre>\n<p>If you are missing username and email, please refer to  to configure it correctly.</p>\n<p>If you are missing <code>remote origin url</code>, refer to .</p>","routePath":"/errors/ze10016","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":414}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10016.mdx","_relativePath":"errors/ze10016.mdx"},{"id":12,"title":"","content":"ZE10017\n`application_uid` missing.\n\n\n#\n\nAfter generating your application_uid based on your git config and package.json,\nwe save them to your local disk in a folder named ~/.zephyr and we utilize the\ninformation there to help you deploy your applications. Each one of your\napplication has their own unique application_uid.\n\nWhenever your are using our plugins - be it zephyr-webpack-plugin,\nvite-plugin-zephyr or rollup-plugin-zephyr, the first thing we do when you try\nto run a build is to check whether there is local configurations exists for thie\nproject to run a build. Your project's unique application_uid is how we connect\nwith edge URL and finishing your deployment process.\n\nIf the local configuration doesn't exists, we then won't be able to generate a\nbuild id unique to each of your build. Note that in some scenario you might\nstill be able to run a build - but your deployed url might show you .\n\n\nDebugging the error#","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>After generating your <code>application_uid</code> based on your git config and <code>package.json</code>, we save them to your local disk in a folder named <code>~/.zephyr</code> and we utilize the information there to help you deploy your applications. Each one of your application has their own unique <code>application_uid</code>.</p>\n<p>Whenever your are using our plugins - be it <a href=\"https://www.npmjs.com/package/zephyr-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">zephyr-webpack-plugin</a>, <a href=\"https://www.npmjs.com/package/vite-plugin-zephyr\" target=\"_blank\" rel=\"noopener noreferrer\">vite-plugin-zephyr</a> or <a href=\"https://www.npmjs.com/package/rollup-plugin-zephyr\" target=\"_blank\" rel=\"noopener noreferrer\">rollup-plugin-zephyr</a>, the first thing we do when you try to run a build is to check whether there is local configurations exists for thie project to run a build. Your project's unique <code>application_uid</code> is how we connect with edge URL and finishing your deployment process.</p>\n<p>If the local configuration doesn't exists, we then won't be able to generate a <code>build id</code> unique to each of your build. Note that in some scenario you might still be able to run a build - but your deployed url might show you .</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n","routePath":"/errors/ze10017","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10017.mdx","_relativePath":"errors/ze10017.mdx"},{"id":13,"title":"","content":"ZE10018\nAuth error.\n\n\n#\n\nThis error might happen for several reasons when you are running a build. While\nyou are running a build, we are creating a snapshot of your application,\ntransmitting your application details to the edge and most importantly, confirm\nwith server your identity - whether you have enabled cloud integration, or using\nour managed cloud.\n\nIf your local jwt token expired, or we couldn't locate your account (say you\nhave deleted your account on your dashboard), or you don't access to an\norganization which manages the project you are trying to deploy to, or you they\nare all plausible reasons you are facing auth error.\n\n\nDebugging the error#","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>This error might happen for several reasons when you are running a build.\nWhile you are running a build, we are creating a snapshot of your application, transmitting your application details to the edge and most importantly, confirm with server your identity - whether you have enabled cloud integration, or using our managed cloud.</p>\n<p>If your local jwt token expired, or we couldn't locate your account (say you have deleted your account on your dashboard), or you don't access to an organization which manages the project you are trying to deploy to, or you they are all plausible reasons you are facing auth error.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n","routePath":"/errors/ze10018","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10018.mdx","_relativePath":"errors/ze10018.mdx"},{"id":14,"title":"","content":"ZE10019\nCould not get build id.\n\n\n#\n\nINFO\n\nThis is one of the most common error during build.\n\nOnce we find your application_uid (composed by your github organization's name,\nproject name and the name field in package.json, refer to ), we will be\ncollecting data from your local cache, verifying your JWT token and checking\nyour write access to the related project. If we fail to find all the necessary\nconfiguration, we won't be able to obtain appropriate build id for you to\ncontinue with the deployment.\n\n\nDebugging the error#","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<div><div>INFO</div><div>\n<p>This is one of the most common error during build.</p>\n</div></div>\n<p>Once we find your <code>application_uid</code> (composed by your github organization's name, project name and the <code>name</code> field in package.json, refer to ), we will be collecting data from your local cache, verifying your JWT token and checking your write access to the related project. If we fail to find all the necessary configuration, we won't be able to obtain appropriate build id for you to continue with the deployment.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n","routePath":"/errors/ze10019","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10019.mdx","_relativePath":"errors/ze10019.mdx"},{"id":15,"title":"","content":"ZE10020\nCould not initialize Zephyr Agent.\n\n\n#\n\nOn your build start, there are a list of actions we run through. If any of these\nactions failed, Zephyr agent will fail to initialize in the Rollup plugin.\n\n\nDebugging the error#","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>On your build start, there are a list of actions we run through. If any of these actions failed, Zephyr agent will fail to initialize in the Rollup plugin.</p>\n\n\n\n\n\n\n\n\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n","routePath":"/errors/ze10020","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10020.mdx","_relativePath":"errors/ze10020.mdx"},{"id":16,"title":"","content":"ZE10021\nError creating dist folder.\n\n\n#\n\nThis error happens when your terminal session doesn't have the necessary\npermissions to create the dist folder. This can happen if you're running the\ncommand as a different user or if the permissions on the folder are incorrect.\n\nThis issue typically occurs due to insufficient permissions. Possible causes\ninclude:\n\n * Incorrect User: The command might be run by a user without the necessary\n   permissions.\n * Permission Settings: The permissions for the parent directory or the dist\n   folder may be incorrectly set.\n\nTo resolve this, ensure you have the appropriate permissions for the directory\nwhere you're trying to create the dist folder, or try running the command with\nelevated privileges.\n\n\nDebugging the error#","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>This error happens when your terminal session doesn't have the necessary permissions to create the <code>dist</code> folder. This can happen if you're running the command as a different user or if the permissions on the folder are incorrect.</p>\n<p>This issue typically occurs due to insufficient permissions. Possible causes include:</p>\n<ul>\n<li><strong>Incorrect User:</strong> The command might be run by a user without the necessary permissions.</li>\n<li><strong>Permission Settings:</strong> The permissions for the parent directory or the <code>dist</code> folder may be incorrectly set.</li>\n</ul>\n<p>To resolve this, ensure you have the appropriate permissions for the directory where you're trying to create the <code>dist</code> folder, or try running the command with elevated privileges.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n","routePath":"/errors/ze10021","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10021.mdx","_relativePath":"errors/ze10021.mdx"},{"id":17,"title":"","content":"ZE10028\nWrangler dependency is needed for Cloudflare deployment. Please install dependencies without --no-optional flag.\n\n\n#\n\nWARNING\n\nThis error will be deprecating soon.\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div><p>This error will be deprecating soon.</p>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze10028","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10028.mdx","_relativePath":"errors/ze10028.mdx"},{"id":18,"title":"","content":"ZE10029\nError creating dist folder.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze10029","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze10029.mdx","_relativePath":"errors/ze10029.mdx"},{"id":19,"title":"","content":"ZE20010\nAssets not found.\n\n\n#\n\nThis error occurs when a problem between Zephyr's plugin and our servers happens\nduring file upload and a asset for the remote module is not uploaded.\n\n\nDebugging the error#\n\n\nAsk for Support#\n\nCAUTION\n\nStill having problems? Try joining our Discord server and get help from the\ncommunity","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>This error occurs when a problem between Zephyr's plugin and our servers happens during file upload and a asset for the remote module is not uploaded.</p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n\n<h2 id=\"ask-for-support\">Ask for Support<a aria-hidden=\"true\" href=\"#ask-for-support\">#</a></h2>\n<div><div>CAUTION</div><div>\n<p><strong>Still having problems?</strong> <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">Try joining our Discord server and get help from the community</a></p>\n</div></div>","routePath":"/errors/ze20010","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":155},{"text":"Ask for Support","id":"ask-for-support","depth":2,"charIndex":178}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20010.mdx","_relativePath":"errors/ze20010.mdx"},{"id":20,"title":"","content":"ZE20011\nAssets not found in snapshot.\n\n\n#\n\nThis error occurs when attempting to access a URL that doesn't exist. It may be\ndue to a mistyped URL, a changed URL, or the project being deleted or moved.\n\nIt was either by a mistyped project_uid (subdomain) or the URL path doesn't\nexist:\n\nhttps://.valorkin.dev/\n\n\nDebugging the error#","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>This error occurs when attempting to access a URL that doesn't exist. It may be due to a mistyped URL, a changed URL, or the project being deleted or moved.</p>\n<p>It was either by a mistyped <code>project_uid</code> <em>(subdomain)</em> or the URL path doesn't exist:</p>\n<p><code>https://<project_uid>.valorkin.dev/<path></code></p>\n<h2 id=\"debugging-the-error\">Debugging the error<a aria-hidden=\"true\" href=\"#debugging-the-error\">#</a></h2>\n","routePath":"/errors/ze20011","lang":"en-US","toc":[{"text":"Debugging the error","id":"debugging-the-error","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20011.mdx","_relativePath":"errors/ze20011.mdx"},{"id":21,"title":"","content":"ZE20012\n`application_uid` is required.\n\n\n#\n\nThis error happens when the Zephyr's plugin tries to get a list of assets ids\nfrom the server to determine which assets it needs to upload, but failed to\nprovide a valid application_uid in the request.\n\n\nAsk for Support#\n\nCAUTION\n\nStill having problems? Try joining our Discord server and get help from the\ncommunity","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>This error happens when the Zephyr's plugin tries to get a list of assets ids from the server to determine which assets it needs to upload, but failed to provide a valid <code>application_uid</code> in the request.</p>\n\n<h2 id=\"ask-for-support\">Ask for Support<a aria-hidden=\"true\" href=\"#ask-for-support\">#</a></h2>\n<div><div>CAUTION</div><div>\n<p><strong>Still having problems?</strong> <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">Try joining our Discord server and get help from the community</a></p>\n</div></div>","routePath":"/errors/ze20012","lang":"en-US","toc":[{"text":"Ask for Support","id":"ask-for-support","depth":2,"charIndex":206}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20012.mdx","_relativePath":"errors/ze20012.mdx"},{"id":22,"title":"","content":"ZE20013\nMissing file hash.\n\n\n#\n\nThis error happens when the Zephyr's plugin tries to upload a file, but failed\nto provide a valid application_uid in the request, but failed to provide valid\nparams in the request.\n\n\nAsk for Support#\n\nCAUTION\n\nStill having problems? Try joining our Discord server and get help from the\ncommunity","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n<p>This error happens when the Zephyr's plugin tries to upload a file, but failed to provide a valid <code>application_uid</code> in the request, but failed to provide valid params in the request.</p>\n\n<h2 id=\"ask-for-support\">Ask for Support<a aria-hidden=\"true\" href=\"#ask-for-support\">#</a></h2>\n<div><div>CAUTION</div><div>\n<p><strong>Still having problems?</strong> <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">Try joining our Discord server and get help from the community</a></p>\n</div></div>","routePath":"/errors/ze20013","lang":"en-US","toc":[{"text":"Ask for Support","id":"ask-for-support","depth":2,"charIndex":185}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20013.mdx","_relativePath":"errors/ze20013.mdx"},{"id":23,"title":"","content":"ZE20014\nFailed to load application configuration.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20014","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20014.mdx","_relativePath":"errors/ze20014.mdx"},{"id":24,"title":"","content":"ZE20015\nFailed to upload build stats.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20015","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20015.mdx","_relativePath":"errors/ze20015.mdx"},{"id":25,"title":"","content":"ZE20016\nDid not receive envs from build stats upload.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20016","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20016.mdx","_relativePath":"errors/ze20016.mdx"},{"id":26,"title":"","content":"ZE20017\nFailed to upload assets.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20017","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20017.mdx","_relativePath":"errors/ze20017.mdx"},{"id":27,"title":"","content":"ZE20018\nFailed to upload snapshots.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20018","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20018.mdx","_relativePath":"errors/ze20018.mdx"},{"id":28,"title":"","content":"ZE20019\nSnapshot uploads gave no results.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20019","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20019.mdx","_relativePath":"errors/ze20019.mdx"},{"id":29,"title":"","content":"ZE20020\nFailed to get application hash list.\n\n\n#\n\n\nWhat does this error mean?#\n\nThis error means that the application is not able to correctly connect to your\nCloud provider.\n\n\nDebugging#\n\n\n1. Cloudflare Integration#\n\na. KV Namespaces#\n\nCheck if the following namespaces are created on your Cloudflare account:\n\n * ze_snapshots\n * ze_files\n * ze_env\n\nb. Workers#\n\nCheck if the following workers are created on your Cloudflare account:\n\n * ze-worker-for-static-upload\n\nc. Worker Routes#\n\nCheck if the following worker routes are created on your Cloudflare account:\n\n * ze./*\n * *-ze./*\n\nd. DNS Records#\n\nCheck if a CNAME record is created on your Cloudflare account/domain - it needs\nto be a wildcard record (e.g. *) and point to ze..com.\n\nExample#\n\nTYPE    NAME   CONTENT              PROXY STATUS   TTL\nCNAME   *      ze.zephyrcloud.app   Proxied        Auto\n\n\n2. Netlify Integration#\n\nYou must have a Netlify site project to use this integration.\n\na. Blob Storage#\n\nCheck if the following blob storage spaces are created on your Netlify site\nproject:\n\n * site:ze_snapshots\n * site:ze_files\n * site:ze_env\n\nb. Environment Variable#\n\nCheck if an environment variable named JWT_SECRET is created on your Netlify\nsite project.\n\nc. Function#\n\nCheck if a function named ze_worker_for_upload is created on your Netlify site\nproject.\n\nd. Edge Function#\n\nCheck if an edge function named ze_worker_for_serve is created on your Netlify\nsite project.\n\n\n3. Fastly Integration#\n\nComing soon.","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<h3 id=\"what-does-this-error-mean\">What does this error mean?<a aria-hidden=\"true\" href=\"#what-does-this-error-mean\">#</a></h3>\n<p>This error means that the application is not able to correctly connect to your Cloud provider.</p>\n<h2 id=\"debugging\">Debugging<a aria-hidden=\"true\" href=\"#debugging\">#</a></h2>\n<h3 id=\"1-cloudflare-integration\">1. Cloudflare Integration<a aria-hidden=\"true\" href=\"#1-cloudflare-integration\">#</a></h3>\n<h4 id=\"a-kv-namespaces\">a. KV Namespaces<a aria-hidden=\"true\" href=\"#a-kv-namespaces\">#</a></h4>\n<p>Check if the following namespaces are created on your Cloudflare account:</p>\n<ul>\n<li><code>ze_snapshots</code></li>\n<li><code>ze_files</code></li>\n<li><code>ze_env</code></li>\n</ul>\n<h4 id=\"b-workers\">b. Workers<a aria-hidden=\"true\" href=\"#b-workers\">#</a></h4>\n<p>Check if the following workers are created on your Cloudflare account:</p>\n<ul>\n<li><code>ze-worker-for-static-upload</code></li>\n</ul>\n<h4 id=\"c-worker-routes\">c. Worker Routes<a aria-hidden=\"true\" href=\"#c-worker-routes\">#</a></h4>\n<p>Check if the following worker routes are created on your Cloudflare account:</p>\n<ul>\n<li><code>ze.<domain.com>/*</code></li>\n<li><code>*-ze.<domain.com>/*</code></li>\n</ul>\n<h4 id=\"d-dns-records\">d. DNS Records<a aria-hidden=\"true\" href=\"#d-dns-records\">#</a></h4>\n<p>Check if a CNAME record is created on your Cloudflare account/domain - it needs to be a wildcard record (e.g. <code>*</code>) and point to <code>ze.<your-domain>.com</code>.</p>\n<h5 id=\"example\">Example<a aria-hidden=\"true\" href=\"#example\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Type</th>\n<th align=\"center\">Name</th>\n<th align=\"center\">Content</th>\n<th align=\"center\">Proxy Status</th>\n<th align=\"center\">TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">CNAME</td>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\"><code>ze.zephyrcloud.app</code></td>\n<td align=\"center\">Proxied</td>\n<td align=\"center\">Auto</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-netlify-integration\">2. Netlify Integration<a aria-hidden=\"true\" href=\"#2-netlify-integration\">#</a></h3>\n<p>You must have a Netlify site project to use this integration.</p>\n<h4 id=\"a-blob-storage\">a. Blob Storage<a aria-hidden=\"true\" href=\"#a-blob-storage\">#</a></h4>\n<p>Check if the following blob storage spaces are created on your Netlify site project:</p>\n<ul>\n<li><code>site:ze_snapshots</code></li>\n<li><code>site:ze_files</code></li>\n<li><code>site:ze_env</code></li>\n</ul>\n<h4 id=\"b-environment-variable\">b. Environment Variable<a aria-hidden=\"true\" href=\"#b-environment-variable\">#</a></h4>\n<p>Check if an environment variable named <code>JWT_SECRET</code> is created on your Netlify site project.</p>\n<h4 id=\"c-function\">c. Function<a aria-hidden=\"true\" href=\"#c-function\">#</a></h4>\n<p>Check if a function named <code>ze_worker_for_upload</code> is created on your Netlify site project.</p>\n<h4 id=\"d-edge-function\">d. Edge Function<a aria-hidden=\"true\" href=\"#d-edge-function\">#</a></h4>\n<p>Check if an edge function named <code>ze_worker_for_serve</code> is created on your Netlify site project.</p>\n<h3 id=\"3-fastly-integration\">3. Fastly Integration<a aria-hidden=\"true\" href=\"#3-fastly-integration\">#</a></h3>\n<p>Coming soon.</p>","routePath":"/errors/ze20020","lang":"en-US","toc":[{"text":"What does this error mean?","id":"what-does-this-error-mean","depth":3,"charIndex":3},{"text":"Debugging","id":"debugging","depth":2,"charIndex":129},{"text":"1. Cloudflare Integration","id":"1-cloudflare-integration","depth":3,"charIndex":142},{"text":"a. KV Namespaces","id":"a-kv-namespaces","depth":4,"charIndex":170},{"text":"b. Workers","id":"b-workers","depth":4,"charIndex":303},{"text":"c. Worker Routes","id":"c-worker-routes","depth":4,"charIndex":420},{"text":"d. DNS Records","id":"d-dns-records","depth":4,"charIndex":538},{"text":"2. Netlify Integration","id":"2-netlify-integration","depth":3,"charIndex":814},{"text":"a. Blob Storage","id":"a-blob-storage","depth":4,"charIndex":902},{"text":"b. Environment Variable","id":"b-environment-variable","depth":4,"charIndex":1060},{"text":"c. Function","id":"c-function","depth":4,"charIndex":1178},{"text":"d. Edge Function","id":"d-edge-function","depth":4,"charIndex":1281},{"text":"3. Fastly Integration","id":"3-fastly-integration","depth":3,"charIndex":1395}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20020.mdx","_relativePath":"errors/ze20020.mdx"},{"id":30,"title":"","content":"ZE20021\nCould not resolve application name with version.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20021","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20021.mdx","_relativePath":"errors/ze20021.mdx"},{"id":31,"title":"","content":"ZE20022\n`snapshot_id` not found.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20022","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20022.mdx","_relativePath":"errors/ze20022.mdx"},{"id":32,"title":"","content":"ZE20023\nSnapshot not found.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20023","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20023.mdx","_relativePath":"errors/ze20023.mdx"},{"id":33,"title":"","content":"ZE20024\nFailed to deploy local build.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20024","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20024.mdx","_relativePath":"errors/ze20024.mdx"},{"id":34,"title":"","content":"ZE20025\nWrangler dependency is needed for Cloudflare deployment. Please install dependencies without --no-optional flag.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20025","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20025.mdx","_relativePath":"errors/ze20025.mdx"},{"id":35,"title":"","content":"ZE20027\nError upload to cloudflare pages.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze20027","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze20027.mdx","_relativePath":"errors/ze20027.mdx"},{"id":36,"title":"","content":"ZE30026\nFailed to convert graph to dashboard data.\n\n\n#\n\nWARNING\n\nNot documented yet. Had a problem and need help?\n\nContact us in our discord!","_html":"<h1 id=\"\"><a aria-hidden=\"true\" href=\"#\">#</a></h1>\n\n\n<div><div>WARNING</div><div>\n<p>Not documented yet. Had a problem and need help?</p>\n<p>Contact us in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">discord</a>!</p>\n</div></div>","routePath":"/errors/ze30026","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/errors/ze30026.mdx","_relativePath":"errors/ze30026.mdx"},{"id":37,"title":"Create module federation app","content":"#\n\nDeveloped by Jack Herrington , co-author of the \"Practical Module Federation\"\nbook and technology-focused YouTuber.\n\ncreate-mf-app is a tool that creates a Module Federation application, API\nserver, or library based on one of multiple different templates.\n\n\nGenerating Application#\n\nThis guide provides a comprehensive walkthrough on how to use the create-mf-app\ntool to create a Module Federation application and integrate it with Zephyr.\n\nTo execute npm package binaries, use the npx command as follows:\n\n\n\nChoose a name for your application. Ensure you designate one host and at least\none remote, choosing names that reflect their roles accordingly.\n\n\n\nSelect the type of application:\n\n\n\nYou may use the default port option:\n\n\n\nWe conducted tests using React, but other frameworks may also be compatible. See\na list of supported framework here\n\n\n\nWe prefer TypeScript, but Zephyr is compatible with both TypeScript and\nJavaScript.\n\n\n\nBoth CSS and Tailwind are viable options for styling:\n\n\n\nWhile both packing options are viable, we strongly recommend Rspack for its\nperformance. See benchmark of Rspack.\n\n\n\n\nAdding Zephyr to Your Module Federation App#\n\nInstalling Zephyr plugin:\n\n\n\n\nZephyr Configuration Integration#\n\nIncorporate the Zephyr configuration into your existing setup by wrapping the\ncurrent configuration object with Zephyr's functionality. To use\nzephyr-webpack-plugin with Rspack, replace the original content in\nrspack.config.js with:\n\n\n\n\nZephyr Dependencies in package.json optional#\n\nFor example, consider the react-tractor-sample repository. It includes an\napplication called team-red, which depends on two other applications: team-green\nand team-blue.\n\nTo specify the version of each dependency, you can define zephyrDependencies in\nthe package.json file like this:\n\n\n\nIf you omit the zephyrDependencies configuration, the latest versions of the\nremote applications will be used by default.\n\n\nSetting a Git Origin#\n\n 1. Initialize the Git Repository:\n\nInitialize the Git repository to start tracking your project:\n\n\n\n 2. Stage Files for Commit:\n\nAdd all files to the staging area in preparation for the initial commit:\n\n\n\n 3. Create an Initial Commit:\n\nCommit the staged files to your repository with a descriptive message:\n\n\n\n 4. Set the Default Branch Name:\n\nDefine 'main' as the default branch for your repository:\n\n\n\n 5. Add a Remote Origin: Zephyr requires a Git origin to establish a unique\n    project, application, and version combination. Replace User and UserRepo\n    with your GitHub username and repository name (You can download Github CLI\n    here):\n\n 6. Push to GitHub (Optional):\n\nOptionally, you can push your code to GitHub to store your changes remotely:\n\n\n\nError Handling\n\nIf you encounter errors due to unset Git configurations, ensure you have set\nboth your Git user.name and user.email, and that you have a valid 'git remote\norigin' set up.\n\n\n\nIf this error show up - create a new repository and copy the link to that\nrepository, do:\n\n\n\n\nUsing Zephyr#\n\nZephyr operates as a side effect of the build process, allowing you to execute\nthe build in watch mode for continuous updates.\n\n\n\nINFO\n\nThe first time you initiate a build with Zephyr, it will prompt you to log in by\ndirecting you to the Zephyr website. This login is required only on your first\nbuild; subsequent builds will not require a login.\n\nWe may require you to log in again if you removed your Zephyr configuration file\n~/.zephyr locally.\n\n\nUnderstanding Build Outputs#\n\nDuring the build process, Zephyr related informations are displayed as follows:\n\n 1. Your user id.\n 2. Your application URL\n 3. Progress details and statistics from bundlers and us.\n 4. Deployed URL.\n\nTo understand how our URLs are structured, please refer to our versioning\ndocumentation.\n\n\nNext Steps#\n\nYou can now proceed to add remotes and start building your federated application\nas planned.\n\nFor insights on building micro-frontends with Rspack and Create MF App, Jack\noffers an informative video tutorial. We have also curated a resource page\nrelated to micro-frontend and module federation here.","_html":"<h1 id=\"create-a-module-federation-app\">Create a module federation app<a aria-hidden=\"true\" href=\"#create-a-module-federation-app\">#</a></h1>\n\n<p>Developed by <a href=\"https://twitter.com/jherr\" target=\"_blank\" rel=\"noopener noreferrer\">Jack Herrington</a> , co-author of the \"Practical Module Federation\" <a href=\"https://module-federation.myshopify.com/products/practical-module-federation\" target=\"_blank\" rel=\"noopener noreferrer\">book</a> and technology-focused <a href=\"https://www.youtube.com/@jherr\" target=\"_blank\" rel=\"noopener noreferrer\">YouTuber</a>.</p>\n<p><code>create-mf-app</code> is a tool that creates a Module Federation application, API server, or library based on one of multiple different templates.</p>\n<h2 id=\"generating-application\">Generating Application<a aria-hidden=\"true\" href=\"#generating-application\">#</a></h2>\n<p>This guide provides a comprehensive walkthrough on how to use the <code>create-mf-app</code> tool to create a Module Federation application and integrate it with Zephyr.</p>\n<p>To execute <code>npm</code> package binaries, use the <code>npx</code> command as follows:</p>\n<pre><code meta=\"\">npx create-mf-app\n</code></pre>\n<p>Choose a name for your application. Ensure you designate one host and at least one remote, choosing names that reflect their roles accordingly.</p>\n<pre><code meta=\"\">? Pick the name of your app: (host)\n</code></pre>\n<p>Select the type of application:</p>\n<pre><code meta=\"\">? Project Type: (Use arrow keys)\n❯ Application\n  API Server\n  Library\n</code></pre>\n<p>You may use the default port option:</p>\n<pre><code meta=\"\">? Port number: (8080)\n</code></pre>\n<p>We conducted tests using React, but other frameworks may also be compatible. See a list of supported framework <a href=\"/supported#supported-frameworks\">here</a></p>\n<pre><code meta=\"\">? Framework: (Use arrow keys)\nlit-html\npreact\n❯ react\nreact-esm\nsolid-js\nsvelte\nvanilla\n(Move up and down to reveal more choices)\n</code></pre>\n<p>We prefer TypeScript, but Zephyr is compatible with both TypeScript and JavaScript.</p>\n<pre><code meta=\"\">? Language:\n❯ typescript\njavascript\n</code></pre>\n<p>Both CSS and Tailwind are viable options for styling:</p>\n<pre><code meta=\"\">? CSS: (Use arrow keys)\n❯ CSS\nTailwind\n</code></pre>\n<p>While both packing options are viable, we strongly recommend <strong>Rspack</strong> for its performance. See <a href=\"https://www.rspack.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">benchmark of Rspack</a>.</p>\n<pre><code meta=\"\">? Bundler: (Use arrow keys)\nWebpack\n❯ Rspack\n</code></pre>\n<h2 id=\"adding-zephyr-to-your-module-federation-app\">Adding Zephyr to Your Module Federation App<a aria-hidden=\"true\" href=\"#adding-zephyr-to-your-module-federation-app\">#</a></h2>\n<p>Installing Zephyr plugin:</p>\n<pre><code meta=\"\">cd create-mf-app-rspack-host\nnpm install zephyr-webpack-plugin@latest --save\n</code></pre>\n<h3 id=\"zephyr-configuration-integration\">Zephyr Configuration Integration<a aria-hidden=\"true\" href=\"#zephyr-configuration-integration\">#</a></h3>\n<p>Incorporate the Zephyr configuration into your existing setup by wrapping the current configuration object with Zephyr's functionality. To use <strong>zephyr-webpack-plugin</strong> with Rspack, replace the original content in <code>rspack.config.js</code> with:</p>\n<pre><code meta=\"\">const rspack = require('@rspack/core')\nconst refreshPlugin = require('@rspack/plugin-react-refresh')\nconst isDev = process.env.NODE_ENV === 'development'\nconst path = require('path');\nconst { withZephyr } = require('zephyr-webpack-plugin')\n\nconst printCompilationMessage = require('./compilation.config.js');\n\n/**\n * @type {import('@rspack/cli').Configuration}\n */\nmodule.exports = withZephyr()({\n  context: __dirname,\n  entry: {\n    main: './src/index.ts',\n  },\n\n  devServer: {\n    port: 8080,\n    historyApiFallback: true,\n    watchFiles: [path.resolve(__dirname, 'src')],\n    onListening: function (devServer) {\n      const port = devServer.server.address().port\n\n      printCompilationMessage('compiling', port)\n\n      devServer.compiler.hooks.done.tap('OutputMessagePlugin', (stats) => {\n        setImmediate(() => {\n          if (stats.hasErrors()) {\n            printCompilationMessage('failure', port)\n          } else {\n            printCompilationMessage('success', port)\n          }\n        })\n      })\n    }\n  },\n\n  resolve: {\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json']\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/,\n        type: 'asset',\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          {\n            loader: 'postcss-loader',\n            options: {\n              postcssOptions: {\n                plugins: {\n                  tailwindcss: {},\n                  autoprefixer: {},\n                },\n              },\n            },\n          },\n        ],\n        type: 'css',\n      },\n      {\n        test: /\\.(jsx?|tsx?)$/,\n        use: [\n          {\n            loader: 'builtin:swc-loader',\n            options: {\n              sourceMap: true,\n              jsc: {\n                parser: {\n                  syntax: 'typescript',\n                  tsx: true,\n                },\n                transform: {\n                  react: {\n                    runtime: 'automatic',\n                    development: isDev,\n                    refresh: isDev,\n                  },\n                },\n              },\n              env: {\n                targets: [\n                  'chrome >= 87',\n                  'edge >= 88',\n                  'firefox >= 78',\n                  'safari >= 14',\n                ],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new rspack.container.ModuleFederationPlugin({\n      name: 'create_mf_app_host',\n      filename: 'remoteEntry.js',\n      exposes: {},\n      shared: {\n        react: { eager: true },\n        'react-dom': { eager: true },\n        'react-router-dom': { eager: true },\n      },\n    }),\n    new rspack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    }),\n    new rspack.ProgressPlugin({}),\n    new rspack.HtmlRspackPlugin({\n      template: './src/index.html',\n    }),\n    isDev ? new refreshPlugin() : null,\n  ].filter(Boolean),\n})\n\n</code></pre>\n<h3 id=\"zephyr-dependencies-in-packagejson-optional\">Zephyr Dependencies in package.json optional<a aria-hidden=\"true\" href=\"#zephyr-dependencies-in-packagejson-optional\">#</a></h3>\n<p>For example, consider the <a href=\"https://github.com/ZephyrCloudIO/zephyr-examples/tree/main/examples/react-tractor-sample\" target=\"_blank\" rel=\"noopener noreferrer\">react-tractor-sample</a> repository. It includes an application called team-red, which depends on two other applications: team-green and team-blue.</p>\n<p>To specify the version of each dependency, you can define zephyrDependencies in the package.json file like this:</p>\n<pre><code meta=\"\">{\n  \"name\": \"team-red\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"build\": \"nx run team-red:build --skip-nx-cache\"\n  },\n  \"private\": true,\n  \"zephyrDependencies\": {\n    \"team-blue\": \"0.1.0\",\n    \"team-green\": \"0.1.0\"\n  }\n}\n</code></pre>\n<p>If you omit the zephyrDependencies configuration, the latest versions of the remote applications will be used by default.</p>\n<h3 id=\"setting-a-git-origin\">Setting a Git Origin<a aria-hidden=\"true\" href=\"#setting-a-git-origin\">#</a></h3>\n<ol>\n<li><strong>Initialize the Git Repository:</strong></li>\n</ol>\n<p>Initialize the Git repository to start tracking your project:</p>\n<pre><code meta=\"\">git init\n</code></pre>\n<ol start=\"2\">\n<li><strong>Stage Files for Commit:</strong></li>\n</ol>\n<p>Add all files to the staging area in preparation for the initial commit:</p>\n<pre><code meta=\"\">git add .\n</code></pre>\n<ol start=\"3\">\n<li><strong>Create an Initial Commit:</strong></li>\n</ol>\n<p>Commit the staged files to your repository with a descriptive message:</p>\n<pre><code meta=\"\">git commit -m \"Initial commit with Zephyr\"\n</code></pre>\n<ol start=\"4\">\n<li><strong>Set the Default Branch Name:</strong></li>\n</ol>\n<p>Define 'main' as the default branch for your repository:</p>\n<pre><code meta=\"\">git branch -M main\n</code></pre>\n<ol start=\"5\">\n<li><strong>Add a Remote Origin:</strong>\nZephyr requires a Git origin to establish a unique project, application, and version combination. Replace <code>User</code> and <code>UserRepo</code> with your GitHub username and repository name (You can download Github CLI <a href=\"https://cli.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>):</li>\n</ol>\n\n<ol start=\"6\">\n<li><strong>Push to GitHub (Optional):</strong></li>\n</ol>\n<p>Optionally, you can push your code to GitHub to store your changes remotely:</p>\n<pre><code meta=\"\">git push -u origin main\n</code></pre>\n<div><div>Error Handling</div><div>\n<p>If you encounter errors due to unset Git configurations, ensure you have set both your Git <code>user.name</code> and <code>user.email</code>, and that you have a valid 'git remote origin' set up.</p>\n<pre><code>[ConfigurationError: [zephyr]: git is not configured properly\n\n    - please set git user.name and user.email\n\n    - please set valid 'git remote origin'\n\n]\n</code></pre>\n<p>If this error show up - create a new repository and copy the link to that repository, do:</p>\n<pre><code meta=\"\">git remote add origin git@github.com:User/UserRepo.git\n</code></pre>\n</div></div>\n<h2 id=\"using-zephyr\">Using Zephyr<a aria-hidden=\"true\" href=\"#using-zephyr\">#</a></h2>\n<p>Zephyr operates as a side effect of the build process, allowing you to execute the build in watch mode for continuous updates.</p>\n<pre><code meta=\"\">npm run build --watch\n</code></pre>\n<div><div>INFO</div><div><p>The first time you initiate a build with Zephyr, it will prompt you to log in by directing you to the Zephyr website. This login is required only on your first build; subsequent builds will not require a login.</p>\n<p>We may require you to log in again if you removed your Zephyr configuration file <code>~/.zephyr</code> locally.</p>\n</div></div>\n<h3 id=\"understanding-build-outputs\">Understanding Build Outputs<a aria-hidden=\"true\" href=\"#understanding-build-outputs\">#</a></h3>\n<p>During the build process, Zephyr related informations are displayed as follows:</p>\n<ol>\n<li>Your user id.</li>\n<li>Your application URL</li>\n<li>Progress details and statistics from bundlers and us.</li>\n<li>Deployed URL.</li>\n</ol>\n<p>To understand how our URLs are structured, please refer to our <a href=\"/how-to/versioning-tags\">versioning documentation</a>.</p>\n\n<h2 id=\"next-steps\">Next Steps<a aria-hidden=\"true\" href=\"#next-steps\">#</a></h2>\n<p>You can now proceed to add remotes and start building your federated application as planned.</p>\n<p>For insights on building micro-frontends with Rspack and Create MF App, Jack offers an informative <a href=\"https://www.youtube.com/watch?v=32_EikGKESk\" target=\"_blank\" rel=\"noopener noreferrer\">video tutorial</a>. We have also curated a resource page related to micro-frontend and module federation <a href=\"/learning/resources\">here</a>.</p>","routePath":"/general/create-mf-app","lang":"en-US","toc":[{"text":"Generating Application","id":"generating-application","depth":2,"charIndex":260},{"text":"Adding Zephyr to Your Module Federation App","id":"adding-zephyr-to-your-module-federation-app","depth":2,"charIndex":1114},{"text":"Zephyr Configuration Integration","id":"zephyr-configuration-integration","depth":3,"charIndex":1190},{"text":"Zephyr Dependencies in package.json optional","id":"zephyr-dependencies-in-packagejson-optional","depth":3,"charIndex":1462},{"text":"Setting a Git Origin","id":"setting-a-git-origin","depth":3,"charIndex":1920},{"text":"Using Zephyr","id":"using-zephyr","depth":2,"charIndex":2988},{"text":"Understanding Build Outputs","id":"understanding-build-outputs","depth":3,"charIndex":3453},{"text":"Next Steps","id":"next-steps","depth":2,"charIndex":3775}],"domain":"","frontmatter":{"title":"Create module federation app","description":"Zephyr Cloud Documentation - Creating a basic module federation app and deploy it through Zephyr."},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/general/create-mf-app.mdx","_relativePath":"general/create-mf-app.mdx"},{"id":38,"title":"Get started","content":"#\n\n\nWhat do you want to start with?#\n\n\nStart from scratch#\n\nIn this section we will walk you through what you will need to start using\nZephyr and enjoy its benefits by deploying an application through Zephyr and\nmodifying configuration. We will start with installing and creating your\naccount, then create a standalone React app. At the end of this guide, you will\nhave your first React app deployed to Zephyr's managed cloud with Rspack as\nbundler and use our version control feature to preview all versions that's\ndeployed.\n\nIf you are curious to read more about us, you can dive into our architecture,\nrecipes (for more frameworks and bundlers) and features. Below guide is written\nbased on Google Chrome thus other browser's behavior might differ (see a list of\nsupported browsers)\n\n\nSetup#\n\nKnown issue on Managed Cloud VS. Cloud Provider\n\nBecause of Cloudflare Caching, the time to propagate deployed assets (for\ndeployment to be visible) might take from within one minute to an hour and the\ntiming is non-deterministic.\n\nThis is a known issue we are still investigating and seeking for improvements.\n\nIssue might be happening to:\n\n * Our managed cloud (Cloudflare)\n * Customer's custom deployment provider if customers are using Cloudflare.\n\nIf you are following the get started guide without custom deployment provider\nyou will be using our managed cloud.\n\nRead more about how to configure Cloudflare and how to configure Netlify as your\ndefault cloud provider.\n\n1. Create a react app#\n\nPrerequisites\n * pnpm >= 8\n * node >=20\n * A registered account on Zephyr Cloud\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\nOnce the prerequisites are fulfilled, we can start scaffolding our application\nin the terminal:\n\n\n\nTIP\n\nIf you are using our managed cloud (Cloudflare) or custom deployment integration\nthrough Cloudflare, when you are adding assets, naming your application in\npackage.json or module federation configuration, make sure the name doesn't\ninclude capital letter to avoid query problem with Cloudflare.\n\nThe creation process will ask you for project folder name and project template,\nwe will be choosing react in this example:\n\n\n\nPress , enter the project directory:\n\n\n\nFollow the console output to open the app in browser running on localhost.\n\n2. Adding Zephyr#\n\nOpen the project folder we created with code editor of your choice. Within\ncurrent working directory, install Zephyr's plugin by running:\n\n\n\nAfter install the plugin, open the file rspack.config.ts in project root and\nreplace the original configuration as below:\n\n\n\n3. Git configuration#\n\nThe next step is configure the git configuration for your project.\n\nWhy do you need this step\n\nBehind the scene, we map your git configuration to Zephyr (remote origin url,\norganization or username, repository name and branch) to deploy your\napplication. Without this step your deployment will fail.\n\n * 1. Create a new repository on Github\n\nClick here to create a new repository named rspack-project on Github. Choosing\neither Private or Public won't affect our deployment. And then click on Create\nrepository.\n\n * 2. Configure remote origin url\n\nOn the next page where your repository has been created on Github, copy paste\nthe command lines under ...or create a new repository on the command line and\nexecute them in terminal within the project.\n\n4. First build and deploy#\n\nAfter we finished configuring the project, within your terminal run:\n\n\n\nIf you haven't register an account with us, or you haven't sign in for a while,\nyour default browser will pop up and prompt you to sign up to our dashboard. If\nyou already have an account or signed in recently, the browser will notify that\nyou already signed in.\n\nWithin the terminal you should see your deployed URL. Press and click on the URL\nat the same time to open your deployed URL in your default browser.\n\nINFO\n\nNote that this URL will live as long you don't delete your account and you can\nshare it with anyone to preview it. We will discuss how and where you can find\nyour deployed URL within our platform next.\n\n\nChrome Extension#\n\nYou can check the application you just deployed in our chrome extension and you\ncan preview every version of the application you deploy.\n\nHead to Chrome Web Store to install our chrome extension - Zephyr Mission\nControl. Click on Add to Chrome and confirm with Add extension. After you finish\nremember to pin the extension by clicking on on extension management tab to\nprovide you a quicker access to Zephyr's side panel.\n\nOnce you click on the side panel will pop up and prompt you to log in. You might\nneed to right click on the extension and choose Open Side Panel if you are using\nit for the first time.\n\nWhat happens when you log in?\n\nWhile we are loggin you in, we are storing your authorization information\nlocally under ~/.zephyr in your root directly. Whenever you want to clean up\nyour local profile information (they are JWT claims for each of the project you\ndeployed through Zephyr), you can enter your root directory in terminal and run:\n\n\n\nOpen your side panel by clicking on . Note that this URL is alive as long you\ndon't delete your account and you can share it with anyone to preview it.\n\nEvery application you have deployed on Zephyr (under the same account) will be\ndisplayed under Name, categorized by repository name and their package name.\nClick on the dropdown menu under Version you will see the versions of your app.\nItems under Tags denotate the tag rules of this application, both auto generated\nby us or set up by you.\n\n5. Deploy a new version#\n\nNow you have deployed the first version, let's add modify the app and deploy a\nnew version. Open the file src/App.jsx to change the content of your website:\n\n\n\nNext in your terminal run:\n\n\n\nThe console output will return the latest deployed URL. On Chrome\nChromeExtension, the latest deployed version will be under Version dropdown in\nas the first option. You should see the app's heading is changed to Rspack +\nReact + Zephyr\n\nNow the latest version of your app is deployed. You can check the source code\ntill this stage here:\n\nVersion name\n\nThe names of your versions are generated by Zephyr. The first part of the name\nis the branch name, serialised version of your email, followed by the version\nnumber.\n\n6. Using Chrome Extension#\n\nOnce you have deployed a new version of your application, the latest deployed\nversion will show up in browser as soon as you select it under Name.\n\nINFO\n\nOur chrome extension is only supported on Chromium based browsers. See a list of\nsupported browser.\n\n7. Dashboard#\n\nIf you want to see all your projects and their versions, sign in on dashboard\nand you will see all your projects and their dependencies.\n\nMore detailed explaination on how to use our dashboard is coming soon.","_html":"<h1 id=\"get-started\">Get started<a aria-hidden=\"true\" href=\"#get-started\">#</a></h1>\n<h2 id=\"what-do-you-want-to-start-with\">What do you want to start with?<a aria-hidden=\"true\" href=\"#what-do-you-want-to-start-with\">#</a></h2>\n\n<h2 id=\"start-from-scratch\">Start from scratch<a aria-hidden=\"true\" href=\"#start-from-scratch\">#</a></h2>\n<p>In this section we will walk you through what you will need to start using Zephyr and enjoy its benefits by deploying an application through Zephyr and modifying configuration. We will start with installing and creating your account, then create a standalone React app. At the end of this guide, you will have your first <a href=\"https://react.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> app deployed to Zephyr's managed cloud with <a href=\"https://rspress.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Rspack</a> as bundler and use our <a href=\"/how-to/versioning-tags\">version control</a> feature to preview all versions that's deployed.</p>\n<p>If you are curious to read more about us, you can dive into our <a href=\"/learning/concepts/architecture\">architecture</a>, <a href=\"/recipes\">recipes</a> (for more frameworks and bundlers) and <a href=\"/usage\">features</a>. Below guide is written based on Google Chrome thus other browser's behavior might differ (see a list of <a href=\"/supported#supported-browsers\">supported browsers</a>)</p>\n\n<h3 id=\"setup\">Setup<a aria-hidden=\"true\" href=\"#setup\">#</a></h3>\n<div><div>Known issue on Managed Cloud VS. Cloud Provider</div><div>\n<p>Because of Cloudflare Caching, the time to propagate deployed assets (for deployment to be visible) might take from within one minute to an hour and the timing is non-deterministic.</p>\n<p>This is a known issue we are still investigating and seeking for improvements.</p>\n<p>Issue might be happening to:</p>\n<ul>\n<li>Our managed cloud (<strong>Cloudflare</strong>)</li>\n<li>Customer's custom deployment provider if customers are using Cloudflare.</li>\n</ul>\n<p>If you are following the get started guide without custom deployment provider you will be using our managed cloud.</p>\n<p>Read more about <a href=\"/cloud/cloudflare\">how to configure Cloudflare</a> and <a href=\"/cloud/netlify\">how to configure Netlify</a> as your default cloud provider.</p>\n</div></div>\n<h4 id=\"1-create-a-react-app\">1. Create a react app<a aria-hidden=\"true\" href=\"#1-create-a-react-app\">#</a></h4>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>pnpm >= 8</li>\n<li>node >=20</li>\n<li>A registered account on <a href=\"https://zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a></li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<p>Once the prerequisites are fulfilled, we can start scaffolding our application in the terminal:</p>\n<pre><code meta=\"\">pnpm create rspack@latest\n</code></pre>\n<div><div>TIP</div><div>\n<p>If you are using our managed cloud (Cloudflare) or custom deployment integration through Cloudflare, when you are adding assets, naming your application in <code>package.json</code> or module federation configuration, make sure the name <strong>doesn't include capital letter</strong> to avoid query problem with Cloudflare.</p>\n</div></div>\n<p>The creation process will ask you for <strong>project folder name</strong> and <strong>project template</strong>, we will be choosing <code>react</code> in this example:</p>\n<pre><code meta=\"\">.../Library/pnpm/store/v3/tmp/dlx-74427  |  +20 ++\n.../Library/pnpm/store/v3/tmp/dlx-74427  | Progress: resolved 20, reused 20, downloaded 0, added 20, done\n✔ Project folder … rspack-project\n? Project template › - Use arrow-keys. Return to submit.\n❯    react\n    react-ts\n    vue\n    vue-ts\n</code></pre>\n<p>Press , enter the project directory:</p>\n<pre><code meta=\"\">cd rspack-project\npnpm i \n</code></pre>\n<p>Follow the console output to open the app in browser running on localhost.</p>\n\n<h4 id=\"2-adding-zephyr\">2. Adding Zephyr<a aria-hidden=\"true\" href=\"#2-adding-zephyr\">#</a></h4>\n<p>Open the project folder we created with code editor of your choice. Within current working directory, install Zephyr's plugin by running:</p>\n<pre><code meta=\"\">pnpm add zephyr-webpack-plugin@latest\n</code></pre>\n<p>After install the plugin, open the file <code>rspack.config.ts</code> in project root and replace the original configuration as below:</p>\n<pre><code meta=\"\">\n\n\n\n\nconst isDev = process.env.NODE_ENV === 'development';\n\n// Target browsers, see: https://github.com/browserslist/browserslist\nconst targets = ['chrome >= 87', 'edge >= 88', 'firefox >= 78', 'safari >= 14'];\n\nexport default withZephyr()({\n  context: __dirname,\n  entry: {\n    main: './src/main.tsx',\n  },\n  resolve: {\n    extensions: ['...', '.ts', '.tsx', '.jsx'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/,\n        type: 'asset',\n      },\n      {\n        test: /\\.(jsx?|tsx?)$/,\n        use: [\n          {\n            loader: 'builtin:swc-loader',\n            options: {\n              jsc: {\n                parser: {\n                  syntax: 'typescript',\n                  tsx: true,\n                },\n                transform: {\n                  react: {\n                    runtime: 'automatic',\n                    development: isDev,\n                    refresh: isDev,\n                  },\n                },\n              },\n              env: { targets },\n            },\n          },\n        ],\n      },\n    ],\n  },\n  // @ts-expect-error Below are non-blocking error and we are working on improving them\n  plugins: [\n    new rspack.HtmlRspackPlugin({\n      template: './index.html',\n    }),\n    isDev ? new RefreshPlugin() : null,\n  ].filter(Boolean),\n  optimization: {\n    minimizer: [\n      // @ts-expect-error\n      new rspack.SwcJsMinimizerRspackPlugin(),\n      // @ts-expect-error\n      new rspack.LightningCssMinimizerRspackPlugin({\n        minimizerOptions: { targets },\n      }),\n    ],\n  },\n  experiments: {\n    css: true,\n  },\n});\n\n\n</code></pre>\n\n<h4 id=\"3-git-configuration\">3. Git configuration<a aria-hidden=\"true\" href=\"#3-git-configuration\">#</a></h4>\n<p>The next step is configure the git configuration for your project.</p>\n<details><summary>Why do you need this step</summary><div><p>Behind the scene, we map your git configuration to Zephyr (remote origin url, organization or username, repository name and branch) to deploy your application. Without this step your deployment will fail.</p></div></details>\n<ul>\n<li><strong>1. Create a new repository on Github</strong></li>\n</ul>\n<p><a href=\"https://github.com/new?name=rspack-project\" target=\"_blank\" rel=\"noopener noreferrer\">Click here</a> to create a new repository named <strong>rspack-project</strong> on Github. Choosing either <strong>Private</strong> or <strong>Public</strong> won't affect our deployment. And then click on <strong>Create repository</strong>.</p>\n<ul>\n<li><strong>2. Configure remote origin url</strong></li>\n</ul>\n<p>On the next page where your repository has been created on Github, copy paste the command lines under <strong>...or create a new repository on the command line</strong> and execute them in terminal within the project.</p>\n\n<h4 id=\"4-first-build-and-deploy\">4. First build and deploy<a aria-hidden=\"true\" href=\"#4-first-build-and-deploy\">#</a></h4>\n<p>After we finished configuring the project, within your terminal run:</p>\n<pre><code meta=\"\">pnpm run build\n</code></pre>\n<p>If you haven't register an account with us, or you haven't sign in for a while, your default browser will pop up and prompt you to sign up to our dashboard. If you already have an account or signed in recently, the browser will notify that you already signed in.</p>\n<p>Within the terminal you should see your deployed URL. Press  and click on the URL at the same time to open your deployed URL in your default browser.</p>\n<div><div>INFO</div><div><p>Note that this URL will live as long you don't delete your account and you can share it with anyone to preview it. We will discuss how and where you can find your deployed URL within our platform next.</p></div></div>\n\n<h3 id=\"chrome-extension\">Chrome Extension<a aria-hidden=\"true\" href=\"#chrome-extension\">#</a></h3>\n<p>You can check the application you just deployed in our chrome extension and you can preview <strong>every version of the application</strong> you deploy.</p>\n<p>Head to Chrome Web Store to install our chrome extension - <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Mission Control</a>. Click on <strong>Add to Chrome</strong> and confirm with <strong>Add extension</strong>. After you finish remember to <strong>pin</strong> the extension by clicking on  on extension management tab to provide you a quicker access to Zephyr's side panel.</p>\n<p>Once you click on  the side panel will pop up and prompt you to log in. You might need to right click on the extension and choose <strong>Open Side Panel</strong> if you are using it for the first time.</p>\n<details><summary>What happens when you log in?</summary><div>\n<p>While we are loggin you in, we are storing your authorization information locally under <code>~/.zephyr</code> in your root directly. Whenever you want to clean up your local profile information (they are JWT claims for each of the project you deployed through Zephyr), you can enter your root directory in terminal and run:</p>\n<pre><code>rm rf ~/.zephyr \n</code></pre>\n</div></details>\n<p><strong>Open your side panel</strong> by clicking on . Note that this URL is alive as long you don't delete your account and you can share it with anyone to preview it.</p>\n<p>Every application you have deployed on Zephyr (under the same account) will be displayed under <strong>Name</strong>, categorized by repository name and their package name. Click on the dropdown menu under <strong>Version</strong> you will see the versions of your app. Items under <strong>Tags</strong> denotate the tag rules of this application, both auto generated by us or set up by you.</p>\n\n<h4 id=\"5-deploy-a-new-version\">5. Deploy a new version<a aria-hidden=\"true\" href=\"#5-deploy-a-new-version\">#</a></h4>\n<p>Now you have deployed the first version, let's add modify the app and deploy a new version. Open the file <code>src/App.jsx</code> to change the content of your website:</p>\n<pre><code meta=\"\">\n\n\n\nimport \"./App.css\";\n\nfunction App() {\n\tconst [count, setCount] = useState(0);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div>\n\t\t\t\t<a href=\"https://reactjs.org\" target=\"_blank\" rel=\"noreferrer\">\n\t\t\t\t\t<img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<h1>Rspack + React + Zephyr</h1>\n\t\t\t<div className=\"card\">\n\t\t\t\t<button onClick={() => setCount(count => count + 1)}>\n\t\t\t\t\tcount is {count}\n\t\t\t\t</button>\n\t\t\t\t<p>\n\t\t\t\t\tEdit <code>src/App.jsx</code> and save to test HMR\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p className=\"read-the-docs\">\n\t\t\t\tClick on the Rspack and React logos to learn more\n\t\t\t</p>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n</code></pre>\n<p>Next in your terminal run:</p>\n<pre><code meta=\"\">pnpm run build\n</code></pre>\n<p>The console output will return the latest deployed URL. On Chrome ChromeExtension, the latest deployed version will be under <strong>Version</strong> dropdown in as the first option. You should see the app's heading is changed to <code>Rspack + React + Zephyr</code></p>\n<p>Now the latest version of your app is deployed. You can check the source code till this stage here: </p>\n<details><summary>Version name</summary><div><p>\nThe names of your versions are generated by Zephyr. The first part of the name is the branch name, serialised version of your email, followed by the version number.\n</p></div></details>\n<h4 id=\"6-using-chrome-extension\">6. Using Chrome Extension<a aria-hidden=\"true\" href=\"#6-using-chrome-extension\">#</a></h4>\n<p>Once you have deployed a new version of your application, the latest deployed version will show up in browser as soon as you select it under <code>Name</code>.</p>\n<div><div>INFO</div><div><p>Our chrome extension is only supported on Chromium based browsers. See a list of <a href=\"/supported#browser-support\">supported browser</a>.\n</p></div></div>\n<h4 id=\"7-dashboard\">7. Dashboard<a aria-hidden=\"true\" href=\"#7-dashboard\">#</a></h4>\n<p>If you want to see all your projects and their versions, sign in on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">dashboard</a> and you will see all your projects and their dependencies.</p>\n<p>More detailed explaination on how to use our dashboard is coming soon.</p>","routePath":"/general/get-started","lang":"en-US","toc":[{"text":"What do you want to start with?","id":"what-do-you-want-to-start-with","depth":2,"charIndex":3},{"text":"Start from scratch","id":"start-from-scratch","depth":2,"charIndex":38},{"text":"Setup","id":"setup","depth":3,"charIndex":787},{"text":"1. Create a react app","id":"1-create-a-react-app","depth":4,"charIndex":1470},{"text":"2. Adding Zephyr","id":"2-adding-zephyr","depth":4,"charIndex":2321},{"text":"3. Git configuration","id":"3-git-configuration","depth":4,"charIndex":2606},{"text":"4. First build and deploy","id":"4-first-build-and-deploy","depth":4,"charIndex":3379},{"text":"Chrome Extension","id":"chrome-extension","depth":3,"charIndex":4103},{"text":"5. Deploy a new version","id":"5-deploy-a-new-version","depth":4,"charIndex":5572},{"text":"6. Using Chrome Extension","id":"6-using-chrome-extension","depth":4,"charIndex":6307},{"text":"7. Dashboard","id":"7-dashboard","depth":4,"charIndex":6590}],"domain":"","frontmatter":{"0":{"title":"Get Started"},"1":{"description":"How to start using Zephyr to gain maximum benefits"}},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/general/get-started.mdx","_relativePath":"general/get-started.mdx"},{"id":39,"title":"Zephyr Cloud - Common Questions","content":"How does Zephyr speed up development?\n\nWe integrate with bundlers or build tools like Webpack, Rspack and Vite to\nbecome a side-effect of your build process to help you with deployment. You can\ncheck our Get started guide to find out more about how it works.\n\nDo I need to have Micro-Frontend applications to use Zephyr?\n\nNo! You can deploy a standalone application without any micro-frontends\nimplementation. You can see an example documented here on how to use Zephyr with\nReact, Rspack and Nx.\n\nWould your npm plugins affect build?\n\nWe only have actions during two phases of a build process: one is before the\nbuild starts, the other one is after the build finish. So we won't affect the\nbuild process. You can see more about how we manage the deployment and build\nprocess in our architecture guide.\n\nCan I use my own cloud provider with Zephyr Cloud?\n\nYes. You can integrate Zephyr with your existing Cloud provider. Currently we\nsupport Cloudflare and Netlify. We are in the process of adding AWS, Azure and\nmore. You can see a list of supported cloud provider here. If you don't see your\ncloud provider, or you have specific CI requirement, remember to jump in our\nDiscord server to let us know!\n\nHow do I connect custom cloud providers with Zephyr?\n\nYou can start with this guide Managing Cloud Providers to find out more and\nchoose a Cloud provider to start with. If you run into any problems, welcome to\njump into our Discord Server and we will help you out. 😊\n\nHow does Zephyr help with Micro-Frontends?\n\nMicro-Frontends are known to be complicated to deploy and configure. While we\nintegrate with your current build tools or bundlers, we are also analyzing your\nremote modules, resolving your remote applications in runtime, and making sure\nyour remote applications and host applications (aka shells) are correctly\ncomposed in the browser (if you have implemented Micro-Frontend configuration of\ncourse) -- essentially automate and simplify your deployment process. See a\ncomplete checklist of how to deploy Micro-Frontends applications on Zephyr.\n\nWhat happens when I log in after running build commands?\n\nWhile we are loggin you in, we are storing your authorization information\nlocally under ~/.zephyr in your root directly. Whenever you want to clean up\nyour local profile information (they are JWT claims for each of the project you\ndeployed through Zephyr), you can enter your root directory in terminal and run:\n\n\n\nWhat's the difference between Module Federation 1.0 and Module Federation 2.0?\n\nModule Federation 1.0 is highly focused on Micro-Frontend implementation in\nWebpack and it sits within Webpack's core repository. Module Federation 2.0 is\nseparated from Webpack repository, offers more extensive capability with dynamic\nimport types, Federation Runtime, Runtime Plugin Systems and more. All of these\nnew capabilities aids support for large scale applications in enterprise. You\ncan read more in the Official Guide of Module Federation. You may also refer to\na section in our documentation.","_html":"<details><summary>How does Zephyr speed up development?</summary><div>\n<p>We integrate with bundlers or build tools like Webpack, Rspack and Vite to become a side-effect of your build process to help you with deployment. You can check our <a href=\"/general/get-started\">Get started guide</a> to find out more about how it works.</p>\n</div></details>\n<details><summary>Do I need to have Micro-Frontend applications to use Zephyr?</summary><div><p>\nNo! You can deploy a standalone application without any micro-frontends implementation. You can see an example documented here on how to use Zephyr with <a href=\"/recipes/react-rspack-nx\">React, Rspack and Nx</a>.</p>\n</div></details>\n<details><summary>Would your npm plugins affect build?</summary><div>\n<p>We only have actions during two phases of a build process: one is before the build starts, the other one is after the build finish. So we won't affect the build process. You can see more about how we manage the deployment and build process in our <a href=\"/learning/concepts/architecture\">architecture guide</a>.</p>\n</div></details>\n<details><summary>Can I use my own cloud provider with Zephyr Cloud?</summary><div>\n<p>Yes. You can integrate Zephyr with your existing Cloud provider. Currently we support Cloudflare and Netlify. We are in the process of adding AWS, Azure and more.\nYou can see a <a href=\"/supported#supported-cloud-providers\">list of supported cloud provider</a> here. If you don't see your cloud provider, or you have specific CI requirement, remember to jump in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a> server to let us know!</p>\n</div></details>\n<details><summary>How do I connect custom cloud providers with Zephyr?</summary><div>\n<p>You can start with this guide <a href=\"/cloud\">Managing Cloud Providers</a> to find out more and choose a Cloud provider to start with. If you run into any problems, welcome to jump into our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">Discord Server</a> and we will help you out. 😊</p>\n</div></details>\n<details><summary>How does Zephyr help with Micro-Frontends?</summary><div>\n<p>Micro-Frontends are known to be complicated to deploy and configure. While we integrate with your current build tools or bundlers, we are also analyzing your remote modules, resolving your remote applications in runtime, and making sure your remote applications and host applications (aka shells) are correctly composed in the browser (if you have implemented Micro-Frontend configuration of course) -- essentially automate and simplify your deployment process. <a href=\"/how-to/mf-guide\">See a complete checklist of how to deploy Micro-Frontends applications on Zephyr</a>.</p>\n</div></details>\n<details><summary>What happens when I log in after running build commands?</summary><div>\n<p>While we are loggin you in, we are storing your authorization information locally under <code>~/.zephyr</code> in your root directly. Whenever you want to clean up your local profile information (they are JWT claims for each of the project you deployed through Zephyr), you can enter your root directory in terminal and run:</p>\n<pre><code>rm rf ~/.zephyr\n</code></pre>\n</div></details>\n<details><summary>What's the difference between Module Federation 1.0 and Module Federation 2.0?</summary><div>\n<p>Module Federation 1.0 is highly focused on Micro-Frontend implementation in Webpack and it sits within Webpack's core repository. Module Federation 2.0 is separated from Webpack repository, offers more extensive capability with dynamic import types, Federation Runtime, Runtime Plugin Systems and more. All of these new capabilities aids support for large scale applications in enterprise. You can read more in the <a href=\"https://module-federation.io/guide/start/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Official Guide of Module Federation</a>. You may also refer to a <a href=\"/learning/concepts/module-federation#mf-10-vs-mf-20\">section</a> in our documentation.</p>\n</div></details>","routePath":"/general/question","lang":"en-US","toc":[],"domain":"","frontmatter":{"title":"Zephyr Cloud - Common Questions","description":"Zephyr Cloud Documentation - Common questions"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/general/question.mdx","_relativePath":"general/question.mdx"},{"id":40,"title":"Why Zephyr Cloud","content":"#\n\nZephyr Cloud enhances and accelerates the software development lifecycle (SDLC)\nand we are purpose-built for Micro-Frontends.\n\n\nPurpose-built for Micro-Frontend#\n\nWe developed Zephyr Cloud in response to recurring questions from our customers\nabout the complexity and difficulties while deploying federated applications.\nZephyr represents our second attempt at addressing these challenges, following\nour initial platform, Medusa.\n\nMicro-Frontend is complicated; even the best DevOps in the industry could quote\nMicro-Frontend as insanity; the majority of deployment platforms don't have out\nof the box support for Micro-Frontend and require a lot of custom support.\n\nTo deploy a Micro-Frontend application with Zephyr, you only need to run a build\n(or have it run in the CI). The answer to \"how to configure and deploy\nMicro-Frontend\" lives in your code - it's Terraform but in the shape of\npre-existing bundler configuration. Zephyr will figure out your output bundle\nfor applications in the browser to fetch remote applications, and helping\nremotes, hosts applications to communicate correctly.\n\n\nVersions and Rollback#\n\nWith large scale enterprises, frontend applications are often written in\ndifferent frameworks, split across different teams. When a Micro-Frontend\napplicaiton is deployed (say a remote application getting updated into a host\napp), sometimes it doesn't fit requirements, or it breaks other parts of the\napplication.\n\nOur customers have urgent needs to rollback immediately in such situations.\nWaiting for CI to run and redploy costs time and business value. Unless\ncustomers have serveral containers running the same application for versioning -\nor have a Kubernetes Cluster to recover from it - it's almost impossible to\nrollback and have versions for an application.\n\nHowever, each application deployed throught Zephyr, whether it is a standalone\napplication, remote components, or host applications in Micro-Frontends, is\nversioned. You can rollback immediately from dashboard, from our our Chrome\nExtension.\n\n\nPublic Beta#\n\nZephyr Cloud is currently in public beta stage. As you evaluate Zephyr Cloud\nplease do not hesitate to reach out to us on Discord and provide your feedback.\n\n\nHow Zephyr Enhances Your Operations#\n\nYou can use Zephyr to:\n\n * Deploy more rapidly, more frequently\n * Manage version control for your frontend\n * Rollback or rollforward after component testing and evaluation\n * Increase visibility into the connectivity of your micro-frontends\n * Manage Micro-Frontend consuming application (remote) versions in package.json\n   with zephyrDependencies option.","_html":"<h1 id=\"why-zephyr-cloud\">Why Zephyr Cloud<a aria-hidden=\"true\" href=\"#why-zephyr-cloud\">#</a></h1>\n<p>Zephyr Cloud enhances and accelerates the software development lifecycle (SDLC) and we are purpose-built for Micro-Frontends.</p>\n<h2 id=\"purpose-built-for-micro-frontend\">Purpose-built for Micro-Frontend<a aria-hidden=\"true\" href=\"#purpose-built-for-micro-frontend\">#</a></h2>\n<p>We developed Zephyr Cloud in response to recurring questions from our customers about the complexity and difficulties while deploying federated applications. Zephyr represents our second attempt at addressing these challenges, following our initial platform, <a href=\"https://medusa.codes/\" target=\"_blank\" rel=\"noopener noreferrer\">Medusa</a>.</p>\n<p>Micro-Frontend is complicated; even the best DevOps in the industry could quote Micro-Frontend as insanity; the majority of deployment platforms don't have out of the box support for Micro-Frontend and require a lot of custom support.</p>\n<p>To deploy a Micro-Frontend application with Zephyr, you only need to run a build (or have it run in the CI). The answer to \"how to configure and deploy Micro-Frontend\" lives in your code - it's Terraform but in the shape of pre-existing bundler configuration. Zephyr will figure out your output bundle for applications in the browser to fetch remote applications, and helping remotes, hosts applications to communicate correctly.</p>\n<h2 id=\"versions-and-rollback\">Versions and Rollback<a aria-hidden=\"true\" href=\"#versions-and-rollback\">#</a></h2>\n<p>With large scale enterprises, frontend applications are often written in different frameworks, split across different teams. When a Micro-Frontend applicaiton is deployed (say a remote application getting updated into a host app), sometimes it doesn't fit requirements, or it breaks other parts of the application.</p>\n<p>Our customers have urgent needs to rollback immediately in such situations. Waiting for CI to run and redploy costs time and business value. Unless customers have serveral containers running the same application for versioning - or have a Kubernetes Cluster to recover from it - it's almost impossible to rollback and have versions for an application.</p>\n<p>However, each application deployed throught Zephyr, whether it is a standalone application, remote components, or host applications in Micro-Frontends, is <strong>versioned</strong>. You can rollback immediately from dashboard, from our our Chrome Extension.</p>\n<h2 id=\"public-beta\">Public Beta<a aria-hidden=\"true\" href=\"#public-beta\">#</a></h2>\n<p>Zephyr Cloud is currently in public beta stage. As you evaluate Zephyr Cloud please do not hesitate to reach out to us on <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a> and provide your feedback.</p>\n<h2 id=\"how-zephyr-enhances-your-operations\">How Zephyr Enhances Your Operations<a aria-hidden=\"true\" href=\"#how-zephyr-enhances-your-operations\">#</a></h2>\n<p>You can use Zephyr to:</p>\n<ul>\n<li>Deploy more rapidly, more frequently</li>\n<li>Manage version control for your frontend</li>\n<li>Rollback or rollforward after component testing and evaluation</li>\n<li>Increase visibility into the connectivity of your micro-frontends</li>\n<li>Manage Micro-Frontend consuming application (remote) versions in <code>package.json</code> with <code>zephyrDependencies</code> option.</li>\n</ul>","routePath":"/general/why-zephyr-cloud","lang":"en-US","toc":[{"text":"Purpose-built for Micro-Frontend","id":"purpose-built-for-micro-frontend","depth":2,"charIndex":130},{"text":"Versions and Rollback","id":"versions-and-rollback","depth":2,"charIndex":1101},{"text":"Public Beta","id":"public-beta","depth":2,"charIndex":2038},{"text":"How Zephyr Enhances Your Operations","id":"how-zephyr-enhances-your-operations","depth":2,"charIndex":2211}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/general/why-zephyr-cloud.mdx","_relativePath":"general/why-zephyr-cloud.mdx"},{"id":41,"title":"Allow IP Addresses","content":"#\n\nINFO\n\nThis guide is recommended for users who want to \"bring your own cloud\" (BYOC) or\nusing our managed cloud. Zephyr Cloud leverages many other IP ranges for various\nproduct and services but some of these address will not make connections to your\norigin.\n\nZephyr has several IP addresses which are used by all proxied hostnames. These\nIP addresses construct the skeleton of our global edge network to help\ndistribute traffic among various servers.\n\nIf you have private network setup, implemented IP filtering, or are allowing\ncertain IP addresses in your organization, all traffic between your origin and\nZephyr Cloud's server will pass through your proxy network. Without whitelisting\nbelow IP addresses to your allow list, devices at your origin will stop\nreceiving traffic from our servers. Blocking these IPs will result in visitor\ntraffic termination or deployment failure. Whitelisting below IP addresses\nenable connections to our backend server and providers to enable flawless\ndeployment flow.\n\nThe following table lists the IP addresses for connections with Zephyr including\napplication UI interface and backend providers.\n\nLIST OF IP ADDRESS\n172.67.75.242\n172.67.71.27\n104.26.8.74\n104.26.9.74\n104.26.10.118\n104.26.11.118\n100.64.0.1\n75.2.70.75\n99.83.190.102\n\n\nConfigure origin server#\n\nTo avoid blocking Zephyr Cloud's IP addresses unintentionally, you should allow\nZephyr Cloud's IP addresses at your origin web server.\n\nYou can explicitly allow these IP addresses with a .htaccess file or using\n[iptable].\n\nYou can use an iptables rule to allow a Zephyr IP address range by replacing $ip\nbelow with our IP address list above.\n\n\n\nFor more specific guidance, contact your hosting provider or website\nadministrator.","_html":"<h1 id=\"allow-ip-addresses\">Allow IP Addresses<a aria-hidden=\"true\" href=\"#allow-ip-addresses\">#</a></h1>\n<div><div>INFO</div><div><p>This guide is recommended for users who want to \"bring your own cloud\" (BYOC) or using our managed cloud. Zephyr Cloud leverages many other IP ranges for various product and services but some of these address will not make connections to your origin.</p></div></div>\n<p>Zephyr has several IP addresses which are used by all proxied hostnames. These IP addresses construct the skeleton of our global edge network to help distribute traffic among various servers.</p>\n<p>If you have private network setup, implemented IP filtering, or are allowing certain IP addresses in your organization, all traffic between your origin and Zephyr Cloud's server will pass through your proxy network. Without whitelisting below IP addresses to your allow list, devices at your origin will stop receiving traffic from our servers. Blocking these IPs will result in visitor traffic termination or deployment failure. Whitelisting below IP addresses enable connections to our backend server and providers to enable flawless deployment flow.</p>\n<p>The following table lists the IP addresses for connections with Zephyr including application UI interface and backend providers.</p>\n<table>\n<thead>\n<tr>\n<th>List of IP address</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>172.67.75.242</td>\n</tr>\n<tr>\n<td>172.67.71.27</td>\n</tr>\n<tr>\n<td>104.26.8.74</td>\n</tr>\n<tr>\n<td>104.26.9.74</td>\n</tr>\n<tr>\n<td>104.26.10.118</td>\n</tr>\n<tr>\n<td>104.26.11.118</td>\n</tr>\n<tr>\n<td>100.64.0.1</td>\n</tr>\n<tr>\n<td>75.2.70.75</td>\n</tr>\n<tr>\n<td>99.83.190.102</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"configure-origin-server\">Configure origin server<a aria-hidden=\"true\" href=\"#configure-origin-server\">#</a></h2>\n<p>To avoid blocking Zephyr Cloud's IP addresses unintentionally, you should allow Zephyr Cloud's IP addresses at your origin web server.</p>\n<p>You can explicitly allow these IP addresses with a <a href=\"https://httpd.apache.org/docs/trunk/mod/mod_authz_core.html#require\" target=\"_blank\" rel=\"noopener noreferrer\"><code>.htaccess</code> file</a> or using [iptable].</p>\n<p>You can use an iptables rule to allow a Zephyr IP address range by replacing <code>$ip</code> below with our IP address list above.</p>\n<pre><code>$ iptables -I INPUT -p tcp -m multiport --dports http,https -s $ip -j ACCEPT\n$ ip6tables -I INPUT -p tcp -m multiport --dports http,https -s $ip -j ACCEPT \n</code></pre>\n<p>For more specific guidance, contact your hosting provider or website administrator.</p>","routePath":"/how-to/allow-ip-addresses","lang":"en-US","toc":[{"text":"Configure origin server","id":"configure-origin-server","depth":2,"charIndex":1273}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/allow-ip-addresses.mdx","_relativePath":"how-to/allow-ip-addresses.mdx"},{"id":42,"title":"Generate an API Token","content":"#\n\nIf you need to create an API token (for CI/CD or any other automated tasks). The\nsteps are simple:","_html":"<h1 id=\"generate-an-api-token\">Generate an API Token<a aria-hidden=\"true\" href=\"#generate-an-api-token\">#</a></h1>\n<p>If you need to create an API token (for CI/CD or any other automated tasks). The steps are simple:</p>\n","routePath":"/how-to/api-token","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/api-token.mdx","_relativePath":"how-to/api-token.mdx"},{"id":43,"title":"Browser Extension","content":"#\n\nZephyr Mission Control is a browser extension that you can use to streamline\nyour development workflow, quickly access your deployed version, and publish new\nversions of your Zephyr Cloud powered site. In this section we will discuss how\nto use our Browser Extension to manage your applications and deployments.\n\nINFO\n\nNote: While the extension may also function on other Chromium-based browsers\nsuch as Microsoft Edge, Brave, Vivaldi, and Opera, please be aware that these\nare not officially supported. For best user experience, we highly recommend you\nto use Google Chrome. We are not responsible for any issues that may arise, and\ncurrently, we do not provide support for these platforms.\n\nSee a list of known supported browsers here.\n\n\nAccount management#\n\nBrowser extension's logged in account is synced with Zephyr's dashboard. If you\nwant to sign in to different accounts you can click on the top left ≡ button and\nselect Log out, then sign in from a desired account on Zephyr dashboard.\n\n\nPreviewing Versions#\n\nWithin our browser extension, you can preview all versions of your applications.\n\nWhen you select an application under Name, you will see your latest deployed\napplication in the browser. You can also preview previously deployed version by\nclicking on the dropdown menu under Version. Rollback and forward to\nprevious/latest deployed version is currently under development.\n\n\nMicro-Frontends & Remotes#\n\nIn Zephyr Mission Control, you have the ability to manage your micro-frontends\nand their respective remote versions. Each registered remote applications are\nlisted under Remotes. You can preview the specific versions that are currently\ndeployed or previously deployed.\n\n\nSwitching Applications#\n\nOn the main Application page under the Name field, you can choose under the\ndropdown list for a selected application - after selection the application will\nbe displayed in your browser.\n\n\nSwitching Remotes#\n\nYou can switch between different versions of your remotes to preview under the\nVersion field.\n\nAdditionally, when you are previewing a host application which consumes other\nremotes, you can also switch the remote's version under the list of Remotes to\ninspect how different versions of remotes intercepts with host application.\n\n\nTags#\n\nTags are either auto-generated by us, or set up in Zephyr's dashboard by you.\nWhen you are deploying an application through Zephyr (for the first time), We\nwill generate a tag fits your current condition.\n\nYou can configure specific Tag rules in your application's Settings page under\nTags on Zephyr dashboard by creating, or editing a tag. Tags that are attached\nto an application is shown under Tags field on browser extension.\n\nRead more about Versions, Tags and Environment.\n\n\nPublishing Updates#\n\nWhen you're ready to update the environment with new changes, you can publish\nupdates directly from browser extension.\n\nLocking versions\n\nBy clicking Publish updates, you will create a snapshot of the currently used\nenvironment, locking in the versions of all remotes being consumed.\n\nNote: Feature subject to development.\n\n\nDeployed Status#\n\nWhen an application's version is labelled Deployed on top right (usually when\nyou click on a version), it indicates successful deployment. You can verify this\ndirectly within Zephyr Mission Control under the Application section.","_html":"<h1 id=\"browser-extension\">Browser Extension<a aria-hidden=\"true\" href=\"#browser-extension\">#</a></h1>\n<p><a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Mission Control</a> is a browser extension that you can use to streamline your development workflow, quickly access your deployed version, and publish new versions of your Zephyr Cloud powered site. In this section we will discuss how to use our Browser Extension to manage your applications and deployments.</p>\n\n<div><div>INFO</div><div><p><em>Note:</em> While the extension may also function on other Chromium-based browsers such as Microsoft Edge, Brave, Vivaldi, and Opera, please be aware that these are not officially supported. <em><strong>For best user experience, we highly recommend you to use Google Chrome</strong></em>. We are not responsible for any issues that may arise, and currently, we do not provide support for these platforms.</p>\n<p>See a list of known supported browsers <a href=\"/supported#supported-browser\">here</a>.</p>\n</div></div>\n<h2 id=\"account-management\">Account management<a aria-hidden=\"true\" href=\"#account-management\">#</a></h2>\n<p>Browser extension's logged in account is synced with <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr's dashboard</a>. If you want to sign in to different accounts you can click on the top left <code>≡</code> button and select <strong>Log out</strong>, then sign in from a desired account on Zephyr dashboard.</p>\n<h2 id=\"previewing-versions\">Previewing Versions<a aria-hidden=\"true\" href=\"#previewing-versions\">#</a></h2>\n<p>Within our browser extension, you can preview all versions of your applications.</p>\n<p>When you select an application under <strong>Name</strong>, you will see your latest deployed application in the browser. You can also preview previously deployed version by clicking on the dropdown menu under <strong>Version</strong>. Rollback and forward to previous/latest deployed version is currently under development.</p>\n<h2 id=\"micro-frontends--remotes\">Micro-Frontends & Remotes<a aria-hidden=\"true\" href=\"#micro-frontends--remotes\">#</a></h2>\n<p>In Zephyr Mission Control, you have the ability to manage your micro-frontends and their respective remote versions. Each registered remote applications are  listed under <strong>Remotes</strong>. You can preview the specific versions that are currently deployed or previously deployed.</p>\n<h3 id=\"switching-applications\">Switching Applications<a aria-hidden=\"true\" href=\"#switching-applications\">#</a></h3>\n<p>On the main <strong>Application</strong> page under the <strong>Name</strong> field, you can choose under the dropdown list for a selected application - after selection the application will be displayed in your browser.</p>\n<h3 id=\"switching-remotes\">Switching Remotes<a aria-hidden=\"true\" href=\"#switching-remotes\">#</a></h3>\n<p>You can switch between different versions of your remotes to preview under the <strong>Version</strong> field.</p>\n<p>Additionally, when you are previewing a host application which consumes other remotes, you can also switch the remote's version under the list of <strong>Remotes</strong> to inspect how different versions of remotes intercepts with host application.</p>\n<h2 id=\"tags\">Tags<a aria-hidden=\"true\" href=\"#tags\">#</a></h2>\n<p>Tags are either auto-generated by us, or set up in Zephyr's dashboard by you. When you are deploying an application through Zephyr (for the first time), We will generate a tag fits your current condition.</p>\n<p>You can configure specific <strong>Tag rules</strong> in your application's <strong>Settings</strong> page under <strong>Tags</strong> on Zephyr dashboard by creating, or editing a tag. Tags that are attached to an application is shown under <strong>Tags</strong> field on browser extension.</p>\n<p><a href=\"/how-to/versioning-tags#tag-management\">Read more about Versions, Tags and Environment</a>.</p>\n<h2 id=\"publishing-updates\">Publishing Updates<a aria-hidden=\"true\" href=\"#publishing-updates\">#</a></h2>\n<p>When you're ready to update the environment with new changes, you can publish updates directly from browser extension.</p>\n<div><div>Locking versions</div><div>\n<p>By clicking <strong>Publish updates</strong>, you will create a snapshot of the currently used environment, locking in the versions of all remotes being consumed.</p>\n<p>Note: Feature subject to development.</p>\n</div></div>\n<h2 id=\"deployed-status\">Deployed Status<a aria-hidden=\"true\" href=\"#deployed-status\">#</a></h2>\n<p>When an application's version is labelled <strong>Deployed</strong> on top right (usually when you click on a version), it indicates successful deployment. You can verify this directly within Zephyr Mission Control under the <strong>Application</strong> section.</p>","routePath":"/how-to/browser-extension","lang":"en-US","toc":[{"text":"Account management","id":"account-management","depth":2,"charIndex":742},{"text":"Previewing Versions","id":"previewing-versions","depth":2,"charIndex":999},{"text":"Micro-Frontends & Remotes","id":"micro-frontends--remotes","depth":2,"charIndex":1396},{"text":"Switching Applications","id":"switching-applications","depth":3,"charIndex":1695},{"text":"Switching Remotes","id":"switching-remotes","depth":3,"charIndex":1908},{"text":"Tags","id":"tags","depth":2,"charIndex":2258},{"text":"Publishing Updates","id":"publishing-updates","depth":2,"charIndex":2746},{"text":"Deployed Status","id":"deployed-status","depth":2,"charIndex":3092}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/browser-extension.mdx","_relativePath":"how-to/browser-extension.mdx"},{"id":44,"title":"Build","content":"#\n\nA key initial design goal for Zephyr Cloud was to enable incremental adoption.\nUpon installing the Zephyr package, it operates in an \"observe only\" mode. This\nmeans it starts to build a graph of your federated applications without\nrequiring changes to your CI/CD pipeline or extensive configuration efforts.\n\nTIP\n\nInitially, Zephyr Cloud acts as a side effect of your build process.\n\n\nDependency Graph#\n\nZephyr necessitates that you build the most distant remote first to accurately\nconstruct the dependency graph. Failing to do so will result in the following\nerror:\n\n","_html":"<h1 id=\"build\">Build<a aria-hidden=\"true\" href=\"#build\">#</a></h1>\n<p>A key initial design goal for Zephyr Cloud was to enable incremental adoption. Upon installing the Zephyr package, it operates in an \"observe only\" mode. This means it starts to build a graph of your federated applications without requiring changes to your CI/CD pipeline or extensive configuration efforts.</p>\n<div><div>TIP</div><div><p>Initially, Zephyr Cloud acts as a side effect of your build process.</p></div></div>\n<h2 id=\"dependency-graph\">Dependency Graph<a aria-hidden=\"true\" href=\"#dependency-graph\">#</a></h2>\n<p>Zephyr necessitates that you build the most distant remote first to accurately construct the dependency graph. Failing to do so will result in the following error:</p>\n<pre><code meta=\"\">[ConfigurationError: [zephyr]: Could not resolve remote entry points for urls:\n\n        - remote1.zephyr-examples.zackarychapple\n        - remote2.zephyr-examples.zackarychapple\n\n        Please build them with Zephyr first or add as Unmanaged applications.\n\n        Note: you can read application uid as follows:\n                 - remote1 - project.json 'name' field of remote application\n                 - zephyr-examples - git repository name\n                 - zackarychapple - git organization name\n\n        Or join and ask a question in our discord: https://zephyr-cloud.io/discord\n      ]\n</code></pre>","routePath":"/how-to/dependency-mgmt","lang":"en-US","toc":[{"text":"Dependency Graph","id":"dependency-graph","depth":2,"charIndex":387}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/dependency-mgmt.md","_relativePath":"how-to/dependency-mgmt.md"},{"id":45,"title":"End to End Testing","content":"#\n\nPart of the software development lifecycle for many organizations includes the\nneed to do end-to-end (e2e) testing. This is often done to test for regressions\nbut can also be used to validate that acceptance criteria have been met.\n\n\nTesting Basic Applications#\n\nThe Zephyr build output provides a deployed URL to the immutable version that\nwas created and published as part of the build. You can proceed to test this URL\ndirectly. Check our guide to promote this URL directly under an environment\nhere.\n\nWe found one of the quickest and easiest ways to do this is to get the output\nURL by adding a script to your CI runner script. You can leverage the build\noutput directly and using regex find the appropriate output text.\n\n\nGithub Action#\n\nAdd below script to your pull_request.yaml file.\n\n\n\nThe output can then be used as variables in later steps of your pipeline to\nserve as the base URL for your test.\n\n\n\n\nTesting Federated Applications#\n\nTesting federated applications is typically a bit more challenging, however with\nZephyr this is a fairly trivial task.\n\nBecause of how the Zephyr workers resolve the federated remotes we have the\nability to modify our session and have the worker give us different versions of\nthe application.\n\nThis means in your e2e testing suite you can update the browser session storage\nto update the remotes. In the puppeteer example below we take the output values\nof the remote name as well as the remoteURL and set them on the session storage.\nAfter refreshing the page the remote will be swapped with the version on the\nsession.\n\n\n\n\nTesting in production#\n\nIf you want to test a new remote in production you can perform the following in\nyour testing suite.\n\n 1. Go to the production url\n 2. Update the session storage to set the remote and url that you want to\n    replace.\n 3. Refresh the page\n 4. Perform the test","_html":"<h1 id=\"end-to-end-testing\">End to End Testing<a aria-hidden=\"true\" href=\"#end-to-end-testing\">#</a></h1>\n<p>Part of the software development lifecycle for many organizations includes the need to do end-to-end (e2e) testing.\nThis is often done to test for regressions but can also be used to validate that acceptance criteria have been met.</p>\n<h2 id=\"testing-basic-applications\">Testing Basic Applications<a aria-hidden=\"true\" href=\"#testing-basic-applications\">#</a></h2>\n<p>The Zephyr build output provides a deployed URL to the immutable version that was created and published as part of the build.\nYou can proceed to test this URL directly. <a href=\"/how-to/environments\">Check our guide to promote this URL directly under an environment here</a>.</p>\n<p>We found one of the quickest and easiest ways to do this is to get the output URL by adding a script to your CI runner script.\nYou can leverage the build output directly and using regex find the appropriate output text.</p>\n<h3 id=\"github-action\">Github Action<a aria-hidden=\"true\" href=\"#github-action\">#</a></h3>\n<p>Add below script to your <code>pull_request.yaml</code> file.</p>\n<pre><code meta=\"\">run: |\n  OUTPUT=$(npm run build)\n  echo \"$OUTPUT\"\n  URL=$(echo \"$OUTPUT\" | grep -oE 'https://[^ ]+')\n  HOST=$(echo \"$OUTPUT\" | grep -oP 'ZEPHYR\\s+\\K\\S+(?=#)')\n  echo \"Extracted Host Zephyr URL: $URL\"\n  echo \"Extracted Host: $HOST\"\n  echo \"host=$HOST\" >> \"$GITHUB_OUTPUT\"\n  echo \"url=$URL\" >> \"$GITHUB_OUTPUT\"\n</code></pre>\n<p>The output can then be used as variables in later steps of your pipeline to serve as the base URL for your test.</p>\n<pre><code meta=\"\">env:\n  REMOTE_URL: ${{ steps.buildRemote.outputs.remoteUrl }}\n  REMOTE: ${{ steps.buildRemote.outputs.remote }}\n</code></pre>\n<h2 id=\"testing-federated-applications\">Testing Federated Applications<a aria-hidden=\"true\" href=\"#testing-federated-applications\">#</a></h2>\n<p>Testing federated applications is typically a bit more challenging, however with Zephyr this is a fairly trivial task.</p>\n<p>Because of how the Zephyr workers resolve the federated remotes we have the ability to modify our session and have the worker give us different versions of the application.</p>\n<p>This means in your e2e testing suite you can update the browser session storage to update the remotes.\nIn the puppeteer example below we take the output values of the remote name as well as the remoteURL and set them on the session storage.\nAfter refreshing the page the remote will be swapped with the version on the session.</p>\n<pre><code meta=\"\">const remote = process.env.REMOTE;\nconst remoteUrl = process.env.REMOTE_URL;\n\nawait page.evaluate(\n  (remote, url) => {\n    sessionStorage.setItem(remote, url);\n  },\n  remote,\n  remoteUrl,\n);\n</code></pre>\n<h2 id=\"testing-in-production\">Testing in production<a aria-hidden=\"true\" href=\"#testing-in-production\">#</a></h2>\n<p>If you want to test a new remote in production you can perform the following in your testing suite.</p>\n<ol>\n<li>Go to the production url</li>\n<li>Update the session storage to set the remote and url that you want to replace.</li>\n<li>Refresh the page</li>\n<li>Perform the test</li>\n</ol>","routePath":"/how-to/end-to-end-testing","lang":"en-US","toc":[{"text":"Testing Basic Applications","id":"testing-basic-applications","depth":2,"charIndex":236},{"text":"Github Action","id":"github-action","depth":3,"charIndex":729},{"text":"Testing Federated Applications","id":"testing-federated-applications","depth":2,"charIndex":914},{"text":"Testing in production","id":"testing-in-production","depth":2,"charIndex":1572}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/end-to-end-testing.mdx","_relativePath":"how-to/end-to-end-testing.mdx"},{"id":46,"title":"Environments","content":"#\n\nRequirements\n\nCustom domains (cnames) are only available for applications deployed through a\nCustom Deployment Integration Provider.\n\nEnvironments support custom DNS records, allowing each deployment to have unique\ndomain configurations tailored to its requirements.\n\n\nWhen a Tag is Not Enough#\n\nTags are used to identify specific versions based on predefined conditions,\nfacilitating easy management of builds. Environments can be configured to use\neither a specific version or a tag, offering flexibility in versioning.\n\nLearn more about tags, versions, and tag rules.\n\n\nGeneral Configuration#\n\nWhen assigning a custom domain name, creating a new tag and additional\nverification steps in environment settings can be helpful. Here’s how to set up\na custom domain before editing DNS records.\n\n\n1. Create a New Tag (Optional)#\n\nSince a custom domain can be tied to either a Version or a Tag, creating a\nspecific tag can help clearly identify the application version or deployment\nrules.\n\na. Select an application on the Zephyr Dashboard, go to Settings, and select\nTags on the left navigation bar.\n\nb. Click on Create Tag, provide a Tag name, and select a Tag condition. -\nExample: If you set the tag condition to Branch and enter your branch name\n(e.g., user/feature), any deployment under this branch will attach to this tag,\nand its URL will automatically update with each new deployment that satisfies\nthe condition.\n\nc. Run a build command to deploy your application and confirm the latest\ndeployed version is attached to the tag by viewing Version next to the tag name\non Zephyr’s dashboard, or by using the Zephyr Chrome Extension to verify\ndeployment.\n\n\n2. Environment Settings#\n\n 1. Select an application, navigate to Settings, and click Environment on the\n    left.\n\n 2. On the Environment page, click Create Environment.\n\nEnvironment Input Fields#\n\n 3. Copy the domain name\n\nAfter selecting a Channel, copy the version URL that appears in the Version\nfield. Keep this handy for the next step, as it may need adjustments depending\non your registrar’s DNS settings.\n\nYou can confirm the deployed URL is attached to the newly created tag by\nchecking the Environment settings and the version URL. Here are the next steps\nyou can choose:\n\n\nCloudflare#\n\nOur Cloudflare integration does not needs any extra steps to configure a custom\ndomain, just by creating an environment in our dashboard, we automatically\ncreates all DNS records and routes for you.\n\nAfter adding a new domain, you can see in your worker's configuration a custom\nentry for it was added:\n\n\n\nAnd that a custom DNS entry was automatically added to your domain:\n\n\n\n\nNetlify#\n\nPrerequisites\n\nAttach a domain to a Netlify site project and set the Netlify integration as the\nDefault deployment integration on Zephyr’s dashboard. You can confirm domain\nmanagement status under your Netlify Team account’s Domain settings.\n\nIf needed, refer to the Netlify Configuration Guide and confirm that you meet\nall requirements listed here.\n\n 1. Log into Netlify and go to Domains. Select the domain attached to the site\n    project configured as the Default Deployment Integration on Zephyr’s\n    dashboard.\n\n 2. Trim the version URL by removing https:// and the trailing slash.\n\n 3. Add a new CNAME record:\n    \n    * For the primary domain (www), set Name to www and Value to the edited\n      version URL. Delete the root domain under the NETLIFY type.\n    * For a subdomain, enter Name (e.g., sub) and Value as the edited version\n      URL.\n\n 4. Return to Zephyr’s Environment page and add the entry as www.domain.com (for\n    the primary domain) or sub.domain.com (for the subdomain).\n\n 5. Save the configuration to complete your custom domain setup.\n\n\nPromote a Previous Version to Custom Domain#\n\nOnce your custom domain is set up, you can promote a previous deployment to the\ndomain:\n\n 1. Go to the application’s Versions page.\n\n 2. Under Version history, select a version to promote and click Deploy.\n\n 3. Choose the Environment for the deployment in the pop-up window, or select a\n    tag to deploy a previous version.\n\n 4. Enter Deploy in the confirmation field, then click Yes, I am sure to\n    finalize.\n\n 5. The custom domain should show the content of your version URL shortly. If\n    not, allow a few minutes for DNS propagation.","_html":"<h1 id=\"environments\">Environments<a aria-hidden=\"true\" href=\"#environments\">#</a></h1>\n<div><div>Requirements</div><div>\n<p>Custom domains <em>(cnames)</em> are only available for applications deployed through a <a href=\"/cloud\">Custom Deployment Integration Provider</a>.</p>\n</div></div>\n<p>Environments support custom DNS records, allowing each deployment to have unique domain configurations tailored to its requirements.</p>\n<h2 id=\"when-a-tag-is-not-enough\">When a Tag is Not Enough<a aria-hidden=\"true\" href=\"#when-a-tag-is-not-enough\">#</a></h2>\n<p>Tags are used to identify specific versions based on predefined conditions, facilitating easy management of builds. Environments can be configured to use either a specific version or a tag, offering flexibility in versioning.</p>\n<p><a href=\"/how-to/versioning-tags#tag-rules-on-dashboard\">Learn more about tags, versions, and tag rules</a>.</p>\n<h2 id=\"general-configuration\">General Configuration<a aria-hidden=\"true\" href=\"#general-configuration\">#</a></h2>\n<p>When assigning a custom domain name, creating a new tag and additional verification steps in environment settings can be helpful. Here’s how to set up a custom domain before editing DNS records.</p>\n<h3 id=\"1-create-a-new-tag-optional\">1. Create a New Tag (Optional)<a aria-hidden=\"true\" href=\"#1-create-a-new-tag-optional\">#</a></h3>\n<p>Since a custom domain can be tied to either a <strong>Version</strong> or a <strong>Tag</strong>, creating a specific tag can help clearly identify the application version or deployment rules.</p>\n<p>a. Select an application on the <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Dashboard</a>, go to <strong>Settings</strong>, and select <strong>Tags</strong> on the left navigation bar.</p>\n<p>b. Click on <strong>Create Tag</strong>, provide a <strong>Tag name</strong>, and select a <a href=\"/how-to/versioning-tags#tag-rules-on-dashboard\"><strong>Tag condition</strong></a>. - Example: If you set the tag condition to <strong>Branch</strong> and enter your branch name (e.g., <code>user/feature</code>), any deployment under this branch will attach to this tag, and its URL will automatically update with each new deployment that satisfies the condition.</p>\n<p>c. Run a build command to deploy your application and confirm the latest deployed version is attached to the tag by viewing <strong>Version</strong> next to the tag name on Zephyr’s dashboard, or by using the <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Chrome Extension</a> to verify deployment.</p>\n<h3 id=\"2-environment-settings\">2. Environment Settings<a aria-hidden=\"true\" href=\"#2-environment-settings\">#</a></h3>\n<ol>\n<li>\n<p>Select an application, navigate to <strong>Settings</strong>, and click <strong>Environment</strong> on the left.</p>\n</li>\n<li>\n<p>On the <strong>Environment</strong> page, click <strong>Create Environment</strong>.</p>\n</li>\n</ol>\n<h4 id=\"environment-input-fields\">Environment Input Fields<a aria-hidden=\"true\" href=\"#environment-input-fields\">#</a></h4>\n\n<ol start=\"3\">\n<li>Copy the domain name</li>\n</ol>\n<p>After selecting a <strong>Channel</strong>, copy the version URL that appears in the <strong>Version</strong> field. Keep this handy for the next step, as it may need adjustments depending on your registrar’s DNS settings.</p>\n<p>You can confirm the deployed URL is attached to the newly created tag by checking the <strong>Environment</strong> settings and the version URL. Here are the next steps you can choose:</p>\n<h2 id=\"cloudflare\">Cloudflare<a aria-hidden=\"true\" href=\"#cloudflare\">#</a></h2>\n<p>Our Cloudflare integration does not needs any extra steps to configure a custom domain, just by creating an environment in our dashboard, we automatically creates all DNS records and routes for you.</p>\n<p>After adding a new domain, you can see in your worker's configuration a custom entry for it was added:</p>\n<p></p>\n<p>And that a custom DNS entry was automatically added to your domain:</p>\n<p></p>\n<h2 id=\"netlify\">Netlify<a aria-hidden=\"true\" href=\"#netlify\">#</a></h2>\n<div><div>Prerequisites</div><div>\n<p>Attach a domain to a Netlify site project and set the Netlify integration as the <strong>Default deployment integration</strong> on Zephyr’s dashboard. You can confirm domain management status under your Netlify Team account’s <strong>Domain</strong> settings.</p>\n<p>If needed, refer to the <a href=\"/cloud/netlify\">Netlify Configuration Guide</a> and confirm that you meet all requirements <a href=\"/cloud/netlify#wildcard-subdomain-on-netlify\">listed here</a>.</p>\n</div></div>\n<ol>\n<li>\n<p>Log into Netlify and go to <strong>Domains</strong>. Select the domain attached to the site project configured as the <strong>Default Deployment Integration</strong> on Zephyr’s dashboard.</p>\n</li>\n<li>\n<p>Trim the version URL by removing <code>https://</code> and the trailing slash.</p>\n</li>\n<li>\n<p>Add a new <code>CNAME</code> record:</p>\n<ul>\n<li>For the primary domain (<code>www</code>), set <strong>Name</strong> to <code>www</code> and <strong>Value</strong> to the edited version URL. Delete the root domain under the <strong>NETLIFY</strong> type.</li>\n<li>For a subdomain, enter <strong>Name</strong> (e.g., <code>sub</code>) and <strong>Value</strong> as the edited version URL.</li>\n</ul>\n</li>\n<li>\n<p>Return to Zephyr’s <strong>Environment</strong> page and add the entry as <code>www.domain.com</code> (for the primary domain) or <code>sub.domain.com</code> (for the subdomain).</p>\n</li>\n<li>\n<p>Save the configuration to complete your custom domain setup.</p>\n</li>\n</ol>\n<h2 id=\"promote-a-previous-version-to-custom-domain\">Promote a Previous Version to Custom Domain<a aria-hidden=\"true\" href=\"#promote-a-previous-version-to-custom-domain\">#</a></h2>\n<p>Once your custom domain is set up, you can promote a previous deployment to the domain:</p>\n<ol>\n<li>\n<p>Go to the application’s <strong>Versions</strong> page.</p>\n</li>\n<li>\n<p>Under <strong>Version history</strong>, select a version to promote and click <strong>Deploy</strong>.</p>\n</li>\n<li>\n<p>Choose the <strong>Environment</strong> for the deployment in the pop-up window, or select a tag to deploy a previous version.</p>\n</li>\n<li>\n<p>Enter <strong>Deploy</strong> in the confirmation field, then click <strong>Yes, I am sure</strong> to finalize.</p>\n</li>\n<li>\n<p>The custom domain should show the content of your version URL shortly. If not, allow a few minutes for DNS propagation.</p>\n</li>\n</ol>","routePath":"/how-to/environments","lang":"en-US","toc":[{"text":"When a Tag is Not Enough","id":"when-a-tag-is-not-enough","depth":2,"charIndex":271},{"text":"General Configuration","id":"general-configuration","depth":2,"charIndex":575},{"text":"1. Create a New Tag (Optional)","id":"1-create-a-new-tag-optional","depth":3,"charIndex":796},{"text":"2. Environment Settings","id":"2-environment-settings","depth":3,"charIndex":1663},{"text":"Environment Input Fields","id":"environment-input-fields","depth":4,"charIndex":1834},{"text":"Cloudflare","id":"cloudflare","depth":2,"charIndex":2247},{"text":"Netlify","id":"netlify","depth":2,"charIndex":2638},{"text":"Promote a Previous Version to Custom Domain","id":"promote-a-previous-version-to-custom-domain","depth":2,"charIndex":3716}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/environments.mdx","_relativePath":"how-to/environments.mdx"},{"id":47,"title":"Fork Our Examples","content":"#\n\n\nUse a Single Example#\n\nThe quickest way to get started with a single example is to use degit. Degit\nlets you copy any single example from our examples directory with the following\ncommand\n\n\n\nReplace create-default-webpack-mf with whatever example name you want to copy.\nReplace local-copy with whatever you'd like to call it, but this gets a copy of\njust that example. Once you have the example you wish to use, initialize git in\nwhichever way you normally do and commit changes. Each of our examples has a\nREADME you can follow to deploy with zephyr.\n\n\nFork'em all#\n\nIf you would like to fork the entire repo and explore all the sample projects\nclick here and follow the README in the respective example directory.","_html":"<h1 id=\"fork-our-examples\">Fork Our Examples<a aria-hidden=\"true\" href=\"#fork-our-examples\">#</a></h1>\n<h2 id=\"use-a-single-example\">Use a Single Example<a aria-hidden=\"true\" href=\"#use-a-single-example\">#</a></h2>\n<p>The quickest way to get started with a single example is to use degit. Degit lets you copy any single example from our examples directory with the following command</p>\n<pre><code meta=\"\">\nnpx degit ZephyrCloudIO/zephyr-examples/examples/create-default-webpack-mf local-copy\n</code></pre>\n<p>Replace <code>create-default-webpack-mf</code> with whatever example name you want to copy. Replace <code>local-copy</code> with whatever you'd like to call it, but this gets a copy of just that example. Once you have the example you wish to use, initialize git in whichever way you normally do and commit changes. Each of our examples has a <code>README</code> you can follow to deploy with zephyr.</p>\n<h2 id=\"forkem-all\">Fork'em all<a aria-hidden=\"true\" href=\"#forkem-all\">#</a></h2>\n<p>If you would like to fork the entire repo and explore all the sample projects <a href=\"https://github.com/ZephyrCloudIO/zephyr-examples/fork\" target=\"_blank\" rel=\"noopener noreferrer\">click here</a> and follow the <code>README</code> in the respective example directory.</p>","routePath":"/how-to/fork-our-examples","lang":"en-US","toc":[{"text":"Use a Single Example","id":"use-a-single-example","depth":2,"charIndex":3},{"text":"Fork'em all","id":"forkem-all","depth":2,"charIndex":557}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/fork-our-examples.mdx","_relativePath":"how-to/fork-our-examples.mdx"},{"id":48,"title":"Frameworks and Bundlers","content":"#","_html":"<h1 id=\"frameworks-and-bundlers\">Frameworks and Bundlers<a aria-hidden=\"true\" href=\"#frameworks-and-bundlers\">#</a></h1>","routePath":"/how-to/framework-bundlers","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/framework-bundlers.mdx","_relativePath":"how-to/framework-bundlers.mdx"},{"id":49,"title":"Building on CI","content":"#\n\nZephyr requires an authenticated user in order to publish updates. In order to\nconfigure your CI pipeline, and in our case, GitHub actions to build and deploy\nwith Zephyr we will need to add a token to the secrets for the action.\n\n\nAdding the GitHub secret#\n\nYou will need to create a token on your API token page. After creating this\ntoken you will need to add it as a secret. This secret must be assigned to the\nZE_SECRET_TOKEN environment variable.\n\n\n\n\nPlugin behavior when secret token presents#\n\nWhen the Zephyr plugin is triggered on an environment that holds the\nZE_SECRET_TOKEN environment variable, it will use this token to authenticate\nwith the Zephyr API and bypassing the usual log in step.\n\nYou will notice that with a log in the console, the plugin will print the\nfollowing message:\n\n","_html":"<h1 id=\"building-on-ci\">Building on CI<a aria-hidden=\"true\" href=\"#building-on-ci\">#</a></h1>\n<p>Zephyr requires an authenticated user in order to publish updates. In order to configure your CI pipeline, and in our case, GitHub actions to build and deploy with Zephyr we will need to add a token\nto the secrets for the action.</p>\n<h2 id=\"adding-the-github-secret\">Adding the GitHub secret<a aria-hidden=\"true\" href=\"#adding-the-github-secret\">#</a></h2>\n<p>You will need to create a token on your <a href=\"https://app.zephyr-cloud.io/profile/settings/user-tokens\" target=\"_blank\" rel=\"noopener noreferrer\">API token</a> page. After creating this token you will need to add it as a secret.\nThis secret must be assigned to the <code>ZE_SECRET_TOKEN</code> environment variable.</p>\n<pre><code meta=\"\">env:\n  ZE_SECRET_TOKEN: ${{ secrets.ZEPHYR_AUTH_TOKEN }}\n</code></pre>\n<h2 id=\"plugin-behavior-when-secret-token-presents\">Plugin behavior when secret token presents<a aria-hidden=\"true\" href=\"#plugin-behavior-when-secret-token-presents\">#</a></h2>\n<p>When the Zephyr plugin is triggered on an environment that holds the <code>ZE_SECRET_TOKEN</code> environment variable, it will use this token to authenticate with the Zephyr API and bypassing the usual log in step.</p>\n<p>You will notice that with a log in the console, the plugin will print the following message:</p>\n<pre><code> ZEPHYR   Token found in environment. Using secret token for authentication\n</code></pre>","routePath":"/how-to/github-automations","lang":"en-US","toc":[{"text":"Adding the GitHub secret","id":"adding-the-github-secret","depth":2,"charIndex":234},{"text":"Plugin behavior when secret token presents","id":"plugin-behavior-when-secret-token-presents","depth":2,"charIndex":458}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/github-automations.mdx","_relativePath":"how-to/github-automations.mdx"},{"id":50,"title":"Micro-Frontends with Zephyr - The Complete Guide","content":"#\n\nMicro-Frontends' configuration and deployment processes are known to be\ncomplicated and painful to debug. Zephyr Cloud not only to helps with resolving\ndynamic URL and development process for applications applying Micro-Frontends\narchitecture, but also deployment, versioning and more. This section will walk\nthrough the necessary configuration to ensure you have a smooth development\nworkflow and deployment process.\n\n\nChecklist#","_html":"<h1 id=\"micro-frontends-with-zephyr---the-complete-guide\">Micro-Frontends with Zephyr - The Complete Guide<a aria-hidden=\"true\" href=\"#micro-frontends-with-zephyr---the-complete-guide\">#</a></h1>\n<p>Micro-Frontends' configuration and deployment processes are known to be complicated and painful to debug. Zephyr Cloud not only to helps with resolving dynamic URL and development process for applications applying Micro-Frontends architecture, but also deployment, versioning and more. This section will walk through the necessary configuration to ensure you have a smooth development workflow and deployment process.</p>\n<h2 id=\"checklist\">Checklist<a aria-hidden=\"true\" href=\"#checklist\">#</a></h2>\n","routePath":"/how-to/mf-guide","lang":"en-US","toc":[{"text":"Checklist","id":"checklist","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/mf-guide.mdx","_relativePath":"how-to/mf-guide.mdx"},{"id":51,"title":"Migrate an Nx workspace from Webpack to Rspack","content":"#\n\nIf you have an Nx workspace setup for Micro-Frontend application in place with\nWebpack and curious about how to migrate to Rspack and use Zephyr - this\ndocumentation is for you.\n\nPrerequisites\n * You have a pre-existing Nx workspace with React based on Webpack\n * We expect you to have finish our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=20\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\n\nVideo Walk-through#\n\n\nExample in Code#\n\nAn example contains line-by-line changes in our example repository.\n\n\nInstallation#\n\nWithin your project directory, run below commands to install required packages\nfor rspack and Zephyr's npm package:\n\n\n\n\nChange import path#\n\n 1. module-federation.config.ts\n\nEvery module-federation.config.ts's import needs to be replaced by\n\n\n\n 2. webpack.config.ts and webpack.config.prod.ts\n\nRename webpack.config.ts to rspack.config.ts and change all import path to\nbelow. While changing the import path, we will also add Zephyr's plugin to build\nconfiguration.\n\n\n\nRename all webpack.config.prod.ts to rspack.config.prod.ts and within the file\n(of each remotes), change the import path:\n\n\n\nFor Host application's rspack.config.prod.ts, you will need to do the same\nchanges as rspack.config.ts:\n\n\n\n\nEdit project.json#\n\nIn every project.json, you will need to edit below changes:\n\n 1. Change build executor to @nx/rspack:rspack 2. Add \"target\":\"web\" to build\n    options (this inferred a )\n\n 2. Under build's options -- change all\n    \"webpackConfig\":\"apps/{appName}/webpack.config.ts\" to \"rspackConfig\":\n    \"apps/{appName}/rspack.config.ts\"\n\n 3. Under configurations's production config -- change all\n    \"webpackConfig\":\"apps/{appName}/webpack.config.prod.ts\" to \"rspackConfig\":\n    \"apps/{appName}/rspack.config.prod.ts\"\n\n 4. Edit executor in serve -- change @nx/react:module-federation-dev-server to\n    \"@nx/rspack:module-federation-dev-server\"\n\n\n\n\nAdd package.json#\n\nIn each of the applications, hosts or remotes, it will need a package.json file\nwith name and version field in order for Zephyr to map the remote's name.\n\nIf you are naming host application in Module Federation configuration like:\n\n\n\nYou will need a package.json like so within the host's folder:\n\n\n\n\nDeploy through Zephyr#\n\nBefore we deploy to Zephyr, make sure:\n\n * this repository is a git repository\n * Have pre-existing commit hash\n * Have a remote.origin.url\n\nSince this is a Micro-Frontend application, you will need to build the remote\nfirst by running each of these command in sequence. Remotes must be built first\nfor Zephyr to map them in host applications. Read more.\n\nFirst:\n\n\n\nSecond:\n\n\n\nThird:\n\n","_html":"<h1 id=\"migrate-an-nx-workspace-from-webpack-to-rspack\">Migrate an Nx workspace from Webpack to Rspack<a aria-hidden=\"true\" href=\"#migrate-an-nx-workspace-from-webpack-to-rspack\">#</a></h1>\n<p>If you have an Nx workspace setup for Micro-Frontend application in place with Webpack and curious about how to migrate to Rspack and <strong>use Zephyr</strong> - this documentation is for you.</p>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>You have a pre-existing Nx workspace with React based on Webpack</li>\n<li>We expect you to have finish our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li>node >=20</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h3 id=\"video-walk-through\">Video Walk-through<a aria-hidden=\"true\" href=\"#video-walk-through\">#</a></h3>\n\n<h2 id=\"example-in-code\">Example in Code<a aria-hidden=\"true\" href=\"#example-in-code\">#</a></h2>\n<p>An example contains line-by-line changes <a href=\"https://github.com/ZephyrCloudIO/zephyr-examples/pull/43/files#diff-ae97963da9251d9d7d435301f6a6061201fdf9382ea69d647862e6e51127251a\" target=\"_blank\" rel=\"noopener noreferrer\">in our example repository</a>.</p>\n<h3 id=\"installation\">Installation<a aria-hidden=\"true\" href=\"#installation\">#</a></h3>\n<p>Within your project directory, run below commands to install required packages for <code>rspack</code> and Zephyr's npm package:</p>\n<pre><code meta=\"\">npm i @nx/rspack @rspack/dev-server zephyr-webpack-plugin@0.0.17 --force\n</code></pre>\n<h3 id=\"change-import-path\">Change import path<a aria-hidden=\"true\" href=\"#change-import-path\">#</a></h3>\n<ol>\n<li><code>module-federation.config.ts</code></li>\n</ol>\n<p>Every <code>module-federation.config.ts</code>'s import needs to be replaced by</p>\n<pre><code meta=\"\">//  \n\n</code></pre>\n<ol start=\"2\">\n<li><code>webpack.config.ts</code> and <code>webpack.config.prod.ts</code></li>\n</ol>\n<p>Rename <code>webpack.config.ts</code> to <code>rspack.config.ts</code> and change all import path to below. While changing the import path, we will also add Zephyr's plugin to build configuration.</p>\n<pre><code meta=\"\">// \n// \n// \n\n\n // import Zephyr\n\n\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n// Nx plugins for webpack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config, { dts: false }),\n  withZephyr() // add zephyr in plugin\n);\n</code></pre>\n<p>Rename all <code>webpack.config.prod.ts</code> to <code>rspack.config.prod.ts</code> and within the file (<strong>of each remotes</strong>), change the import path:</p>\n<pre><code meta=\"\">export default require('./rspack.config');\n</code></pre>\n<p>For <strong>Host application</strong>'s <code>rspack.config.prod.ts</code>, you will need to do the same changes as <code>rspack.config.ts</code>:</p>\n<pre><code meta=\"\">\n// \n// \n// \n// \n\n\n\n\n\n\nconst prodConfig: ModuleFederationConfig = {\n  ...baseConfig,\n  /*\n   * Remote overrides for production.\n   * Each entry is a pair of a unique name and the URL where it is deployed.\n   *\n   * e.g.\n   * remotes: [\n   *   ['app1', 'http://app1.example.com'],\n   *   ['app2', 'http://app2.example.com'],\n   * ]\n   *\n   * You can also use a full path to the remoteEntry.js file if desired.\n   *\n   * remotes: [\n   *   ['app1', 'http://example.com/path/to/app1/remoteEntry.js'],\n   *   ['app2', 'http://example.com/path/to/app2/remoteEntry.js'],\n   * ]\n   */\n  remotes: [\n    ['remote1', 'http://localhost:4201/'],\n    ['remote2', 'http://localhost:4202/'],\n  ],\n};\n// Nx plugins for webpack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(prodConfig, { dts: false }),\n  withZephyr()\n);\n</code></pre>\n<h3 id=\"edit-projectjson\">Edit project.json<a aria-hidden=\"true\" href=\"#edit-projectjson\">#</a></h3>\n<p>In every <code>project.json</code>, you will need to edit below changes:</p>\n<ol>\n<li>\n<p>Change build executor to <code>@nx/rspack:rspack</code>\n<strong>2. Add <code>\"target\":\"web\"</code> to build options</strong> (this inferred a )</p>\n</li>\n<li>\n<p>Under <code>build</code>'s <code>options</code> -- change all <code>\"webpackConfig\":\"apps/{appName}/webpack.config.ts\"</code> to <code>\"rspackConfig\": \"apps/{appName}/rspack.config.ts\"</code></p>\n</li>\n<li>\n<p>Under <code>configurations</code>'s <code>production</code> config -- change all <code>\"webpackConfig\":\"apps/{appName}/webpack.config.prod.ts\"</code> to <code>\"rspackConfig\": \"apps/{appName}/rspack.config.prod.ts\"</code></p>\n</li>\n<li>\n<p>Edit <code>executor</code> in <code>serve</code> -- change <code>@nx/react:module-federation-dev-server</code> to <code>\"@nx/rspack:module-federation-dev-server\"</code></p>\n</li>\n</ol>\n<pre><code meta=\"\">{\n  \"name\": \"remote1\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"apps/remote1/src\",\n  \"projectType\": \"application\",\n  \"tags\": [],\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/rspack:rspack\",\n      \"outputs\": [\n        \"{options.outputPath}\"\n      ],\n      \"defaultConfiguration\": \"production\",\n      \"options\": {\n        \"target\": \"web\",\n        \"compiler\": \"babel\",\n        \"outputPath\": \"dist/apps/remote1\",\n        \"index\": \"apps/remote1/src/index.html\",\n        \"baseHref\": \"/\",\n        \"main\": \"apps/remote1/src/main.ts\",\n        \"tsConfig\": \"apps/remote1/tsconfig.app.json\",\n        \"assets\": [\n          \"apps/remote1/src/favicon.ico\",\n          \"apps/remote1/src/assets\"\n        ],\n        \"styles\": [\n          \"apps/remote1/src/styles.css\"\n        ],\n        \"scripts\": [],\n        \"rspackConfig\": \"apps/remote1/rspack.config.ts\"\n      },\n      \"configurations\": {\n        \"development\": {\n          \"extractLicenses\": false,\n          \"optimization\": false,\n          \"sourceMap\": true,\n          \"vendorChunk\": true\n        },\n        \"production\": {\n          \"fileReplacements\": [\n            {\n              \"replace\": \"apps/remote1/src/environments/environment.ts\",\n              \"with\": \"apps/remote1/src/environments/environment.prod.ts\"\n            }\n          ],\n          \"optimization\": true,\n          \"outputHashing\": \"all\",\n          \"sourceMap\": false,\n          \"namedChunks\": false,\n          \"extractLicenses\": true,\n          \"vendorChunk\": false,\n          \"rspackConfig\": \"apps/remote1/rspack.config.prod.ts\"\n        }\n      }\n    },\n    \"serve\": {\n      \"executor\": \"@nx/rspack:module-federation-dev-server\",\n      \"defaultConfiguration\": \"development\",\n      \"options\": {\n        \"buildTarget\": \"remote1:build\",\n        \"hmr\": true,\n        \"port\": 4201\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"remote1:build:development\"\n        },\n        \"production\": {\n          \"buildTarget\": \"remote1:build:production\",\n          \"hmr\": false\n        }\n      }\n    },\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\"\n    },\n    \"serve-static\": {\n      \"executor\": \"@nx/web:file-server\",\n      \"defaultConfiguration\": \"production\",\n      \"options\": {\n        \"buildTarget\": \"remote1:build\",\n        \"watch\": false,\n        \"port\": 4201\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"remote1:build:development\"\n        },\n        \"production\": {\n          \"buildTarget\": \"remote1:build:production\"\n        }\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"outputs\": [\n        \"{workspaceRoot}/coverage/{projectRoot}\"\n      ],\n      \"options\": {\n        \"jestConfig\": \"apps/remote1/jest.config.ts\"\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"add-packagejson\">Add package.json<a aria-hidden=\"true\" href=\"#add-packagejson\">#</a></h3>\n<p>In <strong>each of the applications, hosts or remotes, it will need a <code>package.json</code> file with <code>name</code> and <code>version</code> field</strong> in order for Zephyr to map the remote's name.</p>\n<p>If you are naming <code>host</code> application in Module Federation configuration like:</p>\n<pre><code meta=\"\">const config: ModuleFederationConfig = {\n  name: 'host',\n\n  remotes: ['remote1', 'remote2'],\n};\n\nexport default config;\n\n</code></pre>\n<p>You will need a <code>package.json</code> like so within the <code>host</code>'s folder:</p>\n<pre><code meta=\"\">{\n    \"name\": \"host\", \n    \"version\": \"0.0.0\" // Versioning depending on you, it's a required field for Zephyr \n}\n\n</code></pre>\n<h3 id=\"deploy-through-zephyr\">Deploy through Zephyr<a aria-hidden=\"true\" href=\"#deploy-through-zephyr\">#</a></h3>\n<p>Before we deploy to Zephyr, make sure:</p>\n<ul>\n<li>this repository is a <code>git</code> repository</li>\n<li>Have pre-existing commit hash</li>\n<li>Have a <code>remote.origin.url</code></li>\n</ul>\n<p>Since this is a Micro-Frontend application, you will need to build the remote first by running each of these command in sequence. Remotes must be built first for Zephyr to map them in host applications. <a href=\"/how-to/mf-guide\">Read more</a>.</p>\n<p>First:</p>\n<pre><code meta=\"\">npx nx run remote1:build \n</code></pre>\n<p>Second:</p>\n<pre><code meta=\"\">npx nx run remote2:build \n</code></pre>\n<p>Third:</p>\n<pre><code meta=\"\">npx nx run host:build \n</code></pre>","routePath":"/how-to/migrate-nx-webpack-to-rspack","lang":"en-US","toc":[{"text":"Video Walk-through","id":"video-walk-through","depth":3,"charIndex":547},{"text":"Example in Code","id":"example-in-code","depth":2,"charIndex":569},{"text":"Installation","id":"installation","depth":3,"charIndex":657},{"text":"Change import path","id":"change-import-path","depth":3,"charIndex":792},{"text":"Edit project.json","id":"edit-projectjson","depth":3,"charIndex":1373},{"text":"Add package.json","id":"add-packagejson","depth":3,"charIndex":2028},{"text":"Deploy through Zephyr","id":"deploy-through-zephyr","depth":3,"charIndex":2348}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/migrate-nx-webpack-to-rspack.mdx","_relativePath":"how-to/migrate-nx-webpack-to-rspack.mdx"},{"id":52,"title":"Versioning, Tags and Environments","content":"#\n\nZephyr utilizes familiar versioning concepts by adopting SemVer (Semantic\nVersioning) as its foundational versioning methodology, ensuring a systematic\nand meaningful progression of project versions.\n\nApplications deployed through Zephyr can have an unlimited number of versions.\nAfter you configure Zephyr's npm plugin in your build tool, or bundlers, each\nsuccessful deployment will generate a new version. Check here to see how tags\nare created and how versions, tags and environments work together.\n\n\nSemantic Versioning Overview#\n\nSemantic versioning is structured as MAJOR.MINOR.PATCH:\n\n * MAJOR: Introduces breaking changes.\n * MINOR: Adds new, backward-compatible features.\n * PATCH: Makes backward-compatible bug fixes.\n\n\nAdvantages of Semantic Versioning with Tags#\n\n 1. Clarity and Communication: Provides explicit guidelines on version\n    progression, facilitating clear communication across the development team\n    and stakeholders.\n 2. Backward Compatibility: Aids in maintaining compatibility and understanding\n    the implications of new updates.\n 3. Issue Tracking: Simplifies the process of tracking bugs and changes back to\n    specific releases.\n 4. Dependency Management: Crucial for effectively managing dependencies,\n    particularly in complex projects.\n\n\nVersion Rollback And Roll-forward#\n\nYou can rollback or roll-forward an application's version on Zephyr's dashboard\nand Chrome Extension towards a tag or a specific environment.\n\nYou can read more about how tag rules are created and how to create an\nenvironment to have a custom domain in other sections of our documnetation.\n\n\nDashboard#\n\n 1. Navigate to Zephyr's dashboard, sign in to an organization and find the\n    application you'd like to make changes to under Applications page.\n 2. Next click on Versions and scroll down to the Versions history.\n 3. Select a version and click on Deploy. You can verify whether it is a version\n    you'd like to promote by clicking on its link.\n 4. Select either a specific Tag or an Environment on the pop up.\n 5. Type in Deploy in the last input field and click on Yes, I am sure to\n    confirm the changes.\n\nCustom Domain\n\nIf you want to rollback or roll-forward a version towards a custom domain, you\ncan know more by walking through how to configure custom domain on Zephyr.\n\n\nTag Management#\n\nTo streamline the tagging process and ensure seamless integration with\ncontinuous integration and delivery (CI/CD) pipelines, Zephyr adopts specific\nrules for generating tags based on branch names during CI processes. This\napproach not only automates tag creation but also aligns with the development\nworkflow to accurately reflect the state of the software at any given point.\n\n\nHow Tags are created#\n\nAuto-generated#\n\nOn your first successful build, we find your branch name to auto-create a tag.\n\nAfter the first successful build, each build's version fits in thiscriteria will\nbe attached as latest version under this tag.\n\nManually created on Dashboard#\n\nOn Zephyr's Dashboard, you can find Tags under each application's Settings page.\n\nAfter clicking on Create Tag, you will need to input a Tag name and choose rules\nunder Tag conditions. Currently four related rule sets are available:\n\nYou can select a combination of rule set by clicking on + Add under Tag\nconditions.\n\nHow will a combination of tag rules work with deployment\n\nTake an example, you just created a new tag rule with 3 rules:\n\n * Username: Zack\n * Branch: fix-ui\n * Version: 200\n * is-CI: true\n\nZack's deployment, version 200 under the branch \"fix-ui\" will be locked into\nthis tag. Since the version rule is set to a fixed version.\n\nEdit existing tags#\n\nUnder application's Settings page select Tags and then the desired Tag name you\nwant to edit.\n\nClick on + Add button to add new rules, edit or delete pre-existing rules.\n\n\nTagging Strategy in CI#\n\nWhen code is pushed through a CI pipeline, tags are dynamically assigned based\non the branch from which the push originates:\n\n * master or main branches: Automatically tagged as latest. This tag is used for\n   the most stable, production-ready version of the application.\n * development branch: Assigned the next tag. This is used for pre-release\n   versions that may still be under active development but are stable enough for\n   testing purposes.\n * Other branches: Receive a tag that matches the branch name. This allows for\n   unique identification of builds coming from feature branches or other\n   non-standard development paths.\n\n\nNon-CI Tagging Considerations#\n\nFor manual pushes (i.e., those not done through a CI pipeline), the tagging\nformat incorporates the branch name followed by the username of the developer\nwho made the push. This format is particularly useful for:\n\n * Traceability: Allows teams to easily trace back versions to specific\n   developers, enhancing accountability and understanding of changes made.\n * Collaborative Development: Supports collaborative environments where multiple\n   developers may be working on different aspects of the project simultaneously.\n\nThese tagging strategies ensure that every build on Zephyr can be uniquely\nidentified and correlated with its source, enhancing both the development\nprocess and version control.","_html":"<h1 id=\"versioning-tags-and-environments\">Versioning, Tags and Environments<a aria-hidden=\"true\" href=\"#versioning-tags-and-environments\">#</a></h1>\n<p>Zephyr utilizes familiar versioning concepts by adopting <a href=\"https://semver.org/\" target=\"_blank\" rel=\"noopener noreferrer\">SemVer</a> (Semantic Versioning) as its foundational versioning methodology, ensuring a systematic and meaningful progression of project versions.</p>\n<p>Applications deployed through Zephyr can have an unlimited number of versions. After you configure Zephyr's npm plugin in your build tool, or bundlers, <em><strong>each successful deployment will generate a new version</strong></em>. Check <a href=\"#how-tags-are-created\">here to see how tags are created</a> and <a href=\"#\">how versions, tags and environments work together</a>.</p>\n<h2 id=\"semantic-versioning-overview\">Semantic Versioning Overview<a aria-hidden=\"true\" href=\"#semantic-versioning-overview\">#</a></h2>\n<p>Semantic versioning is structured as <code>MAJOR.MINOR.PATCH</code>:</p>\n<ul>\n<li><strong>MAJOR:</strong> Introduces breaking changes.</li>\n<li><strong>MINOR:</strong> Adds new, backward-compatible features.</li>\n<li><strong>PATCH:</strong> Makes backward-compatible bug fixes.</li>\n</ul>\n<h2 id=\"advantages-of-semantic-versioning-with-tags\">Advantages of Semantic Versioning with Tags<a aria-hidden=\"true\" href=\"#advantages-of-semantic-versioning-with-tags\">#</a></h2>\n<ol>\n<li><strong>Clarity and Communication:</strong> Provides explicit guidelines on version progression, facilitating clear communication across the development team and stakeholders.</li>\n<li><strong>Backward Compatibility:</strong> Aids in maintaining compatibility and understanding the implications of new updates.</li>\n<li><strong>Issue Tracking:</strong> Simplifies the process of tracking bugs and changes back to specific releases.</li>\n<li><strong>Dependency Management:</strong> Crucial for effectively managing dependencies, particularly in complex projects.</li>\n</ol>\n<h2 id=\"version-rollback-and-roll-forward\">Version Rollback And Roll-forward<a aria-hidden=\"true\" href=\"#version-rollback-and-roll-forward\">#</a></h2>\n<p>You can rollback or roll-forward an application's version on Zephyr's <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">dashboard</a> and <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome Extension</a> towards a tag or a specific environment.</p>\n<p>You can read more about <a href=\"#how-tags-are-created\">how tag rules are created</a> and <a href=\"/how-to/environments\">how to create an environment to have a custom domain</a> in other sections of our documnetation.</p>\n<h3 id=\"dashboard\">Dashboard<a aria-hidden=\"true\" href=\"#dashboard\">#</a></h3>\n<ol>\n<li>Navigate to Zephyr's dashboard, sign in to an organization and find the application you'd like to make changes to under <strong>Applications</strong> page.</li>\n<li>Next click on <strong>Versions</strong> and scroll down to the <strong>Versions history</strong>.</li>\n<li>Select a version and click on <strong>Deploy</strong>. You can verify whether it is a version you'd like to promote by clicking on its link.</li>\n<li>Select either a specific <strong>Tag</strong> or an <strong>Environment</strong> on the pop up.</li>\n<li>Type in <strong>Deploy</strong> in the last input field and click on <strong>Yes, I am sure</strong> to confirm the changes.</li>\n</ol>\n<div><div>Custom Domain</div><div>\n<p>If you want to rollback or roll-forward a version towards a custom domain, you can know more by walking through <a href=\"/how-to/environments\">how to configure custom domain on Zephyr</a>.</p>\n</div></div>\n<h2 id=\"tag-management\">Tag Management<a aria-hidden=\"true\" href=\"#tag-management\">#</a></h2>\n<p>To streamline the tagging process and ensure seamless integration with continuous integration and delivery (CI/CD) pipelines, Zephyr adopts specific rules for generating tags based on branch names during CI processes. This approach not only automates tag creation but also aligns with the development workflow to accurately reflect the state of the software at any given point.</p>\n<h3 id=\"how-tags-are-created\">How Tags are created<a aria-hidden=\"true\" href=\"#how-tags-are-created\">#</a></h3>\n<h4 id=\"auto-generated\">Auto-generated<a aria-hidden=\"true\" href=\"#auto-generated\">#</a></h4>\n<p>On your first successful build, we find your branch name to auto-create a tag.</p>\n<p>After the first successful build, each build's version fits in thiscriteria will be attached as latest version under this tag.</p>\n<h4 id=\"manually-created-on-dashboard\">Manually created on Dashboard<a aria-hidden=\"true\" href=\"#manually-created-on-dashboard\">#</a></h4>\n<p>On <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr's Dashboard</a>, you can find <strong>Tags</strong> under each application's <strong>Settings</strong> page.</p>\n<p>After clicking on <strong>Create Tag</strong>, you will need to input a <strong>Tag name</strong> and choose rules under <strong>Tag conditions</strong>. Currently four related rule sets are available:</p>\n\n<p>You can select a combination of rule set by clicking on <strong>+ Add</strong> under <strong>Tag conditions</strong>.</p>\n<details><summary>How will a combination of tag rules work with deployment</summary><div>\n<p>Take an example, you just created a new tag rule with 3 rules:</p>\n<ul>\n<li>Username: Zack</li>\n<li>Branch: fix-ui</li>\n<li>Version: 200</li>\n<li>is-CI: true</li>\n</ul>\n<p>Zack's deployment, version 200 under the branch \"fix-ui\" will be locked into this tag. Since the version rule is set to a fixed version.\n</p></div></details>\n<h4 id=\"edit-existing-tags\">Edit existing tags<a aria-hidden=\"true\" href=\"#edit-existing-tags\">#</a></h4>\n<p>Under application's <strong>Settings</strong> page select <strong>Tags</strong> and then the desired <strong>Tag name</strong> you want to edit.</p>\n<p>Click on <strong>+ Add</strong> button to add new rules, edit or delete pre-existing rules.</p>\n<h3 id=\"tagging-strategy-in-ci\">Tagging Strategy in CI<a aria-hidden=\"true\" href=\"#tagging-strategy-in-ci\">#</a></h3>\n<p>When code is pushed through a CI pipeline, tags are dynamically assigned based on the branch from which the push originates:</p>\n<ul>\n<li><strong><code>master</code> or <code>main</code> branches:</strong> Automatically tagged as <code>latest</code>. This tag is used for the most stable, production-ready version of the application.</li>\n<li><strong><code>development</code> branch:</strong> Assigned the <code>next</code> tag. This is used for pre-release versions that may still be under active development but are stable enough for testing purposes.</li>\n<li><strong>Other branches:</strong> Receive a tag that matches the branch name. This allows for unique identification of builds coming from feature branches or other non-standard development paths.</li>\n</ul>\n<h3 id=\"non-ci-tagging-considerations\">Non-CI Tagging Considerations<a aria-hidden=\"true\" href=\"#non-ci-tagging-considerations\">#</a></h3>\n<p>For manual pushes (i.e., those not done through a CI pipeline), the tagging format incorporates the branch name followed by the username of the developer who made the push. This format is particularly useful for:</p>\n<ul>\n<li><strong>Traceability:</strong> Allows teams to easily trace back versions to specific developers, enhancing accountability and understanding of changes made.</li>\n<li><strong>Collaborative Development:</strong> Supports collaborative environments where multiple developers may be working on different aspects of the project simultaneously.</li>\n</ul>\n<p>These tagging strategies ensure that every build on Zephyr can be uniquely identified and correlated with its source, enhancing both the development process and version control.</p>","routePath":"/how-to/versioning-tags","lang":"en-US","toc":[{"text":"Semantic Versioning Overview","id":"semantic-versioning-overview","depth":2,"charIndex":507},{"text":"Advantages of Semantic Versioning with Tags","id":"advantages-of-semantic-versioning-with-tags","depth":2,"charIndex":733},{"text":"Version Rollback And Roll-forward","id":"version-rollback-and-roll-forward","depth":2,"charIndex":1284},{"text":"Dashboard","id":"dashboard","depth":3,"charIndex":1612},{"text":"Tag Management","id":"tag-management","depth":2,"charIndex":2308},{"text":"How Tags are created","id":"how-tags-are-created","depth":3,"charIndex":2705},{"text":"Auto-generated","id":"auto-generated","depth":4,"charIndex":2728},{"text":"Manually created on Dashboard","id":"manually-created-on-dashboard","depth":4,"charIndex":2953},{"text":"Edit existing tags","id":"edit-existing-tags","depth":4,"charIndex":3632},{"text":"Tagging Strategy in CI","id":"tagging-strategy-in-ci","depth":3,"charIndex":3825},{"text":"Non-CI Tagging Considerations","id":"non-ci-tagging-considerations","depth":3,"charIndex":4488}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/how-to/versioning-tags.mdx","_relativePath":"how-to/versioning-tags.mdx"},{"id":53,"title":"","content":"Zephyr Cloud is a platform to accelerate your development workflow by providing\na simple way to deploy and manage your applications - cloud agnostic, framework\nagnostic and bundler agnostic.\n\nUnder the hood, Zephyr takes a snapshot of your application and deploy it to the\nedge in sub-seconds, allowing you to preview and test your application in a\nreal-world environment before deploying it to production - make \"testing in\nproduction\" a reality. Whenever the version of your application is ready for\nproduction, you can promote it to production with a single click.\n\nWhether you're are a small team or a large enterprise, Zephyr Cloud is designed\nto remove the ambiguity between different cloud providers, helping you build\nwith speed and freedom.\n\nZephyr Cloud is now in public beta. If you experience any issues, do jump in our\nDiscord and let us know (we hang out here!).\n\n\nStart#\n\n\nMain Features#\n\nSome of Zephyr Cloud's features include:\n\nSee a list of frameworks, bundlers and cloud providers here\n\n\nPre-Requisite Knowledge#\n\nWe don't assume you know everything about cloud or edge. Whenever we mention a\nconcept or a piece of software, we aim to provide relevant links wherever\npossible. Our documentation site is Open Sourced, if you wish to contribute, do\ncheck out our Github and open any issues/pull requests.\n\nAt the same time, it'd be useful to have a basic understanding of modern\nfrontend frameworks such as React, running commands in terminals, node, package\nmanagement solutions such as npm and the concept (or usage) of monorepo. If\nyou're new to web development, we recommend you to check out MDN Web Docs for a\ncomprehensive guide. On the other hand, if you want to know more about\nMicro-Frontends and Module Federation, our Module Federation Deep Dive is\nprepared for you.\n\nLast but not least, welcome to dive into the learning section when you are ready\nto dive into Micro-Frontends, it's terminologies and configuration.\n\n\nRecipes#\n\nSee more recipes","_html":"\n\n\n<p><strong>Zephyr Cloud</strong> is a platform to accelerate your development workflow by providing a simple way to deploy and manage your applications - cloud agnostic, framework agnostic and bundler agnostic.</p>\n<p>Under the hood, Zephyr takes a snapshot of your application and deploy it to the edge in sub-seconds, allowing you to preview and test your application in a real-world environment before deploying it to production - make \"testing in production\" a reality. Whenever the version of your application is ready for production, you can promote it to production with a single click.</p>\n<p>Whether you're are a small team or a large enterprise, Zephyr Cloud is designed to remove the ambiguity between different cloud providers, helping you build with speed and freedom.</p>\n<p>Zephyr Cloud is now in public beta. If you experience any issues, do jump in our <a href=\"https://zephyr-cloud.io/discord\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a> and let us know (we hang out here!).</p>\n<h2 id=\"start\">Start<a aria-hidden=\"true\" href=\"#start\">#</a></h2>\n\n<h2 id=\"main-features\">Main Features<a aria-hidden=\"true\" href=\"#main-features\">#</a></h2>\n<p>Some of Zephyr Cloud's features include:</p>\n\n<p>See a list of frameworks, bundlers and cloud providers <a href=\"/supported\">here</a></p>\n\n<h2 id=\"pre-requisite-knowledge\">Pre-Requisite Knowledge<a aria-hidden=\"true\" href=\"#pre-requisite-knowledge\">#</a></h2>\n<p>We don't assume you know everything about cloud or edge. Whenever we mention a concept or a piece of software, we aim to provide relevant links wherever possible. Our documentation site is Open Sourced, if you wish to contribute, do check out our <a href=\"https://github.com/ZephyrCloudIO/docs\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a> and open any issues/pull requests.</p>\n<p>At the same time, it'd be useful to have a basic understanding of modern frontend frameworks such as <a href=\"https://react.dev\" target=\"_blank\" rel=\"noopener noreferrer\">React</a>, running commands in terminals, <a href=\"https://nodejs.org/en\" target=\"_blank\" rel=\"noopener noreferrer\">node</a>, package management solutions such as <a href=\"https://docs.npmjs.com/cli/v10/configuring-npm/install\" target=\"_blank\" rel=\"noopener noreferrer\">npm</a> and the concept (or usage) of <a href=\"https://monorepo.tools/\" target=\"_blank\" rel=\"noopener noreferrer\">monorepo</a>. If you're new to web development, we recommend you to check out <a href=\"https://developer.mozilla.org/en-US/docs/Web\" target=\"_blank\" rel=\"noopener noreferrer\">MDN Web Docs</a> for a comprehensive guide. On the other hand, if you want to know more about Micro-Frontends and <a href=\"https://module-federation.io\" target=\"_blank\" rel=\"noopener noreferrer\">Module Federation</a>, our <a href=\"/learning/concepts/module-federation#deep-dive\">Module Federation Deep Dive</a> is prepared for you.</p>\n<p>Last but not least, welcome to dive into the <a href=\"/learning\">learning section</a> when you are ready to dive into Micro-Frontends, it's terminologies and configuration.</p>\n<h2 id=\"recipes\">Recipes<a aria-hidden=\"true\" href=\"#recipes\">#</a></h2>\n\n<p><a href=\"/recipes\">See more recipes</a></p>\n\n","routePath":"/","lang":"en-US","toc":[{"text":"Start","id":"start","depth":2,"charIndex":878},{"text":"Main Features","id":"main-features","depth":2,"charIndex":887},{"text":"Pre-Requisite Knowledge","id":"pre-requisite-knowledge","depth":2,"charIndex":1007},{"text":"Recipes","id":"recipes","depth":2,"charIndex":1947}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/index.mdx","_relativePath":"index.mdx"},{"id":54,"title":"Learning","content":"#\n\nHanging there!\n\nDocs coming soon...","_html":"<h1 id=\"learning\">Learning<a aria-hidden=\"true\" href=\"#learning\">#</a></h1>\n<div><div>Hanging there!</div><div>\n<p>Docs coming soon...</p>\n</div></div>","routePath":"/learning","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/learning.mdx","_relativePath":"learning.mdx"},{"id":55,"title":"Architecture - How Zephyr works","content":"#\n\nZephyr integrate with your existing build process, finish deployment seamlessly\nupon build, and remove the need to setup proxy tunnel, or wait for deployment in\norder to share a preview URL.\n\nBut when we run a command npm run build, does it interfere with bundler's build\nprocess and influence build output? How did it able to return preview URLs once\nthe build is finished on your local terminal? What happens when we have an\none-liner config and how could this one line achieve so much?\n\n\n\nWe will talk about bundlers in this article to clear some confusions, answer the\nquestions we get asked the most: How Zephyr works? and explaining how Zephyr\nbuild and deploy your application to the edge in millie-seconds.\n\n\nBuilding without interfering#\n\n> Silence is a virtue\n\nFor all the plugins we've built to support a framework for deployment, we follow\na similar pattern: starting with gathering your application's details and\nentering a series of lifecycle events after initiating Zephyr Agent.\n\nZephyr agent works on the bundler level, rather than a framework level, hence\nachieving framework agnostic deployment is a much faster process when it comes\nto a bundler we are already supporting. You can see a list of currently\nsupported frameworks, bundlers and what's under development on supported page.\n\n\n\n\nLifecycle Events#\n\nZephyr agent starts here.\n\nWhen we are collecting your application's details, we are understanding your\ngithub's organization, repository name and branch name to see if you have the\ncorrect access on Zephyr Cloud to deploy this application through our platform.\nWe are also understanding your bundler's configuration details, applications'\ndependencies, name and versions.\n\nWe also aim understand whether this is an application using micro-frontend: is\nit a provider (in other words: remotes) to provide sub-modules for host app, or\na consumer (in other word, a shell or a host) to consume remotes, or they are\nboth. If they are, we move to the next to understand the relationships between\nyour providers and consumers.\n\n\nBundling#\n\nThe next step is letting bundlers build your application and Zephyr joins the\nbundler at a later stage after build process is finished.\n\nAfter bundlers finish building, we will be able to understand different asset\ntypes of your applications and construct a correct asset map for deployment.\n\nWhy asset map is needed?\n\nDifferent bundlers has different methods in understanding file content to either\nuse loaders or minify code later on.\n\nTake Webpack as an examples, several source types will be detected in the\noverall build output and determine whether it needs to be cached for faster\naccess, or it needs to be processed as raw source.\n\nWhen you are building your application for the first time, we will hash your\nassets and save both the hash and assets once the asset map is constructed and\nmapped. After your first build, whenever you are building again we will be\ncomparing your assets against what's previous build and only update the hash\nresults to create a snapshot of your application.\n\n\nDeploying#\n\nWhether you are deploying to our managed cloud, or on your own cloud, Zephyr\nwill employ a series of capability providers to facilitate deployment, typically\nin the form of AWS Lambda function, or Cloudflare workers.\n\nThese capability providers will be deployed, and updated in our managed cloud as\nwell as in your cloud. They will analyze the file types, hashed assets and then\nfurther on handling the deployment.\n\nThe assets will be updated and deployed to the cloud's storage.\n\nDifferent cloud provider's implementation specific varies.","_html":"<h1 id=\"architecture---how-zephyr-works\">Architecture - How Zephyr works<a aria-hidden=\"true\" href=\"#architecture---how-zephyr-works\">#</a></h1>\n<p>Zephyr integrate with your existing build process, finish deployment seamlessly upon build, and remove the need to setup proxy tunnel, or wait for deployment in order to share a preview URL.</p>\n<p>But when we run a command <code>npm run build</code>, does it interfere with bundler's build process and influence build output? How did it able to return preview URLs once the build is finished on your local terminal? What happens when we have an one-liner config and how could this one line achieve so much?</p>\n<pre><code meta=\"\">// ...import statement\n\nexport default withZephyr()({\n  context: __dirname,\n  entry: {\n    main: './src/main.jsx',\n  },\n  //...rest of the code\n});\n</code></pre>\n<p>We will talk about bundlers in this article to clear some confusions, answer the questions we get asked the most: <strong>How Zephyr works?</strong> and explaining how Zephyr build and deploy your application to the edge in millie-seconds.</p>\n<h2 id=\"building-without-interfering\">Building without interfering<a aria-hidden=\"true\" href=\"#building-without-interfering\">#</a></h2>\n<blockquote>\n<p>Silence is a virtue</p>\n</blockquote>\n<p>For all the plugins we've built to support a framework for deployment, we follow a similar pattern: starting with gathering your application's details and entering a series of lifecycle events after initiating Zephyr Agent.</p>\n<p>Zephyr agent works on the bundler level, rather than a framework level, hence achieving <em>framework agnostic</em> deployment is a much faster process when it comes to a bundler we are already supporting. You can see a list of currently supported <a href=\"/supported#framework\">frameworks</a>, <a href=\"/supported#bundlers\">bundlers</a> and what's under development on <a href=\"/supported\">supported page</a>.</p>\n<p><img src=\"/architecture-v2.png\" alt=\"How Zephyr works\"></img></p>\n<h3 id=\"lifecycle-events\">Lifecycle Events<a aria-hidden=\"true\" href=\"#lifecycle-events\">#</a></h3>\n<p>Zephyr agent starts here.</p>\n<p>When we are collecting your application's details, we are understanding your github's organization, repository name and branch name to see if you have the correct access on Zephyr Cloud to deploy this application through our platform. We are also understanding your bundler's configuration details, applications' dependencies, name and versions.</p>\n<p>We also aim understand whether this is an application using <strong>micro-frontend</strong>: is it a <strong>provider</strong> (in other words: <strong>remotes</strong>) to provide sub-modules for host app, or a <strong>consumer</strong> (in other word, a <strong>shell</strong> or a <strong>host</strong>) to consume remotes, or they are both. If they are, we move to the next to understand the relationships between your providers and consumers.</p>\n<h3 id=\"bundling\">Bundling<a aria-hidden=\"true\" href=\"#bundling\">#</a></h3>\n<p>The next step is letting bundlers build your application and Zephyr joins the bundler at a later stage after build process is finished.</p>\n<p>After bundlers finish building, we will be able to understand different asset types of your applications and construct a correct asset map for deployment.</p>\n<div><div>Why asset map is needed?</div><div>\n<p>Different bundlers has different methods in understanding file content to either use loaders or minify code later on.</p>\n<p>Take Webpack as an examples, several source types will be detected in the overall build output and determine whether it needs to be cached for faster access, or it needs to be processed as raw source.\n</p></div></div>\n<p>When you are building your application for the first time, we will hash your assets and save both the hash and assets once the asset map is constructed and mapped. After your first build, whenever you are building again we will be comparing your assets against what's previous build and <strong>only</strong> update the hash results to create a snapshot of your application.</p>\n<h3 id=\"deploying\">Deploying<a aria-hidden=\"true\" href=\"#deploying\">#</a></h3>\n<p>Whether you are deploying to our managed cloud, or on your own cloud, Zephyr will employ a series of capability providers to facilitate deployment, typically in the form of AWS Lambda function, or Cloudflare workers.</p>\n<p>These capability providers will be deployed, and updated in our managed cloud as well as in your cloud. They will analyze the file types, hashed assets and then further on handling the deployment.</p>\n<p>The assets will be updated and deployed to the cloud's storage.</p>\n<p><em>Different cloud provider's implementation specific varies.</em></p>","routePath":"/learning/concepts/architecture","lang":"en-US","toc":[{"text":"Building without interfering","id":"building-without-interfering","depth":2,"charIndex":719},{"text":"Lifecycle Events","id":"lifecycle-events","depth":3,"charIndex":1310},{"text":"Bundling","id":"bundling","depth":3,"charIndex":2051},{"text":"Deploying","id":"deploying","depth":3,"charIndex":3062}],"domain":"","frontmatter":{"0":{"title":"Architecture"},"1":{"description":"How Zephyr works under the hood"}},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/learning/concepts/architecture.mdx","_relativePath":"learning/concepts/architecture.mdx"},{"id":56,"title":"What does edge even mean?","content":"#","_html":"<h1 id=\"what-does-edge-even-mean\">What does edge even mean?<a aria-hidden=\"true\" href=\"#what-does-edge-even-mean\">#</a></h1>","routePath":"/learning/concepts/edge","lang":"en-US","toc":[],"domain":"","frontmatter":{"title":"What does edge even mean?","description":"Zephyr Cloud Documentation - A comprehensive explaination of \"Edge\""},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/learning/concepts/edge.mdx","_relativePath":"learning/concepts/edge.mdx"},{"id":57,"title":"Micro-Frontend","content":"#\n\nHanging there!\n\nDocs coming soon...","_html":"<h1 id=\"micro-frontend\">Micro-frontend<a aria-hidden=\"true\" href=\"#micro-frontend\">#</a></h1>\n<div><div>Hanging there!</div><div>\n<p>Docs coming soon...</p>\n</div></div>","routePath":"/learning/concepts/micro-frontend","lang":"en-US","toc":[],"domain":"","frontmatter":{"title":"Micro-Frontend","description":"Zephyr Cloud Documentation - What's micro-frontend? What's their use cases? Who needs them?"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/learning/concepts/micro-frontend.mdx","_relativePath":"learning/concepts/micro-frontend.mdx"},{"id":58,"title":"Module Federation","content":"#\n\nPrior Knowledge\n * If you are using Rspack or Webpack in production - great. If you are joining\n   a new company, or would like to learn webpack from scratch. We recommend you\n   to go through our learn webpack by creating a react app with webpack.\n\n\nDeep dive#\n\nHanging there!\n\nDocs coming soon...\n\n\nMF 1.0 VS. MF 2.0#\n\nAppreciation\n * Huge shout of to Hanric Zhang and Zack Jackson because this section is\n   adjusted based on their Understanding Module Federation: A Deep Dive.","_html":"<h1 id=\"module-federation\">Module Federation<a aria-hidden=\"true\" href=\"#module-federation\">#</a></h1>\n<details><summary>Prior Knowledge</summary><div>\n<ul>\n<li>If you are using Rspack or Webpack in production - great. If you are joining a new company, or would like to learn <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">webpack</a> from scratch. We recommend you to go through our <a href=\"/learning/react-webpack\">learn webpack by creating a react app with webpack</a>.</li>\n</ul>\n</div></details>\n<h2 id=\"deep-dive\">Deep dive<a aria-hidden=\"true\" href=\"#deep-dive\">#</a></h2>\n<div><div>Hanging there!</div><div>\n<p>Docs coming soon...</p>\n</div></div>\n<h2 id=\"mf-10-vs-mf-20\">MF 1.0 VS. MF 2.0<a aria-hidden=\"true\" href=\"#mf-10-vs-mf-20\">#</a></h2>\n<div><div>Appreciation</div><div>\n<ul>\n<li>Huge shout of to <a href=\"https://x.com/2hea1\" target=\"_blank\" rel=\"noopener noreferrer\">Hanric Zhang</a> and <a href=\"https://x.com/ScriptedAlchemy\" target=\"_blank\" rel=\"noopener noreferrer\">Zack Jackson</a> because this section is adjusted based on their <a href=\"https://scriptedalchemy.medium.com/understanding-webpack-module-federation-a-deep-dive-efe5c55bf366\" target=\"_blank\" rel=\"noopener noreferrer\">Understanding Module Federation: A Deep Dive</a>.</li>\n</ul>\n</div></div>","routePath":"/learning/concepts/module-federation","lang":"en-US","toc":[{"text":"Deep dive","id":"deep-dive","depth":2,"charIndex":253},{"text":"MF 1.0 VS. MF 2.0","id":"mf-10-vs-mf-20","depth":2,"charIndex":303}],"domain":"","frontmatter":{"title":"Module Federation","description":"Zephyr Cloud Documentation - What's module federation? When does people need them? Why do they need it and it's use cases"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/learning/concepts/module-federation.mdx","_relativePath":"learning/concepts/module-federation.mdx"},{"id":59,"title":"Terminologies","content":"#\n\nHanging there!\n\nDocs coming soon...\n\n\nMicro-Frontends#\n\n\nModule Federation#\n\n\nConsumption Module (Host/Remote/Import)#\n\n\nExposed Module (Remote)#\n\n\nShared Module/Dependency#\n\n\nRemote Entry#","_html":"<h1 id=\"terminologies\">Terminologies<a aria-hidden=\"true\" href=\"#terminologies\">#</a></h1>\n<div><div>Hanging there!</div><div>\n<p>Docs coming soon...</p>\n</div></div>\n<h3 id=\"micro-frontends\">Micro-Frontends<a aria-hidden=\"true\" href=\"#micro-frontends\">#</a></h3>\n<h3 id=\"module-federation\">Module Federation<a aria-hidden=\"true\" href=\"#module-federation\">#</a></h3>\n<h3 id=\"consumption-module-hostremoteimport\">Consumption Module (Host/Remote/Import)<a aria-hidden=\"true\" href=\"#consumption-module-hostremoteimport\">#</a></h3>\n<h3 id=\"exposed-module-remote\">Exposed Module (Remote)<a aria-hidden=\"true\" href=\"#exposed-module-remote\">#</a></h3>\n<h3 id=\"shared-moduledependency\">Shared Module/Dependency<a aria-hidden=\"true\" href=\"#shared-moduledependency\">#</a></h3>\n<h3 id=\"remote-entry\">Remote Entry<a aria-hidden=\"true\" href=\"#remote-entry\">#</a></h3>","routePath":"/learning/concepts/terminologies","lang":"en-US","toc":[{"text":"Micro-Frontends","id":"micro-frontends","depth":3,"charIndex":40},{"text":"Module Federation","id":"module-federation","depth":3,"charIndex":59},{"text":"Consumption Module (Host/Remote/Import)","id":"consumption-module-hostremoteimport","depth":3,"charIndex":80},{"text":"Exposed Module (Remote)","id":"exposed-module-remote","depth":3,"charIndex":123},{"text":"Shared Module/Dependency","id":"shared-moduledependency","depth":3,"charIndex":150},{"text":"Remote Entry","id":"remote-entry","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/learning/concepts/terminologies.mdx","_relativePath":"learning/concepts/terminologies.mdx"},{"id":60,"title":"Learn webpack by creating a react app with webpack","content":"#\n\nHanging there!\n\nDocs coming soon...","_html":"<h1 id=\"learn-webpack-by-creating-a-react-app-with-webpack\">Learn webpack by creating a react app with webpack<a aria-hidden=\"true\" href=\"#learn-webpack-by-creating-a-react-app-with-webpack\">#</a></h1>\n<div><div>Hanging there!</div><div>\n<p>Docs coming soon...</p>\n</div></div>","routePath":"/learning/react-webpack","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/learning/react-webpack.mdx","_relativePath":"learning/react-webpack.mdx"},{"id":61,"title":"Other resources","content":"#\n\nHere are some other resources that you might find helpful.\n\n\nVideo resources#\n\n\nBlog posts#","_html":"<h1 id=\"other-resources\">Other resources<a aria-hidden=\"true\" href=\"#other-resources\">#</a></h1>\n<p>Here are some other resources that you might find helpful.</p>\n<h2 id=\"video-resources\">Video resources<a aria-hidden=\"true\" href=\"#video-resources\">#</a></h2>\n\n<h2 id=\"blog-posts\">Blog posts<a aria-hidden=\"true\" href=\"#blog-posts\">#</a></h2>\n","routePath":"/learning/resources","lang":"en-US","toc":[{"text":"Video resources","id":"video-resources","depth":2,"charIndex":63},{"text":"Blog posts","id":"blog-posts","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/learning/resources.mdx","_relativePath":"learning/resources.mdx"},{"id":62,"title":"Recipes","content":"#","_html":"<h1 id=\"recipes\">Recipes<a aria-hidden=\"true\" href=\"#recipes\">#</a></h1>\n","routePath":"/recipes","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes.mdx","_relativePath":"recipes.mdx"},{"id":63,"title":"Add Zephyr to an existing application","content":"#\n\nPrerequisites\n * We expect you to have finished our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=20\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\n\nIntegrating Zephyr into an Existing Application#\n\nIf you already have an application and wish to enhance it with Zephyr Cloud, we\nhave designed the integration process to be as straightforward as possible.\nHere's how you can seamlessly incorporate Zephyr into your existing setup:\n\n\n1. Add Zephyr as a dependency#\n\nInstall the package via NPM:\n\n\n2. Setting Up#\n\nWrap your existing configuration settings with the necessary modifications.\n\n\nBuilding the Application#\n\nInitiate the build process for your application to activate Zephyr. This action\nwill automatically launch your default browser and prompt you for login\ncredentials.\n\nOnce logged in, you can begin developing with Zephyr.\n\nRead more about Vite in React + Vite and Vite + Rspack + Webpack with Module\nFederation.","_html":"<h1 id=\"add-zephyr-to-existing-application\">Add Zephyr to existing application<a aria-hidden=\"true\" href=\"#add-zephyr-to-existing-application\">#</a></h1>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li>node >=20</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h2 id=\"integrating-zephyr-into-an-existing-application\">Integrating Zephyr into an Existing Application<a aria-hidden=\"true\" href=\"#integrating-zephyr-into-an-existing-application\">#</a></h2>\n<p>If you already have an application and wish to enhance it with Zephyr Cloud, we have designed the integration process to be as straightforward as possible. Here's how you can seamlessly incorporate Zephyr into your existing setup:</p>\n<h3 id=\"1-add-zephyr-as-a-dependency\">1. Add Zephyr as a dependency<a aria-hidden=\"true\" href=\"#1-add-zephyr-as-a-dependency\">#</a></h3>\n<p>Install the package via NPM:</p>\n\n<h3 id=\"2-setting-up\">2. Setting Up<a aria-hidden=\"true\" href=\"#2-setting-up\">#</a></h3>\n<p>Wrap your existing configuration settings with the necessary modifications.</p>\n\n<h3 id=\"building-the-application\">Building the Application<a aria-hidden=\"true\" href=\"#building-the-application\">#</a></h3>\n<p>Initiate the build process for your application to activate Zephyr. This action will automatically launch your default browser and prompt you for login credentials.</p>\n<p>Once logged in, you can begin developing with Zephyr.</p>\n<p>Read more about Vite in <a href=\"/recipes/react-vite\">React + Vite</a> and <a href=\"/recipes/vite-rspack-webpack-mf\">Vite + Rspack + Webpack with Module Federation</a>.</p>","routePath":"/recipes/existing-app","lang":"en-US","toc":[{"text":"Integrating Zephyr into an Existing Application","id":"integrating-zephyr-into-an-existing-application","depth":2,"charIndex":302},{"text":"1. Add Zephyr as a dependency","id":"1-add-zephyr-as-a-dependency","depth":3,"charIndex":585},{"text":"2. Setting Up","id":"2-setting-up","depth":3,"charIndex":648},{"text":"Building the Application","id":"building-the-application","depth":3,"charIndex":742}],"domain":"","frontmatter":{"title":"Add Zephyr to an existing application","description":"Zephyr Cloud Documentation - How to add Zephyr to existing application, using React, webpack and Nx as an example"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/existing-app.mdx","_relativePath":"recipes/existing-app.mdx"},{"id":64,"title":"Migrate an Nx workspace from Webpack to Rspack","content":"#\n\nIf you have an Nx workspace setup for Micro-Frontend application in place with\nWebpack and curious about how to migrate to Rspack and use Zephyr - this\ndocumentation is for you.\n\nPrerequisites\n * You have a pre-existing Nx workspace with React based on Webpack\n * We expect you to have finished our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=20\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\n\nVideo Walk-through#\n\n\nExample in Code#\n\nAn example contains line-by-line changes in our example repository.\n\n\nInstallation#\n\nWithin your project directory, run below commands to install required packages\nfor rspack and Zephyr's npm package:\n\n\n\n\nChange import path#\n\n 1. module-federation.config.ts\n\nEvery module-federation.config.ts's import needs to be replaced by\n\n\n\n 2. webpack.config.ts and webpack.config.prod.ts\n\nRename webpack.config.ts to rspack.config.ts and change all import path to\nbelow. While changing the import path, we will also add Zephyr's plugin to build\nconfiguration.\n\n\n\nRename all webpack.config.prod.ts to rspack.config.prod.ts and within the file\n(of each remotes), change the import path:\n\n\n\nFor Host application's rspack.config.prod.ts, you will need to do the same\nchanges as rspack.config.ts:\n\n\n\n\nEdit project.json#\n\nIn every project.json, you will need to edit below changes:\n\n 1. Change build executor to @nx/rspack:rspack 2. Add \"target\":\"web\" to build\n    options\n\n 2. Under build's options -- change all\n    \"webpackConfig\":\"apps/{appName}/webpack.config.ts\" to \"rspackConfig\":\n    \"apps/{appName}/rspack.config.ts\"\n\n 3. Under configurations's production config -- change all\n    \"webpackConfig\":\"apps/{appName}/webpack.config.prod.ts\" to \"rspackConfig\":\n    \"apps/{appName}/rspack.config.prod.ts\"\n\n 4. Edit executor in serve -- change @nx/react:module-federation-dev-server to\n    \"@nx/rspack:module-federation-dev-server\"\n\n\n\n\nAdd package.json#\n\nIn each of the applications, hosts or remotes, it will need a package.json file\nwith name and version field in order for Zephyr to map the remote's name.\n\nIf you are naming host application in Module Federation configuration like:\n\n\n\nYou will need a package.json like so within the host's folder:\n\n\n\n\nDeploy through Zephyr#\n\nBefore we deploy to Zephyr, make sure:\n\n * this repository is a git repository\n * Have pre-existing commit hash\n * Have a remote.origin.url\n\nSince this is a Micro-Frontend application, you will need to build the remote\nfirst by running each of these command in sequence. Remotes must be built first\nfor Zephyr to map them in host applications. Read more.\n\nFirst:\n\n\n\nSecond:\n\n\n\nThird:\n\n","_html":"<h1 id=\"migrate-an-nx-workspace-from-webpack-to-rspack\">Migrate an Nx workspace from Webpack to Rspack<a aria-hidden=\"true\" href=\"#migrate-an-nx-workspace-from-webpack-to-rspack\">#</a></h1>\n<p>If you have an Nx workspace setup for Micro-Frontend application in place with Webpack and curious about how to migrate to Rspack and <strong>use Zephyr</strong> - this documentation is for you.</p>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>You have a pre-existing Nx workspace with React based on Webpack</li>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li>node >=20</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h3 id=\"video-walk-through\">Video Walk-through<a aria-hidden=\"true\" href=\"#video-walk-through\">#</a></h3>\n\n<h2 id=\"example-in-code\">Example in Code<a aria-hidden=\"true\" href=\"#example-in-code\">#</a></h2>\n<p>An example contains line-by-line changes <a href=\"https://github.com/ZephyrCloudIO/zephyr-examples/pull/43/files#diff-ae97963da9251d9d7d435301f6a6061201fdf9382ea69d647862e6e51127251a\" target=\"_blank\" rel=\"noopener noreferrer\">in our example repository</a>.</p>\n<h3 id=\"installation\">Installation<a aria-hidden=\"true\" href=\"#installation\">#</a></h3>\n<p>Within your project directory, run below commands to install required packages for <code>rspack</code> and Zephyr's npm package:</p>\n<pre><code meta=\"\">npm i @nx/rspack @rspack/dev-server zephyr-rspack-plugin@latest --force\n</code></pre>\n<h3 id=\"change-import-path\">Change import path<a aria-hidden=\"true\" href=\"#change-import-path\">#</a></h3>\n<ol>\n<li><code>module-federation.config.ts</code></li>\n</ol>\n<p>Every <code>module-federation.config.ts</code>'s import needs to be replaced by</p>\n<pre><code meta=\"\">//  \n\n</code></pre>\n<ol start=\"2\">\n<li><code>webpack.config.ts</code> and <code>webpack.config.prod.ts</code></li>\n</ol>\n<p>Rename <code>webpack.config.ts</code> to <code>rspack.config.ts</code> and change all import path to below. While changing the import path, we will also add Zephyr's plugin to build configuration.</p>\n<pre><code meta=\"\">// \n// \n// \n\n\n // import Zephyr\n\n\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n// Nx plugins for webpack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config, { dts: false }),\n  withZephyr() // add zephyr in plugin\n);\n</code></pre>\n<p>Rename all <code>webpack.config.prod.ts</code> to <code>rspack.config.prod.ts</code> and within the file (<strong>of each remotes</strong>), change the import path:</p>\n<pre><code meta=\"\">export default require('./rspack.config');\n</code></pre>\n<p>For <strong>Host application</strong>'s <code>rspack.config.prod.ts</code>, you will need to do the same changes as <code>rspack.config.ts</code>:</p>\n<pre><code meta=\"\">\n// \n// \n// \n// \n\n\n\n\n\n\nconst prodConfig: ModuleFederationConfig = {\n  ...baseConfig,\n  /*\n   * Remote overrides for production.\n   * Each entry is a pair of a unique name and the URL where it is deployed.\n   *\n   * e.g.\n   * remotes: [\n   *   ['app1', 'http://app1.example.com'],\n   *   ['app2', 'http://app2.example.com'],\n   * ]\n   *\n   * You can also use a full path to the remoteEntry.js file if desired.\n   *\n   * remotes: [\n   *   ['app1', 'http://example.com/path/to/app1/remoteEntry.js'],\n   *   ['app2', 'http://example.com/path/to/app2/remoteEntry.js'],\n   * ]\n   */\n  remotes: [\n    ['remote1', 'http://localhost:4201/'],\n    ['remote2', 'http://localhost:4202/'],\n  ],\n};\n// Nx plugins for webpack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(prodConfig, { dts: false }),\n  withZephyr()\n);\n</code></pre>\n<h3 id=\"edit-projectjson\">Edit project.json<a aria-hidden=\"true\" href=\"#edit-projectjson\">#</a></h3>\n<p>In every <code>project.json</code>, you will need to edit below changes:</p>\n<ol>\n<li>\n<p>Change build executor to <code>@nx/rspack:rspack</code>\n<strong>2. Add <code>\"target\":\"web\"</code> to build options</strong></p>\n</li>\n<li>\n<p>Under <code>build</code>'s <code>options</code> -- change all <code>\"webpackConfig\":\"apps/{appName}/webpack.config.ts\"</code> to <code>\"rspackConfig\": \"apps/{appName}/rspack.config.ts\"</code></p>\n</li>\n<li>\n<p>Under <code>configurations</code>'s <code>production</code> config -- change all <code>\"webpackConfig\":\"apps/{appName}/webpack.config.prod.ts\"</code> to <code>\"rspackConfig\": \"apps/{appName}/rspack.config.prod.ts\"</code></p>\n</li>\n<li>\n<p>Edit <code>executor</code> in <code>serve</code> -- change <code>@nx/react:module-federation-dev-server</code> to <code>\"@nx/rspack:module-federation-dev-server\"</code></p>\n</li>\n</ol>\n<pre><code meta=\"\">{\n  \"name\": \"remote1\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"sourceRoot\": \"apps/remote1/src\",\n  \"projectType\": \"application\",\n  \"tags\": [],\n  \"targets\": {\n    \"build\": {\n      \"executor\": \"@nx/rspack:rspack\",\n      \"outputs\": [\n        \"{options.outputPath}\"\n      ],\n      \"defaultConfiguration\": \"production\",\n      \"options\": {\n        \"target\": \"web\",\n        \"compiler\": \"babel\",\n        \"outputPath\": \"dist/apps/remote1\",\n        \"index\": \"apps/remote1/src/index.html\",\n        \"baseHref\": \"/\",\n        \"main\": \"apps/remote1/src/main.ts\",\n        \"tsConfig\": \"apps/remote1/tsconfig.app.json\",\n        \"assets\": [\n          \"apps/remote1/src/favicon.ico\",\n          \"apps/remote1/src/assets\"\n        ],\n        \"styles\": [\n          \"apps/remote1/src/styles.css\"\n        ],\n        \"scripts\": [],\n        \"rspackConfig\": \"apps/remote1/rspack.config.ts\"\n      },\n      \"configurations\": {\n        \"development\": {\n          \"extractLicenses\": false,\n          \"optimization\": false,\n          \"sourceMap\": true,\n          \"vendorChunk\": true\n        },\n        \"production\": {\n          \"fileReplacements\": [\n            {\n              \"replace\": \"apps/remote1/src/environments/environment.ts\",\n              \"with\": \"apps/remote1/src/environments/environment.prod.ts\"\n            }\n          ],\n          \"optimization\": true,\n          \"outputHashing\": \"all\",\n          \"sourceMap\": false,\n          \"namedChunks\": false,\n          \"extractLicenses\": true,\n          \"vendorChunk\": false,\n          \"rspackConfig\": \"apps/remote1/rspack.config.prod.ts\"\n        }\n      }\n    },\n    \"serve\": {\n      \"executor\": \"@nx/rspack:module-federation-dev-server\",\n      \"defaultConfiguration\": \"development\",\n      \"options\": {\n        \"buildTarget\": \"remote1:build\",\n        \"hmr\": true,\n        \"port\": 4201\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"remote1:build:development\"\n        },\n        \"production\": {\n          \"buildTarget\": \"remote1:build:production\",\n          \"hmr\": false\n        }\n      }\n    },\n    \"lint\": {\n      \"executor\": \"@nx/eslint:lint\"\n    },\n    \"serve-static\": {\n      \"executor\": \"@nx/web:file-server\",\n      \"defaultConfiguration\": \"production\",\n      \"options\": {\n        \"buildTarget\": \"remote1:build\",\n        \"watch\": false,\n        \"port\": 4201\n      },\n      \"configurations\": {\n        \"development\": {\n          \"buildTarget\": \"remote1:build:development\"\n        },\n        \"production\": {\n          \"buildTarget\": \"remote1:build:production\"\n        }\n      }\n    },\n    \"test\": {\n      \"executor\": \"@nx/jest:jest\",\n      \"outputs\": [\n        \"{workspaceRoot}/coverage/{projectRoot}\"\n      ],\n      \"options\": {\n        \"jestConfig\": \"apps/remote1/jest.config.ts\"\n      }\n    }\n  }\n}\n</code></pre>\n<h3 id=\"add-packagejson\">Add package.json<a aria-hidden=\"true\" href=\"#add-packagejson\">#</a></h3>\n<p>In <strong>each of the applications, hosts or remotes, it will need a <code>package.json</code> file with <code>name</code> and <code>version</code> field</strong> in order for Zephyr to map the remote's name.</p>\n<p>If you are naming <code>host</code> application in Module Federation configuration like:</p>\n<pre><code meta=\"\">const config: ModuleFederationConfig = {\n  name: 'host',\n\n  remotes: ['remote1', 'remote2'],\n};\n\nexport default config;\n\n</code></pre>\n<p>You will need a <code>package.json</code> like so within the <code>host</code>'s folder:</p>\n<pre><code meta=\"\">{\n    \"name\": \"host\", \n    \"version\": \"0.0.0\" // Versioning depending on you, it's a required field for Zephyr \n}\n\n</code></pre>\n<h3 id=\"deploy-through-zephyr\">Deploy through Zephyr<a aria-hidden=\"true\" href=\"#deploy-through-zephyr\">#</a></h3>\n<p>Before we deploy to Zephyr, make sure:</p>\n<ul>\n<li>this repository is a <code>git</code> repository</li>\n<li>Have pre-existing commit hash</li>\n<li>Have a <code>remote.origin.url</code></li>\n</ul>\n<p>Since this is a Micro-Frontend application, you will need to build the remote first by running each of these command in sequence. Remotes must be built first for Zephyr to map them in host applications. <a href=\"/how-to/mf-guide\">Read more</a>.</p>\n<p>First:</p>\n<pre><code meta=\"\">npx nx run remote1:build \n</code></pre>\n<p>Second:</p>\n<pre><code meta=\"\">npx nx run remote2:build \n</code></pre>\n<p>Third:</p>\n<pre><code meta=\"\">npx nx run host:build \n</code></pre>","routePath":"/recipes/migrate-nx-webpack-to-rspack","lang":"en-US","toc":[{"text":"Video Walk-through","id":"video-walk-through","depth":3,"charIndex":549},{"text":"Example in Code","id":"example-in-code","depth":2,"charIndex":571},{"text":"Installation","id":"installation","depth":3,"charIndex":659},{"text":"Change import path","id":"change-import-path","depth":3,"charIndex":794},{"text":"Edit project.json","id":"edit-projectjson","depth":3,"charIndex":1375},{"text":"Add package.json","id":"add-packagejson","depth":3,"charIndex":2011},{"text":"Deploy through Zephyr","id":"deploy-through-zephyr","depth":3,"charIndex":2331}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/migrate-nx-webpack-to-rspack.mdx","_relativePath":"recipes/migrate-nx-webpack-to-rspack.mdx"},{"id":65,"title":"ModernJS","content":"#\n\nIn this guide, we'll walk through creating a Modern.js application and\nconfiguring it with Zephyr's release.\n\nDANGER\n\nPlease note that this plugin is still in testing stage and Module Federation\nfeatures are currently under development and will be available in future\nreleases.\n\nPrerequisites\n * We expect you to have finished our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\n\nCreating a Modern.js Project#\n\nYou can create a new Modern.js project in two ways:\n\n\nUsing Zephyr CLI (Recommended)#\n\nUsing ModernJS CLI#\n\n\nConfigure Zephyr#\n\nOnce created, navigate to your project directory and install dependencies:\n\nOpen your modern.config.ts file and add the Zephyr plugin and the following\nsettings.\n\nWARNING\n\nZephyr requires html, source, and output settings to be configured in your\nmodern.config.ts file to work correctly.\n\n\n\n\nDeploy your application#\n\nWARNING\n\nRemember to initialize a git repository in current folder, and adding a git\nremote before attempting to deploy your app:\n\n\n\nWith git initialized and configured, you can now deploy your application:\n\nYou will see the build output with your deployed URL highlighted in the console\noutput.","_html":"<h1 id=\"modernjs\">ModernJS<a aria-hidden=\"true\" href=\"#modernjs\">#</a></h1>\n\n<p>In this guide, we'll walk through creating a Modern.js application and configuring it with Zephyr's release.</p>\n<div><div>DANGER</div><div><p><em>Please note that this plugin is still in testing stage and Module Federation features are currently under development and will be available in future releases.</em>\n</p></div></div>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h2 id=\"creating-a-modernjs-project\">Creating a Modern.js Project<a aria-hidden=\"true\" href=\"#creating-a-modernjs-project\">#</a></h2>\n<p>You can create a new Modern.js project in two ways:</p>\n<h3 id=\"using-zephyr-cli-recommended\">Using Zephyr CLI (Recommended)<a aria-hidden=\"true\" href=\"#using-zephyr-cli-recommended\">#</a></h3>\n\n<h4 id=\"using-modernjs-cli\">Using ModernJS CLI<a aria-hidden=\"true\" href=\"#using-modernjs-cli\">#</a></h4>\n\n<h2 id=\"configure-zephyr\">Configure Zephyr<a aria-hidden=\"true\" href=\"#configure-zephyr\">#</a></h2>\n<p>Once created, navigate to your project directory and install dependencies:</p>\n\n<p>Open your <code>modern.config.ts</code> file and add the Zephyr plugin and the following settings.</p>\n<div><div>WARNING</div><div>\n<p>Zephyr requires <strong>html</strong>, <strong>source</strong>, and <strong>output</strong> settings to be configured in your <code>modern.config.ts</code> file to work correctly.</p>\n</div></div>\n<pre><code meta=\"\">\n\n\nexport default defineConfig({\n  html: {\n    outputStructure: 'flat',\n  },\n  source: {\n    mainEntryName: 'index',\n  },\n  output: {\n    distPath: {\n      html: './',\n    },\n  },\n  plugins: [\n    appTools({\n      bundler: 'rspack', // Or 'webpack'\n    }),\n    withZephyr(),\n  ],\n});\n</code></pre>\n<h2 id=\"deploy-your-application\">Deploy your application<a aria-hidden=\"true\" href=\"#deploy-your-application\">#</a></h2>\n<div><div>WARNING</div><div>\n<p><strong>Remember to initialize a git repository in current folder</strong>, and <strong>adding a git remote</strong> before attempting to deploy your app:</p>\n<pre><code>git init\ngit remote add origin <REMOTE_URL>\ngit add .\ngit commit -m \"Initial commit\"\n</code></pre>\n</div></div>\n<p>With git initialized and configured, you can now deploy your application:</p>\n\n<p>You will see the build output with your deployed URL highlighted in the console output.</p>","routePath":"/recipes/modernjs","lang":"en-US","toc":[{"text":"Creating a Modern.js Project","id":"creating-a-modernjs-project","depth":2,"charIndex":556},{"text":"Using Zephyr CLI (Recommended)","id":"using-zephyr-cli-recommended","depth":3,"charIndex":641},{"text":"Using ModernJS CLI","id":"using-modernjs-cli","depth":4,"charIndex":674},{"text":"Configure Zephyr","id":"configure-zephyr","depth":2,"charIndex":696},{"text":"Deploy your application","id":"deploy-your-application","depth":2,"charIndex":1007}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/modernjs.mdx","_relativePath":"recipes/modernjs.mdx"},{"id":66,"title":"Nx + Module Federation example","content":"#\n\nSpecial thanks to Colum at Nx for his feedback on using Nx generators with\nModule Federation.\n\nPrerequisites\n * We expect you to have finished our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=20\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\n\nGenerating a New Nx Workspace#\n\nNx, a leading Monorepo and CI tool, offers an extensive array of generators that\nfacilitate various development needs.\n\nWARNING\n\nWe recommended using npm in this guide - it's fine to use pnpm but the automated\ninitiation process from Nx might be different from this guide.\n\n\n\nFor those preferring Rspack, replace the command with the following:\n\n\n\n\nSelecting a Frontend Framework#\n\nAt this stage, select 'None' for the frontend framework to keep the setup\nminimal.\n\n\n\n\nMonorepo Type Configuration#\n\nWe opt for the Integrated configuration as it allows us to house all remotes and\nthe shell within a single repository:\n\n\n\n\nNx Setup#\n\nWhile any Nx Cloud setup option is valid, \"Skipping for Now\" is chosen in our\nexample, though activating Nx Cloud can significantly enhance local and CI build\nspeeds:\n\n\n\n\nPost-Setup Steps#\n\nChange into the directory of the newly created workspace:\n\n\n\n\nAdding Framework / Library Support#\n\nAt this stage, we will use Nx to integrate React support. While our example\nspecifically uses React, you may choose to use a different framework according\nto your project needs:\n\n\n\n\nInstalling Zephyr#\n\nInstall the zephyr-webpack-plugin using npm with the following commands:\n\n\n\nOnce installed, ensure these packages are listed in your package.json under\ndependencies and they are the latest version.\n\n\nGenerate Module Federation Shell and Remotes#\n\nUse Nx to structure your application with a host shell and remote apps:\n\n\n\nFor those using Rspack, append the command accordingly:\n\n\n\n\nStyle Configuration#\n\nWhen prompted, choose your preferred stylesheet format. Options include CSS,\nSASS, LESS, and others:\n\n\n\n\nEnd-to-End Testing Setup#\n\nSelect an E2E test runner, though for demo purposes, 'none' is selected:\n\n\n\n\nProject Structure Confirmation#\n\nSelect \"As Provided\" for project names, as no adjustments are necessary:\n\n\n\n\nFinal Adjustments#\n\nTo accommodate Zephyr Cloud support, we need to make certain modifications to\nthe generated projects.\n\n\nAdding Package JSON Files#\n\nZephyr Cloud requires a package.json file in each application to resolve names.\nCreate a package.json for each application, specifying a unique name for each:\n\n\n\n\n\n\n\n\nUpdating Webpack Configuration#\n\nUpdate both the webpack.config.ts and webpack.config.prod.ts files for shell and\nwebpack.config.ts for both remotes.\n\nINFO\n\nRspack is also supported however this example uses Webpack\n\n\n\n\n\n\n\n\n\n\nBuilding the App#\n\nWith all preparations complete, you can now build the applications and start\nutilizing Zephyr Cloud.\n\n\nBuilding the Shell#\n\nTo build the shell application, execute the following command, which uses watch\nmode for ongoing updates:\n\n\n\nINFO\n\nEnsure you have created package.json files in each project directory as outlined\nearlier. Failure to do so may result in errors like the ones below, indicating\nunresolved remote entry points:\n\n\n\n\nShell Build Output#\n\n\n\nINFO\n\nThe build process generates a series of URLs for each deployment. For a\ncomprehensive understanding of these build outputs, please consult our\nversioning documentation.\n\n\n\n\nRemote 1 Build#\n\n\n\n\nRemote 1 Build Output#\n\n\n\n\nRemote 2 Build#\n\n\n\n\nRemote 2 Build Output#\n\n\n\n\nNext Steps#\n\nNow that the initial setup is complete, you can proceed to add remote modules\nand start developing your federated application as planned.","_html":"<h1 id=\"react--webpack--nx\">React + Webpack + Nx<a aria-hidden=\"true\" href=\"#react--webpack--nx\">#</a></h1>\n\n<p>Special thanks to <a href=\"https://x.com/FerryColum\" target=\"_blank\" rel=\"noopener noreferrer\">Colum</a> at Nx for his feedback on using Nx generators with Module Federation.</p>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li>node >=20</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h2 id=\"generating-a-new-nx-workspace\">Generating a New Nx Workspace<a aria-hidden=\"true\" href=\"#generating-a-new-nx-workspace\">#</a></h2>\n<p><a href=\"https://nx.dev\" target=\"_blank\" rel=\"noopener noreferrer\">Nx</a>, a leading Monorepo and CI tool, offers an extensive array of <a href=\"https://nx.dev/recipes/module\" target=\"_blank\" rel=\"noopener noreferrer\">generators</a> that facilitate various development needs.</p>\n<div><div>WARNING</div><div>\n<p>We recommended using <code>npm</code> in this guide - it's fine to use <code>pnpm</code> but the automated initiation process from Nx might be different from this guide.</p>\n</div></div>\n<pre><code meta=\"\">npx create-nx-workspace@latest myorg\n</code></pre>\n<p>For those preferring Rspack, replace the command with the following:</p>\n<pre><code meta=\"\">npx create-nx-workspace@latest myorg --preset=@nx/rspack\n</code></pre>\n<h3 id=\"selecting-a-frontend-framework\">Selecting a Frontend Framework<a aria-hidden=\"true\" href=\"#selecting-a-frontend-framework\">#</a></h3>\n<p>At this stage, select '<code>None</code>' for the frontend framework to keep the setup minimal.</p>\n<pre><code meta=\"\"> NX   Let's create a new workspace [https://nx.dev/getting-started/intro]\n\n? Which stack do you want to use? …\nNone:          Configures a TypeScript/JavaScript project with minimal structure.\nReact:         Configures a React application with your framework of choice.\nVue:           Configures a Vue application with your framework of choice.\nAngular:       Configures a Angular application with modern tooling.\nNode:          Configures a Node API application with your framework of choice.\n</code></pre>\n<h3 id=\"monorepo-type-configuration\">Monorepo Type Configuration<a aria-hidden=\"true\" href=\"#monorepo-type-configuration\">#</a></h3>\n<p>We opt for the <code>Integrated</code> configuration as it allows us to house all remotes and the shell within a single repository:</p>\n<pre><code meta=\"\">? Package-based monorepo, integrated monorepo, or standalone project? …\nPackage-based Monorepo:     Nx makes it fast, but lets you run things your way.\nIntegrated Monorepo:        Nx creates a monorepo that contains multiple projects.\nStandalone:                 Nx creates a single project and makes it fast.\n</code></pre>\n<h3 id=\"nx-setup\">Nx Setup<a aria-hidden=\"true\" href=\"#nx-setup\">#</a></h3>\n<p>While any Nx Cloud setup option is valid, \"Skipping for Now\" is chosen in our example, though activating Nx Cloud can significantly enhance local and CI build speeds:</p>\n<pre><code meta=\"\">? Do you want Nx Cloud to make your CI fast? …\n(it's free and can be disabled any time)\nYes, enable Nx Cloud\nYes, configure Nx Cloud for GitHub Actions\nYes, configure Nx Cloud for Circle CI\nSkip for now\n</code></pre>\n<h2 id=\"post-setup-steps\">Post-Setup Steps<a aria-hidden=\"true\" href=\"#post-setup-steps\">#</a></h2>\n<p>Change into the directory of the newly created workspace:</p>\n<pre><code meta=\"\">cd myorg\n</code></pre>\n<h3 id=\"adding-framework--library-support\">Adding Framework / Library Support<a aria-hidden=\"true\" href=\"#adding-framework--library-support\">#</a></h3>\n<p>At this stage, we will use Nx to integrate React support. While our example specifically uses React, you may choose to use a different framework according to your project needs:</p>\n<pre><code meta=\"\">npx nx add @nx/react\n</code></pre>\n<h3 id=\"installing-zephyr\">Installing Zephyr<a aria-hidden=\"true\" href=\"#installing-zephyr\">#</a></h3>\n<p>Install the <code>zephyr-webpack-plugin</code> using npm with the following commands:</p>\n<pre><code>npm install zephyr-webpack-plugin@latest\n</code></pre>\n<p>Once installed, ensure these packages are listed in your <code>package.json</code> under dependencies and they are the latest version.</p>\n<h3 id=\"generate-module-federation-shell-and-remotes\">Generate Module Federation Shell and Remotes<a aria-hidden=\"true\" href=\"#generate-module-federation-shell-and-remotes\">#</a></h3>\n<p>Use Nx to structure your application with a host shell and remote apps:</p>\n<pre><code meta=\"\">npx nx g @nx/react:host shell --remotes=remote1,remote2 --directory=apps/shell\n</code></pre>\n<p>For those using Rspack, append the command accordingly:</p>\n<pre><code meta=\"\">npx nx g @nx/react:host shell --remotes=remote1,remote2 --directory=apps/shell --preset=@nx/rspack\n</code></pre>\n<h3 id=\"style-configuration\">Style Configuration<a aria-hidden=\"true\" href=\"#style-configuration\">#</a></h3>\n<p>When prompted, choose your preferred stylesheet format. Options include CSS, SASS, LESS, and others:</p>\n<pre><code meta=\"\">? Which stylesheet format would you like to use? …\nCSS\nSASS(.scss)       [ https://sass-lang.com                    ]\nLESS              [ https://lesscss.org                      ]\ntailwind          [ https://tailwindcss.com/                 ]\nstyled-components [ https://styled-components.com            ]\nemotion           [ https://emotion.sh                       ]\nstyled-jsx        [ https://www.npmjs.com/package/styled-jsx ]\nNone\n</code></pre>\n<h3 id=\"end-to-end-testing-setup\">End-to-End Testing Setup<a aria-hidden=\"true\" href=\"#end-to-end-testing-setup\">#</a></h3>\n<p>Select an E2E test runner, though for demo purposes, 'none' is selected:</p>\n<pre><code meta=\"\">? Which E2E test runner would you like to use? …\ncypress\nplaywright\nnone\n</code></pre>\n<h3 id=\"project-structure-confirmation\">Project Structure Confirmation<a aria-hidden=\"true\" href=\"#project-structure-confirmation\">#</a></h3>\n<p>Select \"As Provided\" for project names, as no adjustments are necessary:</p>\n<pre><code meta=\"\">? What should be the project name and where should it be generated? …\n❯ As provided:\n    Name: shell\n    Root: apps/shell\n  Derived:\n    Name: shell-shell\n    Root: apps/shell/shell\n</code></pre>\n<h2 id=\"final-adjustments\">Final Adjustments<a aria-hidden=\"true\" href=\"#final-adjustments\">#</a></h2>\n<p>To accommodate Zephyr Cloud support, we need to make certain modifications to the generated projects.</p>\n<h3 id=\"adding-package-json-files\">Adding Package JSON Files<a aria-hidden=\"true\" href=\"#adding-package-json-files\">#</a></h3>\n<p>Zephyr Cloud requires a <code>package.json</code> file in each application to resolve names. Create a <code>package.json</code> for each application, specifying a unique name for each:</p>\n<pre><code meta=\"\">{\n  \"name\": \"shell\", \n  \"version\": \"0.0.1\"\n}\n</code></pre>\n<pre><code meta=\"\">{\n  \"name\": \"remote1\", \n  \"version\": \"0.0.1\"\n}\n</code></pre>\n<pre><code meta=\"\">{\n  \"name\": \"remote2\", \n  \"version\": \"0.0.1\"\n}\n</code></pre>\n<h2 id=\"updating-webpack-configuration\">Updating Webpack Configuration<a aria-hidden=\"true\" href=\"#updating-webpack-configuration\">#</a></h2>\n<p>Update both the <code>webpack.config.ts</code> and <code>webpack.config.prod.ts</code> files for shell and <code>webpack.config.ts</code> for both remotes.</p>\n<div><div>INFO</div><div><p><a href=\"https://rspack.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Rspack</a> is also supported however this example uses Webpack\n</p></div></div>\n<pre><code meta=\"\">\n\n\n\n\n\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n\n// Nx plugins for webpack to build config object from Nx options and context.\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n</code></pre>\n<pre><code meta=\"\">\n\n\n\n\n\n\n\nconst prodConfig: ModuleFederationConfig = {\n  ...baseConfig,\n  /*\n   * Remote overrides for production.\n   * Each entry is a pair of a unique name and the URL where it is deployed.\n   *\n   * e.g.\n   * remotes: [\n   *   ['app1', 'http://app1.example.com'],\n   *   ['app2', 'http://app2.example.com'],\n   * ]\n   *\n   * You can also use a full path to the remoteEntry.js file if desired.\n   *\n   * remotes: [\n   *   ['app1', 'http://example.com/path/to/app1/remoteEntry.js'],\n   *   ['app2', 'http://example.com/path/to/app2/remoteEntry.js'],\n   * ]\n   */\n  remotes: [\n    ['remote1', 'http://localhost:4201/'],\n    ['remote2', 'http://localhost:4202/'],\n  ],\n};\n\n// Nx plugins for webpack to build config object from Nx options and context.\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(prodConfig),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n</code></pre>\n<pre><code meta=\"\">\n\n\n\n\n\n\nconst config = {\n  ...baseConfig,\n};\n\n// Nx plugins for webpack to build config object from Nx options and context.\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n</code></pre>\n<pre><code meta=\"\">\n\n\n\n\n\n\nconst config = {\n  ...baseConfig,\n};\n\n// Nx plugins for webpack to build config object from Nx options and context.\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config),\n  withZephyr(),\n  (config) => {\n    return config;\n  }\n);\n</code></pre>\n<h2 id=\"building-the-app\">Building the App<a aria-hidden=\"true\" href=\"#building-the-app\">#</a></h2>\n<p>With all preparations complete, you can now build the applications and start utilizing Zephyr Cloud.</p>\n<h3 id=\"building-the-shell\">Building the Shell<a aria-hidden=\"true\" href=\"#building-the-shell\">#</a></h3>\n<p>To build the shell application, execute the following command, which uses watch mode for ongoing updates:</p>\n<pre><code meta=\"\">npx nx build shell -- --watch\n</code></pre>\n<div><div>INFO</div><div><p>Ensure you have created <code>package.json</code> files in each project directory as outlined earlier. Failure to do so may result in errors like the ones below, indicating unresolved remote entry points:</p>\n<pre><code>[zephyr] Could not resolve 'remote1.zephyr-examples.zephyrcloudio' with version 'http://localhost:4201/remoteEntry.js'\n[zephyr] Could not resolve 'remote2.zephyr-examples.zephyrcloudio' with version 'http://localhost:4202/remoteEntry.js'\n</code></pre>\n</div></div>\n<h3 id=\"shell-build-output\">Shell Build Output<a aria-hidden=\"true\" href=\"#shell-build-output\">#</a></h3>\n<pre><code meta=\"\">nx run shell:build:production --watch\n\n✔ You are already logged in\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: local build started\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: started uploading of local snapshot to zephyr\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: uploaded local snapshot in 805ms\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: uploading missing assets to zephyr (queued 11 out of 14)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file main.93e9078aa7b6c830.js uploaded in 126ms (8.31kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file 913.026a13b340471b7f.js.LICENSE.txt uploaded in 139ms (0.66kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file 943.a0a6b971d9115018.js uploaded in 150ms (27.19kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file 41.b26ddec4260a2e36.js uploaded in 156ms (6.43kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file index.html uploaded in 150ms (0.48kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file 144.3652843fc7a12189.js.LICENSE.txt uploaded in 158ms (0.47kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file 41.b26ddec4260a2e36.js.LICENSE.txt uploaded in 160ms (0.23kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file styles.ecbc7c8fef0c436e.js uploaded in 169ms (5.84kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file 943.a0a6b971d9115018.js.LICENSE.txt uploaded in 174ms (0.24kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file 913.026a13b340471b7f.js uploaded in 217ms (63.79kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: file 144.3652843fc7a12189.js uploaded in 222ms (129.66kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: uploaded missing assets to zephyr (11 assets in 1821ms, 243.31kb)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: started deploying local build to edge\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: deployed to https://valorkin_3016-shell-zephyr-examples-zephyrcloudio-ze.valorkin.dev\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: deployed to https://t_main_zack_zephyr-cloud_io-pe4ufnqhxd-shell-zephyr-e-80bb4d-ze.valorkin.dev\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: deployed to https://shell-zephyr-examples-zephyrcloudio-ze.valorkin.dev\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: local build deployed to edge in 188ms\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: build deployed in 1634ms\nEntrypoint main 8.31 KiB = main.93e9078aa7b6c830.js\nEntrypoint styles 5.92 KiB = styles.5f4524c1fa820eae.css 81 bytes styles.ecbc7c8fef0c436e.js 5.84 KiB\nchunk (runtime: main, styles) 41.b26ddec4260a2e36.js 6.94 KiB [rendered]\nchunk (runtime: main, styles) 144.3652843fc7a12189.js (id hint: vendors) 134 KiB [rendered] reused as split chunk (cache group: defaultVendors)\nchunk (runtime: main, styles) 42 bytes reused as split chunk (cache group: default)\nchunk (runtime: main) 6 bytes (remote) 6 bytes (share-init)\nchunk (runtime: main) 42 bytes\nchunk (runtime: main) 42 bytes\nchunk (runtime: main) main.93e9078aa7b6c830.js (main) 139 bytes (javascript) 126 bytes (share-init) 21.1 KiB (runtime) [entry] [rendered]\nchunk (runtime: main) 6 bytes (remote) 6 bytes (share-init)\nchunk (runtime: styles) styles.5f4524c1fa820eae.css, styles.ecbc7c8fef0c436e.js (styles) 50 bytes (javascript) 80 bytes (css/mini-extract) 126 bytes (share-init) 19 KiB (runtime) [entry] [rendered]\nchunk (runtime: main, styles) 913.026a13b340471b7f.js (id hint: vendors) 228 KiB [rendered] reused as split chunk (cache group: defaultVendors)\nchunk (runtime: main) 943.a0a6b971d9115018.js 37.4 KiB (javascript) 84 bytes (consume-shared) [rendered]\nwebpack compiled successfully (533e09796edd0232)\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: local build finished in 3265ms\n</code></pre>\n<div><div>INFO</div><div><p>The build process generates a series of URLs for each deployment. For a comprehensive understanding of these build outputs, please consult our <a href=\"/how-to/versioning-tags\">versioning documentation</a>.</p>\n<pre><code meta=\"\">[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: deployed to https://valorkin_3016-shell-zephyr-examples-zephyrcloudio-ze.valorkin.dev\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: deployed to https://t_main_zack_zephyr-cloud_io-pe4ufnqhxd-shell-zephyr-e-80bb4d-ze.valorkin.dev\n[shell.zephyr-examples.zephyrcloudio](valorkin)[3016]: deployed to https://shell-zephyr-examples-zephyrcloudio-ze.valorkin.dev\n</code></pre>\n</div></div>\n<h3 id=\"remote-1-build\">Remote 1 Build<a aria-hidden=\"true\" href=\"#remote-1-build\">#</a></h3>\n<pre><code meta=\"\">npx nx build remote1 --watch\n</code></pre>\n<h3 id=\"remote-1-build-output\">Remote 1 Build Output<a aria-hidden=\"true\" href=\"#remote-1-build-output\">#</a></h3>\n<pre><code meta=\"\">> nx run remote1:build:production --watch\n\n✔ You are already logged in\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: local build started\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: started uploading of local snapshot to zephyr\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: uploaded local snapshot in 589ms\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: uploading missing assets to zephyr (queued 12 out of 15)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file remoteEntry.js uploaded in 126ms (5.72kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file 41.9a449c58de22ab6b.js uploaded in 145ms (6.43kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file main.42dbf49433954a69.js uploaded in 138ms (5.45kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file 41.9a449c58de22ab6b.js.LICENSE.txt uploaded in 141ms (0.23kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file index.html uploaded in 147ms (0.49kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file 589.505424fc93ec3072.js uploaded in 154ms (0.14kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file 404.86591e41fe4977b8.js.LICENSE.txt uploaded in 155ms (0.24kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file 404.86591e41fe4977b8.js uploaded in 157ms (26.42kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file 144.e8b8368c4463d4f1.js.LICENSE.txt uploaded in 164ms (0.47kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file styles.2c6709042aaf4268.js uploaded in 167ms (4.92kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file 510.705b2055194c71b8.js uploaded in 192ms (0.30kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: file 144.e8b8368c4463d4f1.js uploaded in 197ms (129.66kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: uploaded missing assets to zephyr (12 assets in 1883ms, 180.47kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: started deploying local build to edge\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: deployed to https://valorkin_3015-_create-nx-workspace-mf_source-zephyr-e-66be25-ze.valorkin.dev\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: deployed to https://t_main_zack_zephyr-cloud_io-pe4ufnqhxd-_create-nx-wor-b959ef-ze.valorkin.dev\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: deployed to https://_create-nx-workspace-mf_source-zephyr-examples-zephyr-262fe7-ze.valorkin.dev\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: local build deployed to edge in 169ms\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: build deployed in 1446ms\nEntrypoint main 5.45 KiB = main.42dbf49433954a69.js\nEntrypoint styles 5 KiB = styles.5f4524c1fa820eae.css 81 bytes styles.2c6709042aaf4268.js 4.92 KiB\nEntrypoint remote1 5.72 KiB = remoteEntry.js\nchunk (runtime: main, remote1, styles) 41.9a449c58de22ab6b.js 6.94 KiB [rendered]\nchunk (runtime: main, remote1, styles) 144.e8b8368c4463d4f1.js (id hint: vendors) 134 KiB [rendered] reused as split chunk (cache group: defaultVendors)\nchunk (runtime: main, remote1, styles) 42 bytes reused as split chunk (cache group: default)\nchunk (runtime: main, remote1) 404.86591e41fe4977b8.js 35.4 KiB [rendered] split chunk (cache group: default)\nchunk (runtime: main) 510.705b2055194c71b8.js 934 bytes (javascript) 42 bytes (consume-shared) [rendered]\nchunk (runtime: remote1) 589.505424fc93ec3072.js 36 bytes [rendered]\nchunk (runtime: remote1) remoteEntry.js (remote1) 42 bytes (javascript) 84 bytes (share-init) 17.3 KiB (runtime) [entry] [rendered]\nchunk (runtime: main) main.42dbf49433954a69.js (main) 22 bytes (javascript) 84 bytes (share-init) 17.7 KiB (runtime) [entry] [rendered]\nchunk (runtime: styles) styles.5f4524c1fa820eae.css, styles.2c6709042aaf4268.js (styles) 50 bytes (javascript) 80 bytes (css/mini-extract) 84 bytes (share-init) 16.7 KiB (runtime) [entry] [rendered]\nwebpack compiled successfully (6bdf66978d6c6278)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3015]: local build finished in 3229ms\n</code></pre>\n<h3 id=\"remote-2-build\">Remote 2 Build<a aria-hidden=\"true\" href=\"#remote-2-build\">#</a></h3>\n<pre><code meta=\"\">npx nx build remote2 -- --watch\n</code></pre>\n<h3 id=\"remote-2-build-output\">Remote 2 Build Output<a aria-hidden=\"true\" href=\"#remote-2-build-output\">#</a></h3>\n<pre><code meta=\"\">> nx run remote2:build:production --watch\n\n✔ You are already logged in\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: local build started\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: started uploading of local snapshot to zephyr\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: uploaded local snapshot in 612ms\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: uploading missing assets to zephyr (queued 12 out of 15)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file remoteEntry.js uploaded in 128ms (5.72kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file styles.1571ea7a783778ba.js uploaded in 128ms (4.92kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file 404.2971a24285c7bbe6.js.LICENSE.txt uploaded in 131ms (0.24kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file main.2e27878c29b4811c.js uploaded in 148ms (5.45kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file index.html uploaded in 154ms (0.49kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file 404.2971a24285c7bbe6.js uploaded in 163ms (26.42kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file 144.ca505f105bb1b446.js.LICENSE.txt uploaded in 165ms (0.47kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file 510.2a6e58595f33f0b5.js uploaded in 178ms (0.30kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file 41.641d6a5a1b771f6b.js uploaded in 188ms (6.43kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file 589.8fb6a268ace3b111.js uploaded in 190ms (0.14kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file 41.641d6a5a1b771f6b.js.LICENSE.txt uploaded in 221ms (0.23kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: file 144.ca505f105bb1b446.js uploaded in 269ms (129.66kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: uploaded missing assets to zephyr (12 assets in 2063ms, 180.47kb)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: started deploying local build to edge\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: deployed to https://valorkin_3017-_create-nx-workspace-mf_source-zephyr-e-a00e91-ze.valorkin.dev\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: deployed to https://t_main_zack_zephyr-cloud_io-pe4ufnqhxd-_create-nx-wor-b959ef-ze.valorkin.dev\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: deployed to https://_create-nx-workspace-mf_source-zephyr-examples-zephyr-262fe7-ze.valorkin.dev\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: local build deployed to edge in 190ms\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: build deployed in 1531ms\nEntrypoint main 5.45 KiB = main.2e27878c29b4811c.js\nEntrypoint styles 5 KiB = styles.5f4524c1fa820eae.css 81 bytes styles.1571ea7a783778ba.js 4.92 KiB\nEntrypoint remote2 5.72 KiB = remoteEntry.js\nchunk (runtime: main, remote2, styles) 41.641d6a5a1b771f6b.js 6.94 KiB [rendered]\nchunk (runtime: main, remote2, styles) 144.ca505f105bb1b446.js (id hint: vendors) 134 KiB [rendered] reused as split chunk (cache group: defaultVendors)\nchunk (runtime: main, remote2, styles) 42 bytes reused as split chunk (cache group: default)\nchunk (runtime: remote2) remoteEntry.js (remote2) 42 bytes (javascript) 84 bytes (share-init) 17.3 KiB (runtime) [entry] [rendered]\nchunk (runtime: main, remote2) 404.2971a24285c7bbe6.js 35.4 KiB [rendered] split chunk (cache group: default)\nchunk (runtime: main) 510.2a6e58595f33f0b5.js 934 bytes (javascript) 42 bytes (consume-shared) [rendered]\nchunk (runtime: remote2) 589.8fb6a268ace3b111.js 36 bytes [rendered]\nchunk (runtime: main) main.2e27878c29b4811c.js (main) 22 bytes (javascript) 84 bytes (share-init) 17.7 KiB (runtime) [entry] [rendered]\nchunk (runtime: styles) styles.5f4524c1fa820eae.css, styles.1571ea7a783778ba.js (styles) 50 bytes (javascript) 80 bytes (css/mini-extract) 84 bytes (share-init) 16.7 KiB (runtime) [entry] [rendered]\nwebpack compiled successfully (ba7bd784fa780a37)\n[_create-nx-workspace-mf_source.zephyr-examples.zephyrcloudio](valorkin)[3017]: local build finished in 3363ms\n</code></pre>\n<h2 id=\"next-steps\">Next Steps<a aria-hidden=\"true\" href=\"#next-steps\">#</a></h2>\n<p>Now that the initial setup is complete, you can proceed to add remote modules and start developing your federated application as planned.</p>","routePath":"/recipes/nx-mf-app","lang":"en-US","toc":[{"text":"Generating a New Nx Workspace","id":"generating-a-new-nx-workspace","depth":2,"charIndex":397},{"text":"Selecting a Frontend Framework","id":"selecting-a-frontend-framework","depth":3,"charIndex":778},{"text":"Monorepo Type Configuration","id":"monorepo-type-configuration","depth":3,"charIndex":898},{"text":"Nx Setup","id":"nx-setup","depth":3,"charIndex":1051},{"text":"Post-Setup Steps","id":"post-setup-steps","depth":2,"charIndex":1233},{"text":"Adding Framework / Library Support","id":"adding-framework--library-support","depth":3,"charIndex":1314},{"text":"Installing Zephyr","id":"installing-zephyr","depth":3,"charIndex":1533},{"text":"Generate Module Federation Shell and Remotes","id":"generate-module-federation-shell-and-remotes","depth":3,"charIndex":1753},{"text":"Style Configuration","id":"style-configuration","depth":3,"charIndex":1935},{"text":"End-to-End Testing Setup","id":"end-to-end-testing-setup","depth":3,"charIndex":2062},{"text":"Project Structure Confirmation","id":"project-structure-confirmation","depth":3,"charIndex":2166},{"text":"Final Adjustments","id":"final-adjustments","depth":2,"charIndex":2276},{"text":"Adding Package JSON Files","id":"adding-package-json-files","depth":3,"charIndex":2400},{"text":"Updating Webpack Configuration","id":"updating-webpack-configuration","depth":2,"charIndex":2595},{"text":"Building the App","id":"building-the-app","depth":2,"charIndex":2821},{"text":"Building the Shell","id":"building-the-shell","depth":3,"charIndex":2943},{"text":"Shell Build Output","id":"shell-build-output","depth":3,"charIndex":3275},{"text":"Remote 1 Build","id":"remote-1-build","depth":3,"charIndex":3477},{"text":"Remote 1 Build Output","id":"remote-1-build-output","depth":3,"charIndex":3497},{"text":"Remote 2 Build","id":"remote-2-build","depth":3,"charIndex":3524},{"text":"Remote 2 Build Output","id":"remote-2-build-output","depth":3,"charIndex":3544},{"text":"Next Steps","id":"next-steps","depth":2,"charIndex":3571}],"domain":"","frontmatter":{"title":"Nx + Module Federation example","description":"Zephyr Cloud Documentation - Creating a module federation app in Nx as an example"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/nx-mf-app.mdx","_relativePath":"recipes/nx-mf-app.mdx"},{"id":67,"title":"Parcel with Zephyr","content":"","_html":"<h1 id=\"parcel-with-zephyr\">Parcel with Zephyr<a aria-hidden=\"true\" href=\"#parcel-with-zephyr\">#</a></h1>\n\n<p>In this guide, we'll walk through creating a Parcel application and configuring it to deploy with Zephyr.</p>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h2 id=\"creating-a-new-project\">Creating a New Project<a aria-hidden=\"true\" href=\"#creating-a-new-project\">#</a></h2>\n<p>The easiest way to get started is using the <code>create-zephyr-apps</code> CLI:</p>\n\n<p>Follow the CLI prompts and select Parcel as your bundler. This will create a new project with all the necessary dependencies and configuration.</p>\n<h2 id=\"manually\">Manually<a aria-hidden=\"true\" href=\"#manually\">#</a></h2>\n\n<h2 id=\"configure-zephyr-with-parcel\">Configure Zephyr with Parcel<a aria-hidden=\"true\" href=\"#configure-zephyr-with-parcel\">#</a></h2>\n<p>Create a <code>.parcelrc</code> file in your project root with the following configuration:</p>\n<pre><code meta=\"\">{\n  \"extends\": \"@parcel/config-default\",\n  \"reporters\": [\n    // ... other reporters,\n    \"parcel-reporter-zephyr\"\n  ]\n}\n</code></pre>\n<p>Create a basic project structure:</p>\n<pre><code meta=\"\"><!DOCTYPE html>\n<html>\n  <head>\n    <title>My Parcel App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"./index.tsx\"></script>\n  </body>\n</html>\n</code></pre>\n<pre><code meta=\"\">\n\n\n\nconst rootElement = document.getElementById('root');\nif (rootElement) {\n  const root = createRoot(rootElement);\n  root.render(<App />);\n}\n</code></pre>\n<pre><code meta=\"\">\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Hello from Parcel + Zephyr!</h1>\n      <p>Edit src/App.tsx to get started</p>\n    </div>\n  );\n}\n</code></pre>\n<h2 id=\"deploy-your-application\">Deploy your application<a aria-hidden=\"true\" href=\"#deploy-your-application\">#</a></h2>\n<div><div>WARNING</div><div><p><strong>Remember to initialize a git repository in current folder</strong>, and <strong>adding a git remote</strong> before attempting to deploy your app:</p>\n<pre><code>git init\ngit remote add origin <REMOTE_URL>\ngit add .\ngit commit -m \"Initial commit\"\n</code></pre>\n</div></div>\n<p>With git initialized and configured, you can now build and deploy your application:</p>\n\n<p>You will see the build output with your deployed URL highlighted in the console output.</p>\n<div><div>INFO</div><div><p>Make sure to add a build script to your package.json:</p>\n<pre><code>{\n  \"scripts\": {\n    \"start\": \"parcel src/index.html\",\n    \"build\": \"parcel build src/index.html\"\n  }\n}\n</code></pre>\n</div></div>","routePath":"/recipes/parcel-react","lang":"en-US","toc":[{"text":"Creating a New Project","id":"creating-a-new-project","depth":2,"charIndex":-1},{"text":"Manually","id":"manually","depth":2,"charIndex":-1},{"text":"Configure Zephyr with Parcel","id":"configure-zephyr-with-parcel","depth":2,"charIndex":-1},{"text":"Deploy your application","id":"deploy-your-application","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/parcel-react.mdx","_relativePath":"recipes/parcel-react.mdx"},{"id":68,"title":"React Native","content":"#\n\n\nComing soon...#\n\nINFO\n\nCan't wait for it?#\n\nRead more in Shaping the Future of Super Apps in React Native from Callstack and\nthe maintainer of Re.Pack.","_html":"<h1 id=\"react-native\">React Native<a aria-hidden=\"true\" href=\"#react-native\">#</a></h1>\n<h2 id=\"coming-soon\">Coming soon...<a aria-hidden=\"true\" href=\"#coming-soon\">#</a></h2>\n<div><div>INFO</div><div>\n<h4 id=\"cant-wait-for-it\">Can't wait for it?<a aria-hidden=\"true\" href=\"#cant-wait-for-it\">#</a></h4>\n<p>Read more in <a href=\"https://www.callstack.com/blog/shaping-the-future-of-super-apps-in-react-native?ref=zephyr\" target=\"_blank\" rel=\"noopener noreferrer\">Shaping the Future of Super Apps in React Native</a> from Callstack and the maintainer of <a href=\"https://re-pack.dev/?ref=zephyr\" target=\"_blank\" rel=\"noopener noreferrer\">Re.Pack</a>.</p>\n</div></div>","routePath":"/recipes/react-native","lang":"en-US","toc":[{"text":"Coming soon...","id":"coming-soon","depth":2,"charIndex":3},{"text":"Can't wait for it?","id":"cant-wait-for-it","depth":4,"charIndex":26}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/react-native.mdx","_relativePath":"recipes/react-native.mdx"},{"id":69,"title":"React + Rspack + Nx","content":"#\n\nPrerequisites\n * We expect you to have finished our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=20\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\n\nSetup#\n\n1. Create an Nx workspace#\n\nRun below commands:\n\n\n\nAnd select from these options:\n\n\n\n2. Add hosts and remote#\n\nIn your terminal, run:\n\n\n\nIn the terminal select from below answers:\n\n\n\nYour Nx application's initial setup is complete! If you run:\n\n\n\nYou can see your application in the browser.\n\n3. Naming each application#\n\nTo understand why these configuration are necessary - Read the complete\nchecklist to deploy Micro-Frontend with Zephyr.\n\nOpen the new directory in your selected editor and add package.json as a\nstructure below:\n\n\n\nThis command will create all 3 files for you\n\n\n\nIn host's package.json, add below field (minimal example):\n\n\n\nIn remote1's package.json, add below field:\n\n\n\nIn remote2's package.json, add below field:\n\n\n\n4. Create your first commit#\n\nAfter making sure each application in this project has a package.json and the\nnaming aligns with the unique name in module federation config, you will need to\nmake sure this project is a github repository and has at least one commit hash\nby running git commit -m \"commit something\" command.\n\n5. Adding configuration for Zephyr#\n\nInstall Zephyr's plugin for Rspack (works in Webpack too):\n\n\n\nAdd Zephyr plugin to each application's build config by adding below lines from\nNx's auto-generated build config:\n\n\n\nYou will need to do the same for rspack.config.prod.ts for host app.\n\n6. Build the remotes and serve the host#\n\nYou have to build the remote applications first; this ensures that the host\napplication can properly contact the remotes.\n\n\n\n\n\nNow you can serve the host application to check if everything is working\nproperly, which through nx magic will start the two remotes.\n\n\n\nYour host app should start on port 4200 by default and each remote will spin up\non its own port. All three applications should be deployed now.\n\n7. Chrome Extension#\n\nYou can check the application you just deployed in our chrome extension.\n\nHead to Chrome Web Store to install our chrome extension - Zephyr Mission\nControl. Click on Add to Chrome and confirm with Add extension. After you finish\nremember to pin the extension by clicking on on extension management tab to\nprovide you a quicker access to Zephyr's side panel.\n\nOnce you click on the Chrome Extension, a login page will pop up and prompt you\nto log in (if you are using Microsoft Edge you will need to click on Open Side\nPanel).\n\nWhat happens when you log in?\n\nWhile we are logging you in, we are storing your authorization information\nlocally under ~/.zephyr in your root directly. Whenever you want to clean up\nyour local profile information (they are JWT claims for each of the project you\ndeployed through Zephyr), you can enter your root directory in terminal and run:\n\n\n\nNow that you have logged in and deployed your apps; you should see the versions\nof the host application, and the versions of our two remotes (remote1 &\nremote2). Make some changes locally, watch them redeploy and select the new\nversion from the drop down (you may need to refresh the browser to see the\nlatest, if live reload is not checked)\n\nINFO\n\nOur chrome extension is only supported on Chromium based browsers. See a list of\nsupported browser.\n\n8. Dashboard#\n\nIf you want to see all your projects and their versions, sign in on dashboard\nand you will see all your projects and their dependencies.\n\nA more detailed explanation on how to use our dashboard is coming soon.","_html":"<h1 id=\"react--rspack--nx\">React + Rspack + Nx<a aria-hidden=\"true\" href=\"#react--rspack--nx\">#</a></h1>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li>node >=20</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h3 id=\"setup\">Setup<a aria-hidden=\"true\" href=\"#setup\">#</a></h3>\n<h4 id=\"1-create-an-nx-workspace\">1. Create an Nx workspace<a aria-hidden=\"true\" href=\"#1-create-an-nx-workspace\">#</a></h4>\n<p>Run below commands:</p>\n<pre><code meta=\"\">npx create-nx-workspace@latest my-workspace --preset=apps\n</code></pre>\n<p>And select from these options:</p>\n<pre><code meta=\"\">? Which stack do you want to use? None. \n? Package-based monorepo, integrated monorepo, or standalone project? Integrated Monorepo. \n? Which CI provider would you like to use? skip \n? Would you like remote caching to make your build faster? No\n</code></pre>\n<h4 id=\"2-add-hosts-and-remote\">2. Add hosts and remote<a aria-hidden=\"true\" href=\"#2-add-hosts-and-remote\">#</a></h4>\n<p>In your terminal, run:</p>\n<pre><code meta=\"\">npx nx add @nx/react\nnpx nx g @nx/react:host --remotes=remote1,remote2 --bundler=rspack --directory=apps/host \n</code></pre>\n<p>In the terminal select from below answers:</p>\n<pre><code meta=\"\">? Which stylesheet format would you like to use? - css \n? Which E2E test runner would you like to use? - cypress \n? What should be the project name and where should it be generated? \n❯ As provided:\n    Name: host\n    Root: apps/host\n</code></pre>\n<p>Your Nx application's initial setup is complete! If you run:</p>\n<pre><code meta=\"\">npx nx run host:serve\n</code></pre>\n<p>You can see your application in the browser.</p>\n<h4 id=\"3-naming-each-application\">3. Naming each application<a aria-hidden=\"true\" href=\"#3-naming-each-application\">#</a></h4>\n<p>To understand why these configuration are necessary - <a href=\"/how-to/mf-guide\">Read the complete checklist to deploy Micro-Frontend with Zephyr</a>.</p>\n<p>Open the new directory in your selected editor and add <code>package.json</code> as a structure below:</p>\n<pre><code meta=\"\">- apps \n-- host \n--- package.json \n-- remote1 \n--- package.json \n-- remote2 \n--- package.json \n</code></pre>\n<p>This command will create all 3 files for you</p>\n<pre><code meta=\"\">touch apps/host/package.json apps/remote1/package.json apps/remote2/package.json\n</code></pre>\n<p>In host's <code>package.json</code>, add below field (minimal example):</p>\n<pre><code>{\n  \"name\": \"host\",\n  \"version\": \"0.0.0\"\n}\n</code></pre>\n<p>In remote1's <code>package.json</code>, add below field:</p>\n<pre><code>{\n  \"name\": \"remote1\",\n  \"version\": \"0.0.0\"\n}\n</code></pre>\n<p>In remote2's <code>package.json</code>, add below field:</p>\n<pre><code>{\n  \"name\": \"remote2\",\n  \"version\": \"0.0.0\"\n}\n</code></pre>\n<h4 id=\"4-create-your-first-commit\">4. Create your first commit<a aria-hidden=\"true\" href=\"#4-create-your-first-commit\">#</a></h4>\n<p>After making sure each application in this project has a <code>package.json</code> and the naming aligns with the unique name in module federation config, you will need to make sure this project is a github repository and has at least one commit hash by running <code>git commit -m \"commit something\"</code> command.</p>\n<h4 id=\"5-adding-configuration-for-zephyr\">5. Adding configuration for Zephyr<a aria-hidden=\"true\" href=\"#5-adding-configuration-for-zephyr\">#</a></h4>\n<p>Install Zephyr's plugin for Rspack (works in Webpack too):</p>\n<pre><code meta=\"\">npm i zephyr-rspack-plugin@latest \n</code></pre>\n<p>Add Zephyr plugin to each application's build config by adding below lines from Nx's auto-generated build config:</p>\n<pre><code meta=\"\">\nimport {\n  withModuleFederation,\n  ModuleFederationConfig,\n} from '@nx/rspack/module-federation';\n\n\n\n\nconst config: ModuleFederationConfig = {\n  ...baseConfig,\n};\n\n// Nx plugins for rspack to build config object from Nx options and context.\n/**\n * DTS Plugin is disabled in Nx Workspaces as Nx already provides Typing support for Module Federation\n * The DTS Plugin can be enabled by setting dts: true\n * Learn more about the DTS Plugin here: https://module-federation.io/configure/dts.html\n */\nexport default composePlugins(\n  withNx(),\n  withReact(),\n  withModuleFederation(config, { dts: false }),\n  withZephyr() // the plugin sequence in Nx matters. Do remember to put zephyr at the end of your config file. \n)\n</code></pre>\n<p>You will need to do the same for <code>rspack.config.prod.ts</code> for host app.</p>\n<h4 id=\"6-build-the-remotes-and-serve-the-host\">6. Build the remotes and serve the host<a aria-hidden=\"true\" href=\"#6-build-the-remotes-and-serve-the-host\">#</a></h4>\n<p>You have to build the remote applications first; this ensures that the host application can properly contact the remotes.</p>\n<pre><code meta=\"\">nx run remote1:build\n</code></pre>\n<pre><code meta=\"\">nx run remote2:build\n</code></pre>\n<p>Now you can serve the host application to check if everything is working properly, which through nx magic will start the two remotes.</p>\n<pre><code meta=\"\">nx run host:serve\n</code></pre>\n<p>Your host app should start on port 4200 by default and each remote will spin up on its own port. All three applications should be deployed now.</p>\n<h4 id=\"7-chrome-extension\">7. Chrome Extension<a aria-hidden=\"true\" href=\"#7-chrome-extension\">#</a></h4>\n<p>You can check the application you just deployed in our chrome extension.</p>\n<p>Head to Chrome Web Store to install our chrome extension - <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Mission Control</a>. Click on <strong>Add to Chrome</strong> and confirm with <strong>Add extension</strong>. After you finish remember to <strong>pin</strong> the extension by clicking on  on extension management tab to provide you a quicker access to Zephyr's side panel.</p>\n<p>Once you click on the Chrome Extension, a login page will pop up and prompt you to log in (if you are using Microsoft Edge you will need to click on <strong>Open Side Panel</strong>).</p>\n<details><summary>What happens when you log in?</summary><div><p>\nWhile we are logging you in, we are storing your authorization information locally under <code>~/.zephyr</code> in your root directly. Whenever you want to clean up your local profile information (they are JWT claims for each of the project you deployed through Zephyr), you can enter your root directory in terminal and run:</p>\n<pre><code>rm rf ~/.zephyr \n</code></pre>\n</div></details>\n<p>Now that you have logged in and deployed your apps; you should see the versions of the host application, and the versions of our two remotes (remote1 & remote2). Make some changes locally, watch them redeploy and select the new version from the drop down (you may need to refresh the browser to see the latest, if live reload is not checked)</p>\n<div><div>INFO</div><div><p>Our chrome extension is only supported on Chromium based browsers. See a list of <a href=\"/supported#browser-support\">supported browser</a>.\n</p></div></div>\n<h4 id=\"8-dashboard\">8. Dashboard<a aria-hidden=\"true\" href=\"#8-dashboard\">#</a></h4>\n<p>If you want to see all your projects and their versions, sign in on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">dashboard</a> and you will see all your projects and their dependencies.</p>\n\n<p>A more detailed explanation on how to use our dashboard is coming soon.</p>","routePath":"/recipes/react-rspack-nx","lang":"en-US","toc":[{"text":"Setup","id":"setup","depth":3,"charIndex":302},{"text":"1. Create an Nx workspace","id":"1-create-an-nx-workspace","depth":4,"charIndex":310},{"text":"2. Add hosts and remote","id":"2-add-hosts-and-remote","depth":4,"charIndex":395},{"text":"3. Naming each application","id":"3-naming-each-application","depth":4,"charIndex":603},{"text":"4. Create your first commit","id":"4-create-your-first-commit","depth":4,"charIndex":1050},{"text":"5. Adding configuration for Zephyr","id":"5-adding-configuration-for-zephyr","depth":4,"charIndex":1372},{"text":"6. Build the remotes and serve the host","id":"6-build-the-remotes-and-serve-the-host","depth":4,"charIndex":1658},{"text":"7. Chrome Extension","id":"7-chrome-extension","depth":4,"charIndex":2109},{"text":"8. Dashboard","id":"8-dashboard","depth":4,"charIndex":3455}],"domain":"","frontmatter":{"title":"React + Rspack + Nx","description":"Zephyr Cloud Documentation - Get started guide"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/react-rspack-nx.mdx","_relativePath":"recipes/react-rspack-nx.mdx"},{"id":70,"title":"React + Vite + Nx","content":"#","_html":"<h1 id=\"react--vite-in-nx-workspace\">React + Vite in Nx workspace<a aria-hidden=\"true\" href=\"#react--vite-in-nx-workspace\">#</a></h1>","routePath":"/recipes/react-vite-nx","lang":"en-US","toc":[],"domain":"","frontmatter":{"title":"React + Vite + Nx","description":"Zephyr Cloud Documentation - Using React, Vite and Nx as an example"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/react-vite-nx.mdx","_relativePath":"recipes/react-vite-nx.mdx"},{"id":71,"title":"React + Vite","content":"#\n\nIn this React + Vite simple app, we will walk you from creating a simple react\napp with Vite till configure it with Zephyr plugin in vite.config.ts.\n\nPrerequisites\n * We expect you to have finished our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=20\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\n\nGenerating a Vite + React project#\n\n\n\nand then run commands to make sure you have necessary dependencies installed.\n\n\n\n\nAdd Zephyr configuration#\n\nYou should see the website lives in localhost. Open the vite.config.ts in your\neditor and add below modification:\n\n\n\nWARNING\n\nRemember to initialize a git repository in current folder, before you npm run\nbuild to deploy your app.\n\nWith git config initialized, linked to remote origin and additional\nconfiguration, you are ready to deploy:\n\n\n\nYou will see the build output like so and the highlighted lines include your\ndeployed URL:\n\n\n\n\nChrome Extension#\n\nOn your browser, click on , you can see your application is under the dropdown\nmenu:\n\nYou can access this application as well as all the underlying versions anytime\nwhenver you click on Zephyr Cloud chrome extension.","_html":"<h1 id=\"react--vite\">React + Vite<a aria-hidden=\"true\" href=\"#react--vite\">#</a></h1>\n\n<p>In this React + Vite simple app, we will walk you from creating a simple react app\nwith Vite till configure it with Zephyr plugin in <code>vite.config.ts</code>.</p>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li>node >=20</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h2 id=\"generating-a-vite--react-project\">Generating a Vite + React project<a aria-hidden=\"true\" href=\"#generating-a-vite--react-project\">#</a></h2>\n<pre><code meta=\"\"># npm, in npm  7+ double dash is needed\nnpm create vite@latest react-vite-ts -- --template react-ts\n</code></pre>\n<p>and then run commands to make sure you have necessary dependencies installed.</p>\n<pre><code meta=\"\">cd react-vite-ts\nnpm install && npm install vite-plugin-zephyr@latest\nnpm run dev\n</code></pre>\n<h2 id=\"add-zephyr-configuration\">Add Zephyr configuration<a aria-hidden=\"true\" href=\"#add-zephyr-configuration\">#</a></h2>\n<p>You should see the website lives in localhost. Open the <code>vite.config.ts</code> in your editor and add below modification:</p>\n<pre><code meta=\"\">\n\n // Add this line\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    withZephyr(), // Add this line\n  ],\n});\n</code></pre>\n<div><div>WARNING</div><div>\n<p><strong>Remember to initialize a git repository in current folder</strong>, before you <code>npm run build</code> to deploy your app.</p>\n</div></div>\n<p>With git config initialized, linked to remote origin and additional configuration, you are ready to deploy:</p>\n<pre><code meta=\"\">npm run build\n</code></pre>\n<p>You will see the build output like so and the highlighted lines include your deployed URL:</p>\n<pre><code meta=\"\">$ react-vite-ts@0.0.0 build\n$ tsc && vite build\n\nThe CJS build of Vite's Node API is deprecated. See https://vitejs.dev/troubleshooting.html#vite-cjs-node-api-deprecated for more details.\nvite v5.2.13 building for production...\n✓ 34 modules transformed.\ndist/index.html                   0.46 kB │ gzip:  0.30 kB\ndist/assets/react-CHdo91hT.svg    4.13 kB │ gzip:  2.05 kB\ndist/assets/index-DiwrgTda.css    1.39 kB │ gzip:  0.72 kB\ndist/assets/index-DVoHNO1Y.js   143.36 kB │ gzip: 46.09 kB\n✓ built in 423ms\n[zephyr] You are already logged in\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: uploaded local snapshot in 156ms\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: uploading missing assets to zephyr (queued 4 out of 4)\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: uploaded missing assets to zephyr (4 assets in 1009ms, 145.84kb)\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: deploying to https://t_main_id-react-vite-t-309c6c-ze.valorkin.dev\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: deploying to https://id_78-react-vite-ts-re-6d13dd-ze.valorkin.dev\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: deploying to https://react-vite-ts-react-vite-ts-username-ze.valorkin.dev\n[zephyr]: [react-vite-ts.react-vite-ts.username](id)[78]: build deployed in 1067ms\n</code></pre>\n<h2 id=\"chrome-extension\">Chrome Extension<a aria-hidden=\"true\" href=\"#chrome-extension\">#</a></h2>\n<p>On your browser, click on , you can see your application is under the dropdown menu:</p>\n\n<p>You can access this application as well as all the underlying versions anytime whenver you click on Zephyr Cloud chrome extension.</p>","routePath":"/recipes/react-vite","lang":"en-US","toc":[{"text":"Generating a Vite + React project","id":"generating-a-vite--react-project","depth":2,"charIndex":452},{"text":"Add Zephyr configuration","id":"add-zephyr-configuration","depth":2,"charIndex":572},{"text":"Chrome Extension","id":"chrome-extension","depth":2,"charIndex":1036}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/react-vite.mdx","_relativePath":"recipes/react-vite.mdx"},{"id":72,"title":"React Native, Re.Pack and Module Federations","content":"#\n\nThis guide will explain how to use Re.Pack to build a React Native app that uses\nModule Federation to share code between apps.\n\nPrerequisites\n * We expect you to have finished our Get Started guide.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=22\n * ruby >= 3.3.2\n\nSeveral key points that were handled by Re.Pack to make this integration\nattainable:\n\n 1. CLI:\n    1. Traditionally when users run react-native build ios it will fire metro\n       bundler to build the application\n    2. With Re.Pack it will move the build to Rspack\n 2. Module Federation support\n    1. Re.Pack nicely handle the cache invalidation and Federation runtime for\n       cross-platform build\n 3. Utilities\n    1. A couple handy rule sets crafted by Re.Pack\n    2. The rule sets are not baked-in/compulsory, user can plug and play with\n       them within rspack config\n\n\nGet Started#\n\n\nResolving platforms#\n\nBehind zephyr-repack-plugin, we auto-handle the platform resolution. When you\nare building a React Native app, the plugin would recognise the platform and\nfinding, resolving the correct dependencies for the platform. For example if you\nare building for iOS, the plugin would resolve the iOS dependencies and vice\nversa for Android. No additional configuration is required to resolve the\nplatform.\n\nFor each version that's built and deployed, you can find the platform on the Tag\npage of the application version, displayed as IOS or ANDROID next to Target\nfield. The platform's name is also part of the tag name that's being created on\neach deployment.\n\n\n\n\nManage dependencies#\n\nSharing dependencies in a federated mobile application differs slightly from a\nfederated web application. It requires more effort due to the native aspects of\nReact Native dependencies.\n\nTo make module federation work correctly in React Native applications, we need\nto configure the shared field in the Module Federation plugin from Re.Pack. The\ngeneral rule is that react and react-native dependencies must be included in the\nlist and marked as singletons. Marking them as singletons ensures that only one\ninstance of such modules is ever initialized, which is a strict requirement for\nReact and React Native.\n\nIf the dependencies are specified in the host app (or a mini application running\nin isolation), they should also include the eager flag. The eager flag ensures\nthat the module is initialized at the start of the app.\n\nThe same rule applies to all dependencies that include native code. For example,\nif any mini-app uses a library with native code (such as react-native-reanimated\nor react-native-mmkv), it should be added as a singleton and eager-shared\ndependency in the host app, and as a singleton dependency in the mini-app that\nuses it.\n\nFor shared JavaScript-only dependencies, it’s not necessary to mark them as\nshared, as Re.Pack can handle downloading them from the mini-app. However, for\nbetter network efficiency, it is recommended to include them as shared\ndependencies.\n\nAll this effort requires significant maintenance of the dependencies list in\nrspack/webpack and package.json for each application. This process can be\nsimplified by using Microsoft’s rnx-align-deps library with a custom preset and\nhelper functions to generate the shared dependencies list.\n\n\nHandle Navigation#\n\nHandling navigation in a React Native federated application differs slightly\nfrom web apps, as it does not rely solely on a links-based routing system and\nthe browser's history API. Instead, it incorporates native navigation concepts\nsuch as UINavigationController on iOS and Fragment on Android.\n\nThis has a few implications:\n\n * Every navigator needs to be wrapped in a NavigationContainer.\n * It is not possible to navigate directly from one NavigationContainer to\n   another.\n\nConsidering best practices for mini application development, one recommended\napproach is to use multiple NavigationContainer instances: one for the host\napplication and one for each mini application. This allows each mini application\nto maintain independent navigation states and linking setups (e.g., with unique\nprefixes). Navigation between mini applications would then rely solely on\nmethods exposed by the host. This approach minimizes the coupling of mini\napplications by enabling communication between them exclusively through the host\napplication.\n\nHowever, sometimes we opted for a centralized solution, letting the host manage\nthe navigation using a single NavigationContainer with the navigation structure\ndefined within it. This approach made sense in our case, as some of our mini\napplications contained only a single isolated screen. It offered several\nadvantages, including:\n\n * A unified source of navigation truth.\n * Simplified linking setup.\n * Compatibility with all navigation scenarios.\n * Adherence to best navigation practices, such as avoiding nested stack\n   navigators and maintaining type safety.\n\nOn the downside, this approach increased coupling, which resulted in challenges\nfor standalone development and required host app updates for any navigation\nchanges within the application.\n\nThere is also a third solution: using a single NavigationContainer in the host\napplication while exposing navigators from the mini applications. This approach\nreduces coupling, allowing mini applications to maintain control over their\nnavigators. However, it can lead to undesirable navigation structures, such as\ndeeply nested stack navigators, and a complex linking setup that requires\nsynchronization between the host and mini applications.\n\nContributor#\n\nHuge thanks for Callstack for working with us to make this possible.\n\nJakub Romańczyk\n\nMaciej Budziński\n\nKacper Wiszczuk\n\nBoris Yankov\n\nMaciej Łodygowski","_html":"<h1 id=\"react-native-repack-and-module-federations\">React Native, Re.Pack and Module Federations<a aria-hidden=\"true\" href=\"#react-native-repack-and-module-federations\">#</a></h1>\n<p>This guide will explain how to use <a href=\"https://re-pack.dev\" target=\"_blank\" rel=\"noopener noreferrer\">Re.Pack</a> to build a React Native app that uses <a href=\"https://module-federation.io\" target=\"_blank\" rel=\"noopener noreferrer\">Module Federation</a> to share code between apps.</p>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li><strong>node >=22</strong></li>\n<li>ruby >= 3.3.2</li>\n</ul>\n</div></div>\n<p>Several key points that were handled by Re.Pack to make this integration attainable:</p>\n<ol>\n<li>CLI:\n<ol>\n<li>Traditionally when users run <code>react-native build ios</code> it will fire metro bundler to build the application</li>\n<li>With Re.Pack it will move the build to Rspack</li>\n</ol>\n</li>\n<li>Module Federation support\n<ol>\n<li>Re.Pack nicely handle the cache invalidation and Federation runtime for cross-platform build</li>\n</ol>\n</li>\n<li>Utilities\n<ol>\n<li>A couple handy rule sets crafted by Re.Pack</li>\n<li>The rule sets are not baked-in/compulsory, user can plug and play with them within rspack config</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"get-started\">Get Started<a aria-hidden=\"true\" href=\"#get-started\">#</a></h2>\n\n<h2 id=\"resolving-platforms\">Resolving platforms<a aria-hidden=\"true\" href=\"#resolving-platforms\">#</a></h2>\n<p>Behind <code>zephyr-repack-plugin</code>, we auto-handle the platform resolution. When you are building a React Native app, the plugin would recognise the platform and finding, resolving the correct dependencies for the platform. For example if you are building for iOS, the plugin would resolve the iOS dependencies and vice versa for Android. No additional configuration is required to resolve the platform.</p>\n<p>For each version that's built and deployed, you can find the platform on the Tag page of the application version, displayed as <code>IOS</code> or <code>ANDROID</code> next to <code>Target</code> field. The platform's name is also part of the tag name that's being created on each deployment.</p>\n<p><img src=\"/repack/platform-resolve.png\" alt=\"platform-tag\"></img></p>\n<h2 id=\"manage-dependencies\">Manage dependencies<a aria-hidden=\"true\" href=\"#manage-dependencies\">#</a></h2>\n<p>Sharing dependencies in a federated mobile application differs slightly from a federated web application. It requires more effort due to the native aspects of React Native dependencies.</p>\n<p>To make module federation work correctly in React Native applications, we need to configure the <code>shared</code> field in the Module Federation plugin from Re.Pack. The general rule is that <code>react</code> and <code>react-native</code> dependencies must be included in the list and marked as singletons. Marking them as singletons ensures that only one instance of such modules is ever initialized, which is a strict requirement for React and React Native.</p>\n<p>If the dependencies are specified in the host app (or a mini application running in isolation), they should also include the <code>eager</code> flag. The <code>eager</code> flag ensures that the module is initialized at the start of the app.</p>\n<p>The same rule applies to all dependencies that include native code. For example, if any mini-app uses a library with native code (such as <code>react-native-reanimated</code> or <code>react-native-mmkv</code>), it should be added as a singleton and eager-shared dependency in the host app, and as a singleton dependency in the mini-app that uses it.</p>\n<p>For shared JavaScript-only dependencies, it’s not necessary to mark them as shared, as Re.Pack can handle downloading them from the mini-app. However, for better network efficiency, it is recommended to include them as shared dependencies.</p>\n<p>All this effort requires significant maintenance of the dependencies list in <code>rspack</code>/<code>webpack</code> and <code>package.json</code> for each application. This process can be simplified by using Microsoft’s <code>rnx-align-deps</code> library with a custom preset and helper functions to generate the shared dependencies list.</p>\n<h2 id=\"handle-navigation\">Handle Navigation<a aria-hidden=\"true\" href=\"#handle-navigation\">#</a></h2>\n<p>Handling navigation in a React Native federated application differs slightly from web apps, as it does not rely solely on a links-based routing system and the browser's history API. Instead, it incorporates native navigation concepts such as UINavigationController on iOS and Fragment on Android.</p>\n<p>This has a few implications:</p>\n<ul>\n<li>Every navigator needs to be wrapped in a NavigationContainer.</li>\n<li>It is not possible to navigate directly from one NavigationContainer to another.</li>\n</ul>\n<p>Considering best practices for mini application development, one recommended approach is to use multiple NavigationContainer instances: one for the host application and one for each mini application. This allows each mini application to maintain independent navigation states and linking setups (e.g., with unique prefixes). Navigation between mini applications would then rely solely on methods exposed by the host. This approach minimizes the coupling of mini applications by enabling communication between them exclusively through the host application.</p>\n<p>However, sometimes we opted for a centralized solution, letting the host manage the navigation using a single NavigationContainer with the navigation structure defined within it. This approach made sense in our case, as some of our mini applications contained only a single isolated screen. It offered several advantages, including:</p>\n<ul>\n<li>A unified source of navigation truth.</li>\n<li>Simplified linking setup.</li>\n<li>Compatibility with all navigation scenarios.</li>\n<li>Adherence to best navigation practices, such as avoiding nested stack navigators and maintaining type safety.</li>\n</ul>\n<p>On the downside, this approach increased coupling, which resulted in challenges for standalone development and required host app updates for any navigation changes within the application.</p>\n<p>There is also a third solution: using a single NavigationContainer in the host application while exposing navigators from the mini applications. This approach reduces coupling, allowing mini applications to maintain control over their navigators. However, it can lead to undesirable navigation structures, such as deeply nested stack navigators, and a complex linking setup that requires synchronization between the host and mini applications.</p>\n<h4 id=\"contributor\">Contributor<a aria-hidden=\"true\" href=\"#contributor\">#</a></h4>\n<p>Huge thanks for <a href=\"https://callstack.com\" target=\"_blank\" rel=\"noopener noreferrer\">Callstack</a> for working with us to make this possible.</p>\n<p><a href=\"https://github.com/jbroma\" target=\"_blank\" rel=\"noopener noreferrer\">Jakub Romańczyk</a></p>\n<p><a href=\"https://github.com/maciekBudzinski\" target=\"_blank\" rel=\"noopener noreferrer\">Maciej Budziński</a></p>\n<p><a href=\"https://github.com/Esemesek\" target=\"_blank\" rel=\"noopener noreferrer\">Kacper Wiszczuk</a></p>\n<p><a href=\"https://github.com/borisyankov\" target=\"_blank\" rel=\"noopener noreferrer\">Boris Yankov</a></p>\n<p><a href=\"https://github.com/draggie\" target=\"_blank\" rel=\"noopener noreferrer\">Maciej Łodygowski</a></p>","routePath":"/recipes/repack-mf","lang":"en-US","toc":[{"text":"Get Started","id":"get-started","depth":2,"charIndex":866},{"text":"Resolving platforms","id":"resolving-platforms","depth":2,"charIndex":881},{"text":"Manage dependencies","id":"manage-dependencies","depth":2,"charIndex":1559},{"text":"Handle Navigation","id":"handle-navigation","depth":2,"charIndex":3268},{"text":"Contributor","id":"contributor","depth":4,"charIndex":5529}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/repack-mf.mdx","_relativePath":"recipes/repack-mf.mdx"},{"id":73,"title":"Rolldown with Zephyr","content":"","_html":"<h1 id=\"rolldown-with-zephyr\">Rolldown with Zephyr<a aria-hidden=\"true\" href=\"#rolldown-with-zephyr\">#</a></h1>\n\n<p>In this guide, we'll walk through creating a Rolldown application and configuring it to deploy with Zephyr.</p>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h2 id=\"creating-a-new-project\">Creating a New Project<a aria-hidden=\"true\" href=\"#creating-a-new-project\">#</a></h2>\n<p>The easiest way to get started is using the <code>create-zephyr-apps</code> CLI:</p>\n\n<p>Follow the CLI prompts and select Rolldown as your bundler. This will create a new project with all the necessary dependencies and configuration.</p>\n<h2 id=\"manually\">Manually<a aria-hidden=\"true\" href=\"#manually\">#</a></h2>\n\n<h2 id=\"configure-zephyr-with-rolldown\">Configure Zephyr with Rolldown<a aria-hidden=\"true\" href=\"#configure-zephyr-with-rolldown\">#</a></h2>\n<p>Create a <code>rolldown.config.mjs</code> file in your project root with the following configuration:</p>\n<pre><code meta=\"\">\n\n\nexport default defineConfig({\n  input: 'src/main.tsx',\n  plugins: [\n    {\n      name: 'emit-html',\n      generateBundle() {\n        const html = `\n          <html>\n            <body>\n              <div id=\"root\"></div>\n              <script type=\"module\" src=\"./main.js\"></script>\n            </body>\n          </html>\n        `;\n        this.emitFile({\n          type: 'asset',\n          fileName: 'index.html',\n          source: html,\n        });\n      },\n    },\n    withZephyr(),\n  ],\n});\n</code></pre>\n<h2 id=\"deploy-your-application\">Deploy your application<a aria-hidden=\"true\" href=\"#deploy-your-application\">#</a></h2>\n<div><div>WARNING</div><div>\n<p><strong>Remember to initialize a git repository in current folder</strong>, and <strong>adding a git remote</strong> before attempting to deploy your app:</p>\n<pre><code>git init\ngit remote add origin <REMOTE_URL>\ngit add .\ngit commit -m \"Initial commit\"\n</code></pre>\n</div></div>\n<p>With git initialized and configured, you can now build and deploy your application:</p>\n\n<p>You will see the build output with your deployed URL highlighted in the console output.</p>\n<div><div>INFO</div><div><p>Make sure to add a build script to your package.json:</p>\n<pre><code>{\n  \"scripts\": {\n    \"build\": \"rolldown --config ./rolldown.config.mjs\"\n  }\n}\n</code></pre>\n</div></div>","routePath":"/recipes/rolldown-react","lang":"en-US","toc":[{"text":"Creating a New Project","id":"creating-a-new-project","depth":2,"charIndex":-1},{"text":"Manually","id":"manually","depth":2,"charIndex":-1},{"text":"Configure Zephyr with Rolldown","id":"configure-zephyr-with-rolldown","depth":2,"charIndex":-1},{"text":"Deploy your application","id":"deploy-your-application","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/rolldown-react.mdx","_relativePath":"recipes/rolldown-react.mdx"},{"id":74,"title":"React + Rspack + Turborepo","content":"#\n\nPrerequisites\n * We expect you to have finished our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=20\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\nTo get started with Zephyr and Turborepo, zephyr provides a fully functioning\nstarter template. Simply run the following command:\n\n\n\nThis will generate a monorepo with 3 applications, 1 host app and 2 remote apps.\nThe project has routing built in.\n\nGit\n\nZephyr requires git, the next step should be adding git in whatever way you\nnormally do\n\n\n\n\n\n\n\nThen run:\n\n\n\nTurborepo allows us to create task dependencies so the remote applications will\nbuild before the host application. Once all the builds are finished, you should\nsee a URL in your terminal to your deployed host app.\n\nBuild Hanging?\n\nWe have noticed the the host application will sometimes hang on the initial\nbuild. Please kill the process and restart it.","_html":"<h1 id=\"react--rspack--turborepo\">React + Rspack + Turborepo<a aria-hidden=\"true\" href=\"#react--rspack--turborepo\">#</a></h1>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li>node >=20</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<p>To get started with Zephyr and Turborepo, zephyr provides a fully functioning starter template. Simply run the following command:</p>\n<pre><code meta=\"\">npx create-turbo@latest --example https://github.com/ZephyrCloudIO/zephyr-examples/tree/main/examples/turbo-rspack-mf\n</code></pre>\n<p>This will generate a monorepo with 3 applications, 1 host app and 2 remote apps. The project has routing built in.</p>\n<div><div>Git</div><div><p>Zephyr requires git, the next step should be adding git in whatever way you normally do</p>\n<pre><code meta=\"\">git init\n</code></pre>\n<pre><code meta=\"\">git add .\n</code></pre>\n<pre><code meta=\"\">git commit -m \"initial commit\"\n</code></pre>\n</div></div>\n<p>Then run:</p>\n<pre><code meta=\"\">pnpm build\n</code></pre>\n<p>Turborepo allows us to create task dependencies so the remote applications will build before the host application. Once all the builds are finished, you should see a URL in your terminal to your deployed host app.</p>\n<div><div>Build Hanging?</div><div><p>We have noticed the the host application will sometimes hang on the initial build. Please kill the process and restart it.</p></div></div>","routePath":"/recipes/turborepo-react","lang":"en-US","toc":[],"domain":"","frontmatter":{"title":"React + Rspack + Turborepo","description":"example for using Zephyr in a Turborepo"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/turborepo-react.mdx","_relativePath":"recipes/turborepo-react.mdx"},{"id":75,"title":"Migrating from Vanilla Module Federation","content":"#","_html":"<h1 id=\"migrating-from-vanilla-module-federation\">Migrating from Vanilla Module Federation<a aria-hidden=\"true\" href=\"#migrating-from-vanilla-module-federation\">#</a></h1>","routePath":"/recipes/vanilla-mf","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/vanilla-mf.mdx","_relativePath":"recipes/vanilla-mf.mdx"},{"id":76,"title":"Vite + Webpack + Rspack with Module Federation","content":"#\n\nVite is the first build tool Zephyr is able to handle Module Federation\nconfiguration directly, although you can still use the official Vite Plugin from\nModule Federation. Both cases are supported in this guide.\n\nThis guide aims to walk you through how you can deploy a Micro-Frontend\napplication using the Official Vite Plugin from Module Federation. After this\nguide, you will have a React application consuming remote applications bundled\nby Vite, Rspack and Webpack deployed through Zephyr Cloud.\n\nPrerequisites\n * We expect you to have finished our Get Started guide.\n * Have our browser extension installed in your browser.\n * A registered account on Zephyr Cloud.\n * npm >=10\n * node >=20\n\nIf you don't have nvm to manage your node version yet, head to the official nvm\nguide to install it.\n\n\n\n\nInstall Zephyr Plugins#\n\nFor applications built with Vite:\n\n\n\nFor applications built with Webpack and Rspack:\n\n\n\n\nExample configuration#\n\nFour example build configuration for Vite, Rspack and Webpack.\n\n\nVite Host#\n\nFor your host application, you can use withZephyr() from vite-plugin-zephyr\nplugin to configure Module Federation. The first example configuration is using\nvite-plugin-zephyr directly. The second example is using the official Vite\nPlugin from Module Federation.\n\nExample 1#\n\n\n\nExample 2#\n\nUsing the official Vite Plugin from Module Federation.\n\n\n\nKnown issue\n\n1. Enable top level await For vite-plugin-zephyr to work properly with your\nremotes, you need to set your build target to chrome89 to enable top level\nawait, alternatively you can install vite-plugin-top-level-await plugin to\nenable it and use it in configuration:\n\n\n\n2. Sequence of plugins\n\nBecause of how Vite and Rollup are exposing hooks and processing modules in\nplugins, the sequence of plugins matters where withZephyr() should be after\nreact() but before any other plugins. For example, if svgr() is before\nwithZephyr() it would unexpectedly interrupt the transformed output bundle.\n\n3. Shared dependencies\n\nIf the application doesn't show up in the browser, you might be experiencing\nproblems related to dependencies (one of the potential issues), please rememeber\nto configure modulePreload in your vite.config.ts:\n\n\n\n\nVite Remote#\n\n\n\n\nRspack Remote#\n\nExample project created via npx create-mf-app\n\n\n\n\nWebpack Remote#\n\nExample project created via npx create-mf-app\n\n","_html":"<h1 id=\"vite--webpack--rspack-with-module-federation\">Vite + Webpack + Rspack with Module Federation<a aria-hidden=\"true\" href=\"#vite--webpack--rspack-with-module-federation\">#</a></h1>\n<p>Vite is the first build tool Zephyr is able to handle Module Federation configuration directly, although you can still use the official <a href=\"https://github.com/module-federation/vite\" target=\"_blank\" rel=\"noopener noreferrer\">Vite Plugin</a> from Module Federation. Both cases are supported in this guide.</p>\n<p>This guide aims to walk you through how you can deploy a Micro-Frontend application using the Official Vite Plugin from Module Federation. After this guide, you will have a React application consuming remote applications bundled by Vite, Rspack and Webpack deployed through Zephyr Cloud.</p>\n<div><div>Prerequisites</div><div>\n<ul>\n<li>We expect you to have finished our <a href=\"/general/get-started\">Get Started</a> guide.</li>\n<li>Have our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">browser extension</a> installed in your browser.</li>\n<li>A registered account on <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">Zephyr Cloud</a>.</li>\n<li>npm >=10</li>\n<li>node >=20</li>\n</ul>\n<p>If you don't have <code>nvm</code> to manage your node version yet, head to <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener noreferrer\">the official nvm guide</a> to install it.</p>\n<pre><code>nvm use 20 \n</code></pre>\n</div></div>\n<h3 id=\"install-zephyr-plugins\">Install Zephyr Plugins<a aria-hidden=\"true\" href=\"#install-zephyr-plugins\">#</a></h3>\n<p>For applications built with Vite:</p>\n<pre><code meta=\"\">npm i vite-plugin-zephyr@latest \n</code></pre>\n<p>For applications built with Webpack and Rspack:</p>\n<pre><code meta=\"\">npm i zephyr-webpack-plugin@latest\n</code></pre>\n<h2 id=\"example-configuration\">Example configuration<a aria-hidden=\"true\" href=\"#example-configuration\">#</a></h2>\n<p>Four example build configuration for Vite, Rspack and Webpack.</p>\n<h3 id=\"vite-host\">Vite Host<a aria-hidden=\"true\" href=\"#vite-host\">#</a></h3>\n<p>For your host application, you can use <code>withZephyr()</code> from <code>vite-plugin-zephyr</code> plugin to configure Module Federation. The first example configuration is using <code>vite-plugin-zephyr</code> directly. The second example is using the official <a href=\"https://github.com/module-federation/vite\" target=\"_blank\" rel=\"noopener noreferrer\">Vite Plugin</a> from Module Federation.</p>\n<h4 id=\"example-1\">Example 1<a aria-hidden=\"true\" href=\"#example-1\">#</a></h4>\n<pre><code meta=\"\">\n\n\n\n\nconst mfConfig = {\n  name: 'vite-host',\n  filename: 'remoteEntry.js',\n  remotes: {\n    'vite-remote': {\n      entry: 'http://localhost:5174/remoteEntry.js',\n      type: 'module',\n    },\n    vite_webpack: {\n      entry: 'http://localhost:8080/remoteEntry.js',\n      type: 'var',\n    },\n    vite_rspack: {\n      entry: 'http://localhost:8081/remoteEntry.js',\n      type: 'var',\n    },\n  },\n  shared: {\n    react: {\n      singleton: true,\n    },\n    'react-dom': {\n      singleton: true,\n    },\n  },\n};\n\nexport default defineConfig({\n  plugins: [\n    react(), \n    withZephyr({ mfConfig }), // sequence matters\n    svgr({\n        svgrOptions: {\n          // svgr options\n        },\n      }),\n  ],\n  build: {\n    target: 'chrome89',\n    modulePreload: {\n    // This is important if you have other plugins like `svgr` that are handling transformation of code. \n        resolveDependencies: (_, deps: string[]) => {\n          // Only preload React packages and non-federated modules\n          return deps.filter((dep) => {\n            const isReactPackage = dep.includes('react') || dep.includes('react-dom');\n            const isNotRemoteEntry = !dep.includes('remoteEntry.js');\n\n            return isReactPackage && isNotRemoteEntry;\n          });\n        },\n      },\n  },\n});\n\n</code></pre>\n<h4 id=\"example-2\">Example 2<a aria-hidden=\"true\" href=\"#example-2\">#</a></h4>\n<p>Using the official <a href=\"https://github.com/module-federation/vite\" target=\"_blank\" rel=\"noopener noreferrer\">Vite Plugin</a> from Module Federation.</p>\n<pre><code meta=\"\">\n\n\n\nconst mfConfig: ModuleFederationOptions = {\n  name: 'vite-host',\n  filename: 'remoteEntry.js',\n  remotes: {\n    'vite-remote': {\n      name: 'vite-remote',\n      entry: 'http://localhost:5174/remoteEntry.js',\n      type: 'module',\n    },\n    vite_webpack: {\n      name: 'vite_webpack',\n      entry: 'http://localhost:8080/remoteEntry.js',\n      type: 'var',\n    },\n    vite_rspack: {\n      name: 'vite_rspack',\n      entry: 'http://localhost:8081/remoteEntry.js',\n      type: 'var',\n    },\n  },\n  shared: {\n    react: {\n      singleton: true,\n    },\n    'react-dom': {\n      singleton: true,\n    },\n  },\n};\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    federation({ ...mfConfig }),\n    withZephyr(),\n  ],\n  build: {\n    minify: false,\n    target: 'chrome89',\n  },\n});\n\n</code></pre>\n<div><div>Known issue</div><div>\n<p><strong>1. Enable top level await</strong>\nFor <code>vite-plugin-zephyr</code> to work properly with your remotes, you need to set your build target to <code>chrome89</code> to enable top level await, alternatively you can install <a href=\"https://www.npmjs.com/package/vite-plugin-top-level-await\" target=\"_blank\" rel=\"noopener noreferrer\"><code>vite-plugin-top-level-await</code> plugin to enable it</a> and use it in configuration:</p>\n<pre><code meta=\"\">  plugins: [\n    react(),\n    withZephyr({\n      name: 'viteViteHost',\n      remotes: {\n       ...\n      },\n      filename: 'remoteEntry-[hash].js',\n      manifest: true,\n      shared: {\n        vue: {},\n        'react/': {\n          requiredVersion: '18',\n        },\n        'react-dom': {},\n      ...\n      },\n      runtimePlugins: ['./src/mfPlugins'],\n    }),\n    // If you set build.target: \"chrome89\", you can remove this plugin\n    false && topLevelAwait(),\n  ],\n    build: {\n    target: 'chrome89',\n  },\n</code></pre>\n<p><strong>2. Sequence of plugins</strong></p>\n<p>Because of how Vite and Rollup are exposing hooks and processing modules in plugins, the sequence of plugins matters where <code>withZephyr()</code> should be after <code>react()</code> but before any other plugins. For example, if <code>svgr()</code> is before <code>withZephyr()</code> it would unexpectedly interrupt the transformed output bundle.</p>\n<p><strong>3. Shared dependencies</strong></p>\n<p>If the application doesn't show up in the browser, you might be experiencing problems related to dependencies (one of the potential issues), please rememeber to configure <code>modulePreload</code> in your <code>vite.config.ts</code>:</p>\n<pre><code meta=\"\"> modulePreload: {\n        resolveDependencies: (_, deps: string[]) => {\n          // Only preload React packages and non-federated modules\n          return deps.filter((dep) => {\n            const isReactPackage = dep.includes('react') || dep.includes('react-dom');\n            const isNotRemoteEntry = !dep.includes('remoteEntry.js');\n\n            return isReactPackage && isNotRemoteEntry;\n          });\n        },\n      },\n</code></pre>\n</div></div>\n<h3 id=\"vite-remote\">Vite Remote<a aria-hidden=\"true\" href=\"#vite-remote\">#</a></h3>\n<pre><code meta=\"\">\n\n\n\n\nconst mfConfig = {\n  name: 'vite-remote',\n  filename: 'remoteEntry.js',\n  exposes: {\n    './Button': './src/Button',\n  },\n  shared: ['react', 'react-dom'],\n};\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(), \n    withZephyr({ mfConfig })\n  ],\n  experimental: {\n    renderBuiltUrl() {\n      return { relative: true };\n    },\n  },\n  build: {\n    target: 'chrome89',\n  },\n});\n</code></pre>\n<h3 id=\"rspack-remote\">Rspack Remote<a aria-hidden=\"true\" href=\"#rspack-remote\">#</a></h3>\n<p>Example project created via <code>npx create-mf-app</code></p>\n<pre><code meta=\"\">const rspack = require('@rspack/core');\nconst refreshPlugin = require('@rspack/plugin-react-refresh');\nconst isDev = process.env.NODE_ENV === 'development';\nconst path = require('path');\nconst { withZephyr } = require('zephyr-webpack-plugin');\n\nconst printCompilationMessage = require('./compilation.config.js');\n\n/**\n * @type {import('@rspack/cli').Configuration}\n */\nmodule.exports = withZephyr()({\n  context: __dirname,\n  entry: {\n    main: './src/index.tsx',\n  },\n\n  devServer: {\n    port: 8081,\n    historyApiFallback: true,\n    watchFiles: [path.resolve(__dirname, 'src')],\n    onListening: function (devServer) {\n      const port = devServer.server.address().port;\n\n      printCompilationMessage('compiling', port);\n\n      devServer.compiler.hooks.done.tap('OutputMessagePlugin', (stats) => {\n        setImmediate(() => {\n          if (stats.hasErrors()) {\n            printCompilationMessage('failure', port);\n          } else {\n            printCompilationMessage('success', port);\n          }\n        });\n      });\n    },\n  },\n  experiments: {\n    css: true,\n  },\n  resolve: {\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(svg|png)$/,\n        type: 'asset',\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: 'postcss-loader',\n            options: {\n              postcssOptions: {\n                plugins: {\n                  tailwindcss: {},\n                  autoprefixer: {},\n                },\n              },\n            },\n          },\n        ],\n        type: 'css',\n      },\n      {\n        test: /\\.(jsx?|tsx?)$/,\n        use: [\n          {\n            loader: 'builtin:swc-loader',\n            options: {\n              sourceMap: true,\n              jsc: {\n                parser: {\n                  syntax: 'typescript',\n                  tsx: true,\n                },\n                transform: {\n                  react: {\n                    runtime: 'automatic',\n                    development: isDev,\n                    refresh: isDev,\n                  },\n                },\n                target: 'es2020',\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new rspack.container.ModuleFederationPlugin({\n      name: 'vite_rspack',\n      filename: 'remoteEntry.js',\n      exposes: {\n        './Image': './src/Image',\n      },\n      shared: ['react', 'react-dom'],\n    }),\n    new rspack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    }),\n    new rspack.ProgressPlugin({}),\n    new rspack.HtmlRspackPlugin({\n      template: './src/index.html',\n    }),\n    isDev ? new refreshPlugin() : null,\n  ].filter(Boolean),\n});\n</code></pre>\n<h3 id=\"webpack-remote\">Webpack Remote<a aria-hidden=\"true\" href=\"#webpack-remote\">#</a></h3>\n<p>Example project created via <code>npx create-mf-app</code></p>\n<pre><code meta=\"\">const HtmlWebPackPlugin = require('html-webpack-plugin');\n//const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');\nconst path = require('path');\nconst Dotenv = require('dotenv-webpack');\nconst { withZephyr } = require('zephyr-webpack-plugin');\nconst { ModuleFederationPlugin } = require('@module-federation/enhanced/webpack');\n\nconst deps = require('./package.json').dependencies;\n\nconst printCompilationMessage = require('./compilation.config.js');\n\nmodule.exports = (_, argv) =>\n  withZephyr()({\n    output: {\n      publicPath: 'auto',\n    },\n\n    resolve: {\n      extensions: ['.tsx', '.ts', '.jsx', '.js', '.json'],\n    },\n\n    devServer: {\n      port: 8080,\n      historyApiFallback: true,\n      watchFiles: [path.resolve(__dirname, 'src')],\n      onListening: function (devServer) {\n        const port = devServer.server.address().port;\n\n        printCompilationMessage('compiling', port);\n\n        devServer.compiler.hooks.done.tap('OutputMessagePlugin', (stats) => {\n          setImmediate(() => {\n            if (stats.hasErrors()) {\n              printCompilationMessage('failure', port);\n            } else {\n              printCompilationMessage('success', port);\n            }\n          });\n        });\n      },\n    },\n\n    module: {\n      rules: [\n        {\n          test: /\\.(svg|png)$/,\n          type: 'asset',\n        },\n        {\n          test: /\\.m?js/,\n          type: 'javascript/auto',\n          resolve: {\n            fullySpecified: false,\n          },\n        },\n        {\n          test: /\\.(css|s[ac]ss)$/i,\n          use: ['style-loader', 'css-loader', 'postcss-loader'],\n        },\n        {\n          test: /\\.(ts|tsx|js|jsx)$/,\n          exclude: /node_modules/,\n          use: {\n            loader: 'babel-loader',\n          },\n        },\n      ],\n    },\n\n    plugins: [\n      new ModuleFederationPlugin({\n        name: 'vite_webpack',\n        filename: 'remoteEntry.js',\n        exposes: {\n          './Image': './src/Image',\n        },\n        shared: {\n          react: {\n            singleton: true,\n          },\n          'react-dom': {\n            singleton: true,\n          },\n        },\n      }),\n      new HtmlWebPackPlugin({\n        template: './src/index.html',\n      }),\n      new Dotenv(),\n    ],\n  });\n\n</code></pre>","routePath":"/recipes/vite-rspack-webpack-mf","lang":"en-US","toc":[{"text":"Install Zephyr Plugins","id":"install-zephyr-plugins","depth":3,"charIndex":804},{"text":"Example configuration","id":"example-configuration","depth":2,"charIndex":918},{"text":"Vite Host","id":"vite-host","depth":3,"charIndex":1007},{"text":"Example 1","id":"example-1","depth":4,"charIndex":-1},{"text":"Example 2","id":"example-2","depth":4,"charIndex":1296},{"text":"Vite Remote","id":"vite-remote","depth":3,"charIndex":2208},{"text":"Rspack Remote","id":"rspack-remote","depth":3,"charIndex":2225},{"text":"Webpack Remote","id":"webpack-remote","depth":3,"charIndex":2291}],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/recipes/vite-rspack-webpack-mf.mdx","_relativePath":"recipes/vite-rspack-webpack-mf.mdx"},{"id":77,"title":"Supported toolings","content":"#\n\n\nSupported Frameworks#\n\n\nSupported Bundlers#\n\n\nSupported Cloud Providers#\n\n\nSupported Browser#","_html":"<h1 id=\"supported-bundlers--platforms\">Supported Bundlers & Platforms<a aria-hidden=\"true\" href=\"#supported-bundlers--platforms\">#</a></h1>\n<h2 id=\"supported-frameworks\">Supported Frameworks<a aria-hidden=\"true\" href=\"#supported-frameworks\">#</a></h2>\n\n<h2 id=\"supported-bundlers\">Supported Bundlers<a aria-hidden=\"true\" href=\"#supported-bundlers\">#</a></h2>\n\n<h2 id=\"supported-cloud-providers\">Supported Cloud Providers<a aria-hidden=\"true\" href=\"#supported-cloud-providers\">#</a></h2>\n\n<h2 id=\"supported-browser\">Supported Browser<a aria-hidden=\"true\" href=\"#supported-browser\">#</a></h2>\n","routePath":"/supported","lang":"en-US","toc":[{"text":"Supported Frameworks","id":"supported-frameworks","depth":2,"charIndex":3},{"text":"Supported Bundlers","id":"supported-bundlers","depth":2,"charIndex":27},{"text":"Supported Cloud Providers","id":"supported-cloud-providers","depth":2,"charIndex":49},{"text":"Supported Browser","id":"supported-browser","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"title":"Supported toolings","description":"Zephyr Cloud Documentation - Supported browsers, bundlers and frameworks"},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/supported.mdx","_relativePath":"supported.mdx"},{"id":78,"title":"Features","content":"#\n\nThe core of Zephyr is developed to plug into your applications' build process\nand to create a seamless deployment workflow, thus you can use our core features\nby only downloading our npm packages (you will still need to register an account\nvia our dashboard or chrome extension).\n\nFor specific packages and what to download, please refer to our frameworks and\nbundlers guide or recipes for different frameworks for a detailed walk through.\n\nWhilest using our Chrome extension and dashboard is not strictly necessary, it\nprovides useful functionality such as preview versions, dependency management\nand more - we highly recommend you to download or use them to fully utilise\nZephyr.\n\nIn this section, we will explain features offered by Zephyr and how you can use\nthem.","_html":"<h1 id=\"features\">Features<a aria-hidden=\"true\" href=\"#features\">#</a></h1>\n<p>The core of Zephyr is developed to plug into your applications' build process and to create a seamless deployment workflow, thus you can use our core features by only downloading our npm packages (you will still need to register an account via our <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">dashboard</a> or <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">chrome extension</a>).</p>\n<p>For specific packages and what to download, please refer to our <a href=\"/how-to/framework-bundlers\">frameworks and bundlers guide</a> or <a href=\"/recipes\">recipes for different frameworks</a> for a detailed walk through.</p>\n<p>Whilest using our <a href=\"https://chromewebstore.google.com/detail/zephyr-mission-control/liflhldchhinbaeplljlplhnbkdidedn\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome extension</a> and <a href=\"https://app.zephyr-cloud.io\" target=\"_blank\" rel=\"noopener noreferrer\">dashboard</a> is not strictly necessary, it provides useful functionality such as <a href=\"#preview-versions\">preview versions</a>, <a href=\"#dependency-management\">dependency management</a> and more - we highly recommend you to download or use them to fully utilise Zephyr.</p>\n<p>In this section, we will explain features offered by Zephyr and how you can use them.</p>","routePath":"/usage","lang":"en-US","toc":[],"domain":"","frontmatter":{},"version":"","_filepath":"/Users/nsttt/work/zephyr-documentation/docs/usage.mdx","_relativePath":"usage.mdx"}]